{"version":3,"file":"socket.min.js","sources":["../src/socket.js"],"sourcesContent":["/*\n * Open and maintain a WebSocket to recieve messages from server.\n *\n * @package    block_deft\n * @module     block_deft/socket\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport Log from \"core/log\";\nimport Notification from \"core/notification\";\n\n\nconst Socket = class {\n    /**\n     * Listen to WebSocket and refresh content\n     *\n     * @param {int} contextid Context id of block\n     * @param {string} token Authentication token to connect service\n     */\n    constructor(contextid, token) {\n        this.listeners = [];\n        this.connect(contextid, token);\n    }\n\n    /**\n     * Connect to service\n     *\n     * @param {int} contextid Context id of block\n     * @param {string} token Authentication token to connect service\n     * @returns {object}\n     * @chainable\n     */\n    connect(contextid, token) {\n        this.websocket = new WebSocket('wss://deftly.us/ws');\n        this.websocket.onopen = (e) => {\n            this.websocket.send(token);\n            this.listeners.forEach((callback) => {\n                this.websocket.addEventListener('message', callback);\n                callback(e);\n            });\n        };\n\n        this.websocket.addEventListener('close', (e) => {\n            Log.debug('Disconnected');\n            if (this.disconnected) {\n                return this;\n            } else if (e.code == 1011) {\n                Log.debug('Authentication failed');\n                Ajax.call([{\n                    methodname: 'block_deft_renew_token',\n                    args: {contextid: contextid},\n                    done: (replacement) => {\n                        Log.debug('Reconnecting');\n                        this.connect(contextid, replacement.token);\n                    },\n                    fail: Notification.exception\n                }]);\n            } else {\n                setTimeout(() => {\n                    Log.debug('Reconnecting');\n                    this.connect(contextid, token);\n                }, 5000);\n            }\n\n            return true;\n        });\n\n        return this;\n    }\n\n    /**\n     * Disconnect socket\n     *\n     * @returns {object}\n     * @chainable\n     */\n    disconnect() {\n        this.disconnected = true;\n        this.websocket.close();\n\n        return this;\n    }\n\n    /**\n     * Subscribe listener\n     *\n     * @param {function} callback\n     * @returns {object}\n     * @chainable\n     */\n    subscribe(callback) {\n        this.websocket.addEventListener('message', callback);\n        this.listeners.push(callback);\n\n        return this;\n    }\n};\n\nexport default Socket;\n"],"names":["contextid","token","listeners","connect","websocket","WebSocket","onopen","e","_this","send","forEach","callback","addEventListener","debug","disconnected","code","call","methodname","args","done","replacement","fail","Notification","exception","setTimeout","this","close","push"],"mappings":"utBAqBgBA,UAAWC,yJACdC,UAAY,QACZC,QAAQH,UAAWC,0GAW5B,SAAQD,UAAWC,kCACVG,UAAY,IAAIC,UAAU,2BAC1BD,UAAUE,OAAS,SAACC,GACrBC,MAAKJ,UAAUK,KAAKR,OACpBO,MAAKN,UAAUQ,SAAQ,SAACC,UACpBH,MAAKJ,UAAUQ,iBAAiB,UAAWD,UAC3CA,SAASJ,YAIZH,UAAUQ,iBAAiB,SAAS,SAACL,uBAClCM,MAAM,gBACNL,MAAKM,aACEN,OACU,MAAVD,EAAEQ,mBACLF,MAAM,uCACLG,KAAK,CAAC,CACPC,WAAY,yBACZC,KAAM,CAAClB,UAAWA,WAClBmB,KAAM,SAACC,0BACCP,MAAM,gBACVL,MAAKL,QAAQH,UAAWoB,YAAYnB,QAExCoB,KAAMC,sBAAaC,cAGvBC,YAAW,wBACHX,MAAM,gBACVL,MAAKL,QAAQH,UAAWC,SACzB,MAGA,MAGJwB,+BASX,uBACSX,cAAe,OACfV,UAAUsB,QAERD,8BAUX,SAAUd,sBACDP,UAAUQ,iBAAiB,UAAWD,eACtCT,UAAUyB,KAAKhB,UAEbc"}