{"version":3,"file":"venue_manager.min.js","sources":["../src/venue_manager.js"],"sourcesContent":["/*\n * Manage venue connections\n *\n * @package    block_deft\n * @module     block_deft/venue_manager\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport Fragment from 'core/fragment';\nimport {get_string as getString} from 'core/str';\nimport ModalEvents from 'core/modal_events';\nimport Notification from \"core/notification\";\nimport Log from \"core/log\";\nimport Socket from \"block_deft/socket\";\nimport \"core/adapter\";\n\nexport default class {\n\n    /**\n     * Listen for comment actions\n     *\n     * @param {int} contextid Context id of block\n     * @param {string} token Authentication token\n     * @param {array} peers\n     * @param {int} peerid My peer id\n     * @param {array} iceServers ICE server array to configure peers\n     */\n    constructor (contextid, token, peers, peerid, iceServers) {\n        this.contextid = contextid;\n        this.peerid = peerid;\n        this.iceServers = iceServers;\n        this.lastSignal = 0;\n        this.lastUpdate = 0;\n        this.dataChannels = [];\n        this.peerConnections = [];\n        this.queueout = [];\n\n        if (!window.RTCPeerConnection) {\n            document.querySelectorAll('.venue_manager').forEach((venue) => {\n                const e = new Event('venueclosed', {bubbles: true});\n                venue.dispatchEvent(e);\n            });\n            Notification.alert(\n                getString('unsupportedbrowser', 'block_deft'),\n                getString('unsupportedbrowsermessage', 'block_deft')\n            ).then(notice => {\n                const root = notice.getRoot();\n                root.on(ModalEvents.cancel, () => {\n                    Ajax.call([{\n                        args: {\n                            mute: false,\n                            \"status\": true\n                        },\n                        fail: Notification.exception,\n                        methodname: 'block_deft_venue_settings'\n                    }])[0].then(() => {\n                        window.close();\n                    });\n                });\n            });\n\n            return;\n        }\n        this.audioInput = navigator.mediaDevices.getUserMedia({\n            audio: {\n                autoGainControl: true,\n                echoCancellation: true,\n                noiseSuppression: true,\n                sampleRate: 8000\n            },\n            video: false\n        }).catch((e) => {\n            Log.debug(e);\n\n            Ajax.call([{\n                args: {\n                    mute: true,\n                    \"status\": false\n                },\n                fail: Notification.exception,\n                methodname: 'block_deft_venue_settings'\n            }]);\n\n            return false;\n        });\n        this.audioInput.then(this.monitorVolume.bind(this));\n\n        document.querySelector('body').removeEventListener('click', this.handleMuteButtons);\n        document.querySelector('body').addEventListener('click', this.handleMuteButtons);\n\n        peers.forEach(peerid => {\n            const pc = new RTCPeerConnection({\n                 iceServers: iceServers\n            }),\n                dataChannel = pc.createDataChannel('Events');\n            this.dataChannels.push(dataChannel);\n            dataChannel.onmessage = this.handleMessage.bind(this, peerid);\n            pc.onnegotiationneeded = this.negotiate.bind(this, contextid, pc, peerid);\n            pc.onicecandidate = this.handleICECandidate.bind(this, contextid, peerid);\n            pc.ontrack = this.handleTrackEvent.bind(this, peerid);\n            pc.onconnectionstatechange = this.handleStateChange.bind(this, peerid);\n            this.peerConnections[peerid] = pc;\n        });\n\n        document.querySelector('body').removeEventListener('click', this.handleRaiseHand.bind(this));\n        document.querySelector('body').addEventListener('click', this.handleRaiseHand.bind(this));\n\n        document.querySelector('body').removeEventListener('click', this.closeConnections.bind(this));\n        document.querySelector('body').addEventListener('click', this.closeConnections.bind(this));\n\n        window.onbeforeunload = this.closeConnections.bind(this);\n\n        this.socket = new Socket(contextid, token);\n        this.socket.subscribe(() => {\n            this.sendSignals();\n        });\n    }\n\n    /**\n     * Handle ICE candidate event\n     *\n     * @param {int} contextid Block context id\n     * @param {int} peerid Recipient id\n     * @param {event} e ICE candidate event\n     */\n    handleICECandidate(contextid, peerid, e) {\n        if (e.candidate) {\n            this.sendSignal(peerid, 'new-ice-candidate', e.candidate);\n        }\n    }\n\n    /**\n     * Queue signal to peer\n     *\n     * @param {int} peerid Id of recipient\n     * @param {string} type Signal type\n     * @param {object} message Signal content\n     */\n    sendSignal(peerid, type, message) {\n        this.queueout.push({\n            message: JSON.stringify(message),\n            peerid: peerid,\n            type: type\n        });\n        this.sendSignals();\n    }\n\n    /**\n     * Transfer signals with signal server\n     */\n    sendSignals() {\n\n        if (this.throttled || !navigator.onLine) {\n            return;\n        }\n\n        const time = Date.now();\n        if (this.lastUpdate + 200 > time) {\n            this.throttled = true;\n            setTimeout(() => {\n                this.throttled = false;\n            }, this.lastUpdate + 250 - time);\n            this.sendSignals();\n            return;\n        }\n        this.lastUpdate = time;\n\n        const messages = [];\n        while (this.queueout.length) {\n            messages.push(this.queueout.shift());\n        }\n\n        Ajax.call([{\n            args: {\n                contextid: this.contextid,\n                lastsignal: this.lastSignal,\n                messages: messages\n            },\n            contextid: this.contextid,\n            done: response => {\n                response.settings.forEach(peer => {\n                    if (peer.id == Number(this.peerid)) {\n                        if (peer.status) {\n                            // Release microphone.\n                            clearInterval(this.meterId);\n                            this.audioInput.then(audioStream => {\n                                if (audioStream) {\n                                    audioStream.getAudioTracks().forEach(track => {\n                                        track.stop();\n                                    });\n                                }\n                                return audioStream;\n                            }).catch(Notification.exception);\n\n                            // Close connections.\n                            this.peerConnections.forEach(pc => {\n                                pc.close();\n                            });\n\n                            document.querySelectorAll(\n                                '[data-region=\"deft-venue\"] [data-peerid=\"' + this.peerid + '\"]'\n                            ).forEach(venue => {\n                                const e = new Event('venueclosed', {bubbles: true});\n                                venue.dispatchEvent(e);\n                            });\n\n                            this.socket.disconnect();\n\n                            window.close();\n                            return;\n                        }\n                        this.mute(peer.mute);\n                    }\n                    document.querySelectorAll(\n                        '[data-peerid=\"' + peer.id + '\"] [data-action=\"mute\"], [data-peerid=\"' + peer.id\n                            + '\"] [data-action=\"unmute\"]'\n                    ).forEach(button => {\n                        if (peer.mute == (button.getAttribute('data-action') == 'mute')) {\n                            button.classList.add('hidden');\n                        } else {\n                            button.classList.remove('hidden');\n                        }\n                    });\n                });\n                response.messages.forEach((signal) => {\n                    if (signal.id > this.lastSignal) {\n                        this.lastSignal = signal.id;\n                        this.processSignal(signal);\n                    }\n                });\n\n                for (const key in this.peerConnections.keys()) {\n                    if (!response.peers.includes(key)) {\n                        const pc = this.peerConnections[key];\n                        pc.close();\n                    }\n                }\n            },\n            fail: Notification.exception,\n            methodname: 'block_deft_send_signal'\n        }]);\n    }\n\n    /**\n     * Handle negotiation needed event\n     *\n     * @param {int} contextid Block conntextid\n     * @param {RTCPeerConnection} pc Connection\n     * @param {int} peerid Id of peer\n     * @return {Promise}\n     */\n    negotiate(contextid, pc, peerid) {\n        return pc.createOffer().then(offer => {\n            return pc.setLocalDescription(offer).then(() => {\n                return this.sendSignal(peerid, 'audio-offer', offer);\n            }).catch(Log.debug);\n        });\n    }\n\n    /**\n     * Process a signal\n     *\n     * @param {object} signal Signal received to process\n     */\n    processSignal(signal) {\n        if (signal.type === 'audio-offer') {\n            const pc = this.peerConnections[signal.frompeer] || new RTCPeerConnection({\n                 iceServers: this.iceServers\n            });\n            if (!this.peerConnections[signal.frompeer]) {\n                this.peerConnections[signal.frompeer] = pc;\n            }\n            Log.debug('Received offer');\n            pc.onnegotiationneeded = this.negotiate.bind(this, this.contextid, pc, signal.frompeer);\n            pc.onicecandidate = this.handleICECandidate.bind(this, this.contextid, signal.frompeer);\n            pc.ontrack = this.handleTrackEvent.bind(this, signal.frompeer);\n            pc.onconnectionstatechange = this.handleStateChange.bind(this, signal.frompeer);\n            pc.ondatachannel = (e) => {\n                this.dataChannels.push(e.channel);\n                e.channel.onmessage = this.handleMessage.bind(this, signal.frompeer);\n                e.channel.onopen = () => {\n                    if (document.querySelector('[data-peerid=\"' + this.peerid + '\"] a.hidden[data-action=\"raisehand\"]')) {\n                        window.setTimeout(() => {\n                            e.channel.send('{\"raisehand\": true}');\n                        }, 3000);\n                    }\n                };\n            };\n            pc.setRemoteDescription(JSON.parse(signal.message)).then(() => {\n                Log.debug('Set Remote');\n                return this.audioInput.then(audioStream => {\n                    if (audioStream) {\n                        Log.debug('audio stream');\n                        if (pc.getTransceivers().length < 2) {\n                            audioStream.getAudioTracks().forEach(track => {\n                                pc.addTransceiver(track, {streams: [audioStream]});\n                            });\n                        }\n                    }\n                    Log.debug('Create answer');\n                    return pc.createAnswer().then(answer => {\n                        Log.debug('Answer created');\n                        if (!pc || pc.signalingState == 'stable') {\n                            return false;\n                        }\n                        return pc.setLocalDescription(answer).then(() => {\n                            Log.debug('Set local');\n                            return this.sendSignal(signal.frompeer, 'audio-answer', answer);\n                        }).catch(Log.debug);\n                    }).catch(Notification.exception);\n                }).catch(Notification.exception);\n            }).catch(Log.debug);\n        } else if (signal.type === 'audio-answer') {\n            const pc = this.peerConnections[signal.frompeer];\n            Log.debug('Audio answer');\n            if (pc && pc.signalingState == 'have-local-offer') {\n                pc.setRemoteDescription(JSON.parse(signal.message));\n            }\n        } else if (signal.type === 'new-ice-candidate') {\n            const pc = this.peerConnections[signal.frompeer] || null;\n            if (pc && pc.currentRemoteDescription) {\n                pc.addIceCandidate(JSON.parse(signal.message));\n            }\n        }\n    }\n\n    /**\n     * Handle track event\n     *\n     * @param {int} peerid Id of peer\n     * @param {event} e Track event\n     */\n    handleTrackEvent(peerid, e) {\n        if (\n            !e || !e.streams || !document.querySelector('#deft_audio')\n            || document.querySelector('#deft_audio div[data-peerid=\"' + peerid + '\"]')\n        ) {\n            return;\n        }\n\n        const node = document.createElement('div');\n        node.setAttribute('data-peerid', peerid);\n        if (document.querySelector('body#page-blocks-deft-venue')) {\n            node.setAttribute('class', 'col col-12 col-md-6 col-lg-4 col-xl-3 m-2');\n        } else {\n            node.setAttribute('class', 'col col-12 m-2');\n        }\n        window.setTimeout(() => {\n            node.querySelectorAll('img.card-img-top').forEach(image => {\n                image.setAttribute('height', null);\n                image.setAttribute('width', null);\n            });\n        });\n        document.querySelector('#deft_audio').appendChild(node);\n        Fragment.loadFragment(\n            'block_deft',\n            'venue',\n            this.contextid,\n            {\n                peerid: peerid\n            }\n        ).done((userinfo) => {\n            node.innerHTML = userinfo;\n            const player = node.querySelector('audio');\n            player.srcObject = e.streams[0];\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Change mute status\n     *\n     * @param {bool} state State to be set\n     */\n    mute(state) {\n        this.audioInput.then(audioStream => {\n            if (!audioStream) {\n                return this.audioInput;\n            }\n            audioStream.getAudioTracks().forEach(track => {\n                if (track.enabled == state) {\n                    track.enabled = !state;\n                }\n            });\n            return true;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Raise or lower peers hand\n     *\n     * @param {int} peerid Peer id\n     * @param {event} e Message event\n     */\n    handleMessage(peerid, e) {\n        const message = JSON.parse(e.data);\n        if (message.hasOwnProperty('raisehand')) {\n            document.querySelectorAll('[data-peerid=\"' + peerid + '\"] [data-action=\"raisehand\"]').forEach(button => {\n                if (message.raisehand) {\n                    button.classList.add('hidden');\n                } else {\n                    button.classList.remove('hidden');\n                }\n            });\n            document.querySelectorAll('[data-peerid=\"' + peerid + '\"] [data-action=\"lowerhand\"]').forEach(button => {\n                if (message.raisehand) {\n                    button.classList.remove('hidden');\n                } else {\n                    button.classList.add('hidden');\n                }\n            });\n        }\n        if (message.hasOwnProperty('volume')) {\n            document.querySelectorAll('.volume_indicator[data-peerid=\"' + peerid + '\"]').forEach(indicator => {\n                indicator.querySelector('.low').style.opacity = message.volume.low;\n                indicator.querySelector('.mid').style.opacity = message.volume.mid;\n                indicator.querySelector('.high').style.opacity = message.volume.high;\n            });\n        }\n    }\n\n    /**\n     * Adjust visiblity when state changes\n     *\n     * @param {int} peerid Peer id\n     */\n    handleStateChange(peerid) {\n        const pc = this.peerConnections[peerid];\n        document.querySelectorAll('#deft_audio div[data-peerid=\"' + peerid + '\"]').forEach(userinfo => {\n            switch (pc.connectionState) {\n                case 'connected':\n                    userinfo.classList.remove('hidden');\n                    break;\n                case 'close':\n                case 'failed':\n                    userinfo.remove();\n                    break;\n                case 'disconnected':\n                    userinfo.classList.add('hidden');\n                    break;\n            }\n        });\n    }\n\n    /**\n     * Shut down gracefully before closing\n     *\n     * @param {Event} e Button click\n     */\n    closeConnections(e) {\n        if (e && e.type == 'click') {\n            const button = e.target.closest('[data-region=\"deft-venue\"] a[data-action=\"close\"]');\n            if (button) {\n                e.stopPropagation();\n                e.preventDefault();\n            } else {\n                return;\n            }\n        }\n        document.querySelectorAll('[data-region=\"deft-venue\"] a[data-action=\"close\"] i').forEach(button => {\n            button.classList.add('bg-warning');\n        });\n        Ajax.call([{\n            args: {\n                mute: false,\n                \"status\": true\n            },\n            fail: Notification.exception,\n            methodname: 'block_deft_venue_settings'\n        }]);\n\n        // Release microphone.\n        clearInterval(this.meterId);\n        this.audioInput.then(audioStream => {\n            if (audioStream) {\n                audioStream.getAudioTracks().forEach(track => {\n                    track.stop();\n                });\n            }\n            return true;\n        }).catch(Notification.exception);\n\n        // Close connections.\n        this.peerConnections.forEach(pc => {\n            pc.close();\n        });\n\n        document.querySelectorAll('.deft-venue [data-peerid=\"' + this.peerid + '\"]').forEach(venue => {\n            const event = new Event('venueclosed');\n            venue.despatchEvent(event);\n        });\n\n        window.beforeunload = null;\n    }\n\n    /**\n     * Handle click for mute\n     *\n     * @param {Event} e Button click\n     */\n    handleMuteButtons(e) {\n        const button = e.target.closest(\n            'a[data-action=\"mute\"], a[data-action=\"unmute\"]'\n        );\n        if (button) {\n            const action = button.getAttribute('data-action'),\n                peerid = button.closest('[data-peerid]').getAttribute('data-peerid');\n            e.stopPropagation();\n            e.preventDefault();\n            if (!button.closest('#deft_audio')) {\n                Ajax.call([{\n                    args: {\n                        mute: action == 'mute',\n                        \"status\": false\n                    },\n                        fail: Notification.exception,\n                    methodname: 'block_deft_venue_settings'\n                }]);\n            } else {\n                Ajax.call([{\n                    args: {\n                        mute: true,\n                        peerid: peerid,\n                        \"status\": false\n                    },\n                        fail: Notification.exception,\n                    methodname: 'block_deft_venue_settings'\n                }]);\n            }\n            button.closest('[data-peerid]').querySelectorAll('[data-action=\"mute\"], [data-action=\"unmute\"]').forEach(option => {\n                if (option.getAttribute('data-action') == action) {\n                    option.classList.add('hidden');\n                } else {\n                    option.classList.remove('hidden');\n                }\n            });\n        }\n    }\n\n    /**\n     * Handle hand raise buttons\n     *\n     * @param {Event} e Click event\n     */\n    handleRaiseHand(e) {\n        const button = e.target.closest(\n            'a[data-action=\"raisehand\"], a[data-action=\"lowerhand\"]'\n        );\n        if (button) {\n            const action = button.getAttribute('data-action');\n            e.stopPropagation();\n            e.preventDefault();\n            document.querySelectorAll('a[data-action=\"raisehand\"], a[data-action=\"lowerhand\"]').forEach(button => {\n                if (button.getAttribute('data-action') == action) {\n                    button.classList.add('hidden');\n                } else {\n                    button.classList.remove('hidden');\n                }\n            });\n            Ajax.call([{\n                args: {\n                    \"status\": action == 'raisehand'\n                },\n                    fail: Notification.exception,\n                methodname: 'block_deft_raise_hand'\n            }]);\n            this.dataChannels.forEach(dataChannel => {\n                if (dataChannel.readyState != 'open') {\n                    return;\n                }\n                if (action == 'raisehand') {\n                    dataChannel.send('{\"raisehand\": true}');\n                } else {\n                    dataChannel.send('{\"raisehand\": false}');\n                }\n            });\n        }\n    }\n\n    /**\n     * Process audio to provide visual feedback\n     *\n     * @param {MediaStream} audioStream Audio from user's microphone\n     * @returns {MediaStream}\n     */\n    monitorVolume(audioStream) {\n        if (audioStream) {\n            const audioContext = new AudioContext(),\n                source = audioContext.createMediaStreamSource(audioStream),\n                analyser = new AnalyserNode(audioContext, {\n                    maxDecibels: -50,\n                    minDecibels: -90,\n                    fftSize: 2048,\n                    smoothingTimeConstant: .3\n                }),\n                bufferLength = analyser.frequencyBinCount,\n                data = new Uint8Array(bufferLength);\n            source.connect(analyser);\n            this.meterId = setInterval(() => {\n                analyser.getByteFrequencyData(data);\n                const volume = {\n                    low: Math.min(1, data.slice(0, 16).reduce((a, b) => a + b, 0) / 2000),\n                    mid: Math.min(1, data.slice(17, 31).reduce((a, b) => a + b, 0) / 1000),\n                    high: Math.min(1, data.slice(32).reduce((a, b) => a + b, 0) / 4000)\n                },\n                    message = JSON.stringify({volume: volume}),\n                    peers = [];\n                document.querySelectorAll('.volume_indicator[data-peerid=\"' + this.peerid + '\"]').forEach(indicator => {\n                    indicator.querySelectorAll('.low').forEach(low => {\n                        low.style.opacity = volume.low;\n                    });\n                    indicator.querySelectorAll('.mid').forEach(mid => {\n                        mid.style.opacity = volume.mid;\n                    });\n                    indicator.querySelectorAll('.high').forEach(high => {\n                        high.style.opacity = volume.high;\n                    });\n                });\n                this.dataChannels.forEach(dataChannel => {\n                    if (dataChannel.readyState == 'open') {\n                        dataChannel.send(message);\n                    }\n                });\n                document.querySelectorAll('#deft_audio > div').forEach(peer => {\n                    peers.push(peer);\n                });\n                peers.sort((a, b) => {\n                    let volume = 0;\n                    a.querySelectorAll('.high, .mid, .low').forEach(indicator => {\n                        volume += -indicator.style.opacity;\n                    });\n                    b.querySelectorAll('.high, .mid, .low').forEach(indicator => {\n                        volume += indicator.style.opacity;\n                    });\n                    return volume;\n                });\n                peers.forEach(peer => {\n                    document.querySelector('#deft_audio').appendChild(peer);\n                });\n            }, 100);\n        }\n\n        return audioStream;\n    }\n}\n"],"names":["constructor","contextid","token","peers","peerid","iceServers","lastSignal","lastUpdate","dataChannels","peerConnections","queueout","window","RTCPeerConnection","document","querySelectorAll","forEach","venue","e","Event","bubbles","dispatchEvent","alert","then","notice","getRoot","on","ModalEvents","cancel","call","args","mute","fail","Notification","exception","methodname","close","audioInput","navigator","mediaDevices","getUserMedia","audio","autoGainControl","echoCancellation","noiseSuppression","sampleRate","video","catch","debug","this","monitorVolume","bind","querySelector","removeEventListener","handleMuteButtons","addEventListener","pc","dataChannel","createDataChannel","push","onmessage","handleMessage","onnegotiationneeded","negotiate","onicecandidate","handleICECandidate","ontrack","handleTrackEvent","onconnectionstatechange","handleStateChange","handleRaiseHand","closeConnections","onbeforeunload","socket","Socket","subscribe","sendSignals","candidate","sendSignal","type","message","JSON","stringify","throttled","onLine","time","Date","now","setTimeout","messages","length","shift","lastsignal","done","response","settings","peer","id","Number","status","clearInterval","meterId","audioStream","getAudioTracks","track","stop","disconnect","button","getAttribute","classList","add","remove","signal","processSignal","key","keys","includes","createOffer","offer","setLocalDescription","Log","frompeer","ondatachannel","channel","onopen","send","setRemoteDescription","parse","getTransceivers","addTransceiver","streams","createAnswer","answer","signalingState","currentRemoteDescription","addIceCandidate","node","createElement","setAttribute","image","appendChild","loadFragment","userinfo","innerHTML","srcObject","state","enabled","data","hasOwnProperty","raisehand","indicator","style","opacity","volume","low","mid","high","connectionState","target","closest","stopPropagation","preventDefault","event","despatchEvent","beforeunload","action","option","readyState","audioContext","AudioContext","source","createMediaStreamSource","analyser","AnalyserNode","maxDecibels","minDecibels","fftSize","smoothingTimeConstant","bufferLength","frequencyBinCount","Uint8Array","connect","setInterval","getByteFrequencyData","Math","min","slice","reduce","a","b","sort"],"mappings":"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"}