{"version":3,"file":"venue_manager.min.js","sources":["../src/venue_manager.js"],"sourcesContent":["/*\n * Manage venue connections\n *\n * @package    block_deft\n * @module     block_deft/venue_manager\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport Fragment from 'core/fragment';\nimport {get_string as getString} from 'core/str';\nimport JitsiMeetJS from \"block_deft/jitsi/lib-jitsi-meet.min\";\nimport ModalEvents from 'core/modal_events';\nimport Notification from \"core/notification\";\nimport Log from \"core/log\";\nimport Socket from \"block_deft/socket\";\nimport JitsiSocket from \"block_deft/jitsi/socket\";\nimport adapter from \"core/adapter\";\n\nexport default class VenueManager {\n\n    /**\n     * Listen for comment actions\n     *\n     * @param {int} contextid Context id of block\n     * @param {string} token Authentication token\n     * @param {array} peers\n     * @param {int} peerid My peer id\n     * @param {array} iceServers ICE server array to configure peers\n     * @param {bool} autogaincontrol\n     * @param {bool} echocancellation\n     * @param {bool} noisesuppression\n     * @param {int} samplerate\n     * @param {int} roomid\n     * @param {string} server\n     */\n    constructor(\n        contextid, token, peers, peerid, iceServers, autogaincontrol,\n        echocancellation, noisesuppression, samplerate, roomid, server\n    ) {\n        this.contextid = contextid;\n        this.token = token;\n        this.peerid = peerid;\n        this.iceServers = iceServers;\n        this.autogaincontrol = autogaincontrol;\n        this.echocancellation = echocancellation;\n        this.noisesuppression = noisesuppression;\n        this.roomid = roomid;\n        this.samplerate = samplerate;\n        this.lastSignal = 0;\n        this.lastUpdate = 0;\n        this.dataChannels = [];\n        this.peerConnections = {};\n        this.queueout = [];\n        this.ignoreOffer = new Set();\n        this.makingOffer = new Set();\n        this.peers = peers;\n        this.server = server;\n\n        window.adapter = adapter;\n\n        if (!window.RTCPeerConnection) {\n            document.querySelectorAll('.venue_manager').forEach((venue) => {\n                const e = new Event('venueclosed', {bubbles: true});\n                venue.dispatchEvent(e);\n            });\n            Notification.alert(\n                getString('unsupportedbrowser', 'block_deft'),\n                getString('unsupportedbrowsermessage', 'block_deft')\n            ).then(notice => {\n                const root = notice.getRoot();\n                root.on(ModalEvents.cancel, () => {\n                    return Ajax.call([{\n                        args: {\n                            mute: false,\n                            \"status\": true\n                        },\n                        done: (status) => {\n                            window.close();\n                            return status;\n                        },\n                        fail: Notification.exception,\n                        methodname: 'block_deft_venue_settings'\n                    }]);\n                });\n\n                return notice;\n            }).fail(Notification.exception);\n\n            return;\n        }\n\n        this.addListeners();\n\n        this.startConnection();\n    }\n\n    /**\n     * Add event listeners\n     */\n    addListeners() {\n\n        document.querySelector('body').removeEventListener('click', this.handleMuteButtons.bind(this));\n        document.querySelector('body').addEventListener('click', this.handleMuteButtons.bind(this));\n\n        document.querySelector('body').removeEventListener('click', this.handleRaiseHand.bind(this));\n        document.querySelector('body').addEventListener('click', this.handleRaiseHand.bind(this));\n\n        document.querySelector('body').removeEventListener('click', this.closeConnections.bind(this));\n        document.querySelector('body').addEventListener('click', this.closeConnections.bind(this));\n\n        window.onbeforeunload = this.closeConnections.bind(this);\n        document.body.dispatchEvent(new CustomEvent('deftaction', { }));\n\n        this.audioInput = navigator.mediaDevices.getUserMedia({\n            audio: {\n                autoGainControl: this.autogaincontrol,\n                echoCancellation: this.echocancellation,\n                noiseSuppression: this.noisesuppression,\n                sampleRate: this.samplerate\n            },\n            video: false\n        }).catch(() => {\n            Ajax.call([{\n                args: {\n                    mute: true,\n                    \"status\": false\n                },\n                fail: Notification.exception,\n                methodname: 'block_deft_venue_settings'\n            }]);\n\n            return false;\n        });\n        this.audioInput.then(this.monitorVolume.bind(this)).catch(Log.debug);\n\n        if (!this.token) {\n            return;\n        }\n\n        if (!this.server || this.server == 'wss://deftly.us/janus/ws') {\n            this.socket = new Socket(this.contextid, this.token);\n            this.socket.subscribe(() => {\n                this.sendSignals();\n            });\n\n            return;\n        }\n\n        const domain = this.server;\n\n        JitsiMeetJS.init();\n        JitsiMeetJS.setLogLevel(JitsiMeetJS.logLevels.DEBUG);\n\n        this.connection = new JitsiMeetJS.JitsiConnection(null, this.token, {\n            serviceUrl: `https://${ domain }/http-bind`,\n            hosts: {\n                domain: domain,\n                muc: `conference.${ domain }`\n            }\n        });\n        this.connection.addEventListener(JitsiMeetJS.events.connection.CONNECTION_ESTABLISHED, () => {\n            this.room = this.connection.initJitsiConference(this.roomid, {\n                disableSimulcast: true\n            });\n\n            this.socket = new JitsiSocket(this.room);\n            this.socket.subscribe(() => {\n                this.sendSignals();\n            });\n            document.body.addEventListener('deftaction', () => {\n                this.socket.notify();\n            });\n\n            this.room.join();\n        });\n\n        this.connection.connect();\n    }\n\n    /**\n     * Start to establish the peer connections\n     */\n    startConnection() {\n        this.peers.forEach(peerid => {\n            const pc = new RTCPeerConnection({\n                 iceServers: this.iceServers\n            }),\n                dataChannel = pc.createDataChannel('Events');\n            this.dataChannels.push(dataChannel);\n            this.ignoreOffer.delete(String(peerid));\n            dataChannel.onmessage = this.handleMessage.bind(this, peerid);\n            pc.onnegotiationneeded = this.negotiate.bind(this, this.contextid, pc, peerid);\n            pc.onicecandidate = this.handleICECandidate.bind(this, this.contextid, peerid);\n            pc.ontrack = this.handleTrackEvent.bind(this, peerid);\n            pc.onconnectionstatechange = this.handleStateChange.bind(this, peerid);\n            pc.oniceconnectionstatechange = () => {\n                if (pc.iceConnectionState === \"failed\") {\n                    pc.restartIce();\n                }\n            };\n            this.peerConnections[String(peerid)] = pc;\n        });\n    }\n\n    /**\n     * Handle ICE candidate event\n     *\n     * @param {int} contextid Block context id\n     * @param {int} peerid Recipient id\n     * @param {event} e ICE candidate event\n     */\n    handleICECandidate(contextid, peerid, e) {\n        if (e.candidate) {\n            this.sendSignal(peerid, 'new-ice-candidate', e.candidate);\n        }\n    }\n\n    /**\n     * Queue signal to peer\n     *\n     * @param {int} peerid Id of recipient\n     * @param {string} type Signal type\n     * @param {object} message Signal content\n     */\n    sendSignal(peerid, type, message) {\n        this.queueout.push({\n            message: JSON.stringify(message),\n            peerid: peerid,\n            type: type\n        });\n        this.sendSignals();\n    }\n\n    /**\n     * Transfer signals with signal server\n     */\n    sendSignals() {\n        if (this.throttled || !navigator.onLine) {\n            return;\n        }\n\n        const time = Date.now();\n        if (this.lastUpdate + 200 > time) {\n            this.throttled = true;\n            setTimeout(() => {\n                this.throttled = false;\n            }, this.lastUpdate + 250 - time);\n            this.sendSignals();\n            return;\n        }\n        this.lastUpdate = time;\n\n        const messages = [];\n        while (this.queueout.length) {\n            messages.push(this.queueout.shift());\n        }\n\n        Ajax.call([{\n            args: {\n                contextid: this.contextid,\n                lastsignal: this.lastSignal,\n                messages: messages\n            },\n            contextid: this.contextid,\n            done: response => {\n                response.settings.forEach(peer => {\n                    if (peer.id == Number(this.peerid)) {\n                        if (peer.status) {\n                            // Release microphone.\n                            clearInterval(this.meterId);\n                            this.audioInput.then(audioStream => {\n                                if (audioStream) {\n                                    audioStream.getAudioTracks().forEach(track => {\n                                        track.stop();\n                                    });\n                                }\n                                return audioStream;\n                            }).catch(Notification.exception);\n\n                            // Close connections.\n                            Object.values(this.peerConnections).forEach(pc => {\n                                pc.close();\n                            });\n\n                            document.querySelectorAll(\n                                '[data-region=\"deft-venue\"] [data-peerid=\"' + this.peerid + '\"]'\n                            ).forEach(venue => {\n                                const e = new Event('venueclosed', {bubbles: true});\n                                venue.dispatchEvent(e);\n                            });\n\n                            this.socket.disconnect();\n\n                            window.close();\n                            return;\n                        }\n                        this.mute(peer.mute);\n                    }\n                    document.querySelectorAll(\n                        '[data-peerid=\"' + peer.id + '\"] [data-action=\"mute\"], [data-peerid=\"' + peer.id\n                            + '\"] [data-action=\"unmute\"]'\n                    ).forEach(button => {\n                        if (peer.mute == (button.getAttribute('data-action') == 'mute')) {\n                            button.classList.add('hidden');\n                        } else {\n                            button.classList.remove('hidden');\n                        }\n                    });\n                });\n                if (!response.peers.includes(Number(this.peerid))) {\n                    return;\n                }\n                response.messages.forEach((signal) => {\n                    if (signal.id > this.lastSignal) {\n                        this.lastSignal = signal.id;\n                        this.processSignal(signal);\n                    }\n                });\n\n                for (const key in Object.keys(this.peerConnections)) {\n                    if (!response.peers.includes(Number(key)) && this.peerConnections[key]) {\n                        const pc = this.peerConnections[key];\n                        pc.close();\n                    }\n                }\n            },\n            fail: Notification.exception,\n            methodname: 'block_deft_send_signal'\n        }]);\n    }\n\n    /**\n     * Handle negotiation needed event\n     *\n     * @param {int} contextid Block conntextid\n     * @param {RTCPeerConnection} pc Connection\n     * @param {int} peerid Id of peer\n     * @return {Promise}\n     */\n    negotiate(contextid, pc, peerid) {\n        this.makingOffer.add(String(peerid));\n\n        return pc.setLocalDescription().then(() => {\n            return pc.setLocalDescription();\n        }).then(() => {\n            return this.sendSignal(peerid, 'audio-offer', pc.localDescription);\n        }).catch(Log.debug).finally(() => {\n            this.makingOffer.delete(String(peerid));\n        });\n    }\n\n    /**\n     * Process a signal\n     *\n     * @param {object} signal Signal received to process\n     */\n    processSignal(signal) {\n        if ((signal.type === 'audio-offer') || (signal.type === 'audio-answer')) {\n            const pc = this.peerConnections[String(signal.frompeer)] || new RTCPeerConnection({\n                 iceServers: this.iceServers\n            }),\n                description = JSON.parse(signal.message),\n                polite = (Number(signal.frompeer) < Number(this.peerid));\n            if (!this.peerConnections[String(signal.frompeer)]) {\n                this.peerConnections[String(signal.frompeer)] = pc;\n                pc.onnegotiationneeded = this.negotiate.bind(this, this.contextid, pc, signal.frompeer);\n                pc.oniceconnectionstatechange = () => {\n                    if (pc.iceConnectionState === \"failed\") {\n                        pc.restartIce();\n                    }\n                };\n                pc.onicecandidate = this.handleICECandidate.bind(this, this.contextid, signal.frompeer);\n                pc.ontrack = this.handleTrackEvent.bind(this, signal.frompeer);\n                pc.onconnectionstatechange = this.handleStateChange.bind(this, signal.frompeer);\n                pc.ondatachannel = (e) => {\n                    this.peerAudioPlayer(signal.frompeer);\n                    this.dataChannels.push(e.channel);\n                    e.channel.onmessage = this.handleMessage.bind(this, signal.frompeer);\n                    e.channel.onopen = () => {\n                        window.setTimeout(() => {\n                            e.channel.send(JSON.stringify({\n                                \"raisehand\": !!document.querySelector(\n                                    '[data-peerid=\"' + this.peerid + '\"] a.hidden[data-action=\"raisehand\"]'\n                                )\n                            }));\n                        }, 3000);\n                    };\n                };\n            }\n            if (\n                !polite\n                && (description.type === 'offer')\n                && (this.makingOffer.has(String(signal.frompeer)) || pc.signalingState !== \"stable\")\n            ) {\n                this.ignoreOffer.add(String(signal.frompeer));\n                return;\n            }\n            this.ignoreOffer.delete(String(signal.frompeer));\n            pc.setRemoteDescription(description).then(() => {\n                return this.audioInput;\n            }).then(audioStream => {\n                    if (audioStream) {\n                        if (pc.getTransceivers().length < 2) {\n                            audioStream.getAudioTracks().forEach(track => {\n                                pc.addTransceiver(track, {streams: [audioStream]});\n                            });\n                        }\n                    }\n                    if (description.type == 'offer') {\n                        return pc.setLocalDescription();\n                    }\n                    return audioStream;\n            }).then(() => {\n                if (description.type == 'offer') {\n                    return this.sendSignal(signal.frompeer, 'audio-answer', pc.localDescription);\n                }\n                return pc;\n            }).catch(Log.debug);\n        } else if (signal.type === 'new-ice-candidate') {\n            const pc = this.peerConnections[String(signal.frompeer)] || null;\n            if (pc && pc.currentRemoteDescription) {\n                pc.addIceCandidate(JSON.parse(signal.message)).catch(e => {\n                    if (!this.ignoreOffer.has(String(signal.frompeer))) {\n                        Log.debug(e);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * Handle track event\n     *\n     * @param {int} peerid Id of peer\n     * @param {event} e Track event\n     */\n    handleTrackEvent(peerid, e) {\n        if (\n            !e || !e.streams || !document.querySelector('#deft_audio')\n        ) {\n            return;\n        }\n\n        this.peerAudioPlayer(peerid).then((player) => {\n            if (!player.srcObject) {\n                player.srcObject = e.streams[0];\n            }\n            return;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Change mute status\n     *\n     * @param {bool} state State to be set\n     */\n    mute(state) {\n        this.audioInput.then(audioStream => {\n            if (!audioStream) {\n                return this.audioInput;\n            }\n            audioStream.getAudioTracks().forEach(track => {\n                if (track.enabled == state) {\n                    track.enabled = !state;\n                }\n            });\n            return true;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Raise or lower another peers hand\n     *\n     * @param {int} peerid Peer id\n     * @param {event} e Message event\n     */\n    handleMessage(peerid, e) {\n        const message = JSON.parse(e.data);\n        if (message.hasOwnProperty('raisehand')) {\n            document.querySelectorAll('[data-peerid=\"' + peerid + '\"] [data-action=\"raisehand\"]').forEach(button => {\n                if (message.raisehand) {\n                    button.classList.add('hidden');\n                } else {\n                    button.classList.remove('hidden');\n                }\n            });\n            document.querySelectorAll('[data-peerid=\"' + peerid + '\"] [data-action=\"lowerhand\"]').forEach(button => {\n                if (message.raisehand) {\n                    button.classList.remove('hidden');\n                } else {\n                    button.classList.add('hidden');\n                }\n            });\n        }\n        if (message.hasOwnProperty('volume')) {\n            document.querySelectorAll('.volume_indicator[data-peerid=\"' + peerid + '\"]').forEach(indicator => {\n                indicator.querySelector('.low').style.opacity = message.volume.low;\n                indicator.querySelector('.mid').style.opacity = message.volume.mid;\n                indicator.querySelector('.high').style.opacity = message.volume.high;\n                indicator.setAttribute('data-volume', message.volume.smooth);\n            });\n        }\n        //this.peerAudioPlayer(peerid);\n    }\n\n    /**\n     * Adjust visiblity when state changes\n     *\n     * @param {int} peerid Peer id\n     */\n    handleStateChange(peerid) {\n        const pc = this.peerConnections[String(peerid)];\n        document.querySelectorAll('#deft_audio div[data-peerid=\"' + peerid + '\"]').forEach(userinfo => {\n            switch (pc.connectionState) {\n                case 'connected':\n                    userinfo.classList.remove('hidden');\n                    break;\n                case 'closed':\n                    userinfo.remove();\n                    break;\n                case 'disconnected':\n                    userinfo.classList.add('hidden');\n                    break;\n            }\n        });\n    }\n\n    /**\n     * Shut down gracefully before closing\n     *\n     * @param {Event} e Button click\n     */\n    closeConnections(e) {\n        if (e && e.type == 'click') {\n            const button = e.target.closest('[data-region=\"deft-venue\"] a[data-action=\"close\"]');\n            if (button) {\n                e.stopPropagation();\n                e.preventDefault();\n            } else {\n                return;\n            }\n        }\n        document.querySelectorAll('[data-region=\"deft-venue\"] a[data-action=\"close\"] i').forEach(button => {\n            button.classList.add('bg-danger');\n        });\n        document.querySelector('body').classList.remove('block_deft_raisehand');\n        Ajax.call([{\n            args: {\n                mute: false,\n                \"status\": true\n            },\n            fail: Notification.exception,\n            methodname: 'block_deft_venue_settings'\n        }]);\n\n        // Release microphone.\n        clearInterval(this.meterId);\n        this.audioInput.then(audioStream => {\n            if (audioStream) {\n                audioStream.getAudioTracks().forEach(track => {\n                    track.stop();\n                });\n            }\n            return true;\n        }).catch(Notification.exception);\n\n        // Close connections.\n        Object.values(this.peerConnections).forEach(pc => {\n            pc.close();\n        });\n\n        document.querySelectorAll('[data-region=\"deft-venue\"] [data-peerid=\"' + this.peerid + '\"]').forEach(venue => {\n            const event = new Event('venueclosed');\n            venue.dispatchEvent(event);\n        });\n\n        document.body.dispatchEvent(new CustomEvent('deftaction', { }));\n        window.beforeunload = null;\n        window.close();\n        this.sockect.disconnect();\n    }\n\n    /**\n     * Request audio device to share in venue\n     */\n    shareAudio() {\n        this.audioInput = navigator.mediaDevices.getUserMedia({\n            audio: {\n                autoGainControl: this.autogaincontrol,\n                echoCancellation: this.echocancellation,\n                noiseSuppression: this.noisesuppression,\n                sampleRate: this.samplerate\n            },\n            video: false\n        }).then(audioStream => {\n\n            Ajax.call([{\n                args: {\n                    mute: false,\n                    \"status\": false\n                },\n                fail: Notification.exception,\n                methodname: 'block_deft_venue_settings'\n            }]);\n\n            this.monitorVolume(audioStream);\n\n            return audioStream;\n        }).catch(Log.debug);\n    }\n\n    /**\n     * Handle click for mute\n     *\n     * @param {Event} e Button click\n     */\n    handleMuteButtons(e) {\n        const button = e.target.closest(\n            'a[data-action=\"mute\"], a[data-action=\"unmute\"]'\n        );\n        if (button) {\n            const action = button.getAttribute('data-action'),\n                peerid = button.closest('[data-peerid]').getAttribute('data-peerid');\n            e.stopPropagation();\n            e.preventDefault();\n            if (!button.closest('#deft_audio')) {\n                this.audioInput.then(audioStream => {\n                    if (audioStream) {\n                        Ajax.call([{\n                            args: {\n                                mute: action == 'mute',\n                                \"status\": false\n                            },\n                                fail: Notification.exception,\n                            methodname: 'block_deft_venue_settings'\n                        }]);\n                    } else if (action == 'unmute') {\n                        this.shareAudio();\n                    }\n\n                    return audioStream;\n                }).catch(Notification.exception);\n            } else {\n                Ajax.call([{\n                    args: {\n                        mute: true,\n                        peerid: peerid,\n                        \"status\": false\n                    },\n                    fail: Notification.exception,\n                    methodname: 'block_deft_venue_settings'\n                }]);\n            }\n            button.closest('[data-peerid]').querySelectorAll('[data-action=\"mute\"], [data-action=\"unmute\"]').forEach(option => {\n                if (option.getAttribute('data-action') == action) {\n                    option.classList.add('hidden');\n                } else {\n                    option.classList.remove('hidden');\n                }\n            });\n            document.body.dispatchEvent(new CustomEvent('deftaction', { }));\n        }\n    }\n\n    /**\n     * Handle hand raise buttons\n     *\n     * @param {Event} e Click event\n     */\n    handleRaiseHand(e) {\n        const button = e.target.closest(\n            '[data-action=\"raisehand\"], [data-action=\"lowerhand\"]'\n        );\n        if (button && !button.closest('#deft_audio')) {\n            const action = button.getAttribute('data-action');\n            e.stopPropagation();\n            e.preventDefault();\n            if (action == 'raisehand') {\n                document.querySelector('body').classList.add('block_deft_raisehand');\n            } else {\n                document.querySelector('body').classList.remove('block_deft_raisehand');\n            }\n            document.querySelectorAll('a[data-action=\"raisehand\"], a[data-action=\"lowerhand\"]').forEach(button => {\n                if (button.getAttribute('data-action') == action) {\n                    button.classList.add('hidden');\n                } else {\n                    button.classList.remove('hidden');\n                }\n            });\n            Ajax.call([{\n                args: {\n                    \"status\": action == 'raisehand'\n                },\n                    fail: Notification.exception,\n                methodname: 'block_deft_raise_hand'\n            }]);\n            this.sendMessage(JSON.stringify({\"raisehand\": action == 'raisehand'}));\n        }\n    }\n\n    /**\n     * Send a message through data channel to peers\n     *\n     * @param {string} message\n     */\n    sendMessage(message) {\n        this.dataChannels.forEach(dataChannel => {\n            if (dataChannel.readyState == 'open') {\n                dataChannel.send(message);\n            }\n        });\n    }\n\n    /**\n     * Process audio to provide visual feedback\n     *\n     * @param {MediaStream} audioStream Audio from user's microphone\n     * @returns {MediaStream}\n     */\n    monitorVolume(audioStream) {\n        if (audioStream) {\n            const audioContext = new AudioContext(),\n                source = audioContext.createMediaStreamSource(audioStream),\n                analyser = new AnalyserNode(audioContext, {\n                    maxDecibels: -50,\n                    minDecibels: -90,\n                    fftSize: 2048,\n                    smoothingTimeConstant: 0.3\n                }),\n                smoothanalyser = new AnalyserNode(audioContext, {\n                    maxDecibels: -50,\n                    minDecibels: -90,\n                    fftSize: 2048,\n                    smoothingTimeConstant: 0.6\n                }),\n                bufferLength = analyser.frequencyBinCount,\n                data = new Uint8Array(bufferLength),\n                smootheddata = new Uint8Array(bufferLength);\n            source.connect(analyser);\n            source.connect(smoothanalyser);\n            clearInterval(this.meterId);\n            this.meterId = setInterval(() => {\n                analyser.getByteFrequencyData(data);\n                smoothanalyser.getByteFrequencyData(smootheddata);\n                const volume = {\n                    low: Math.min(1, data.slice(0, 16).reduce((a, b) => a + b, 0) / 2000),\n                    mid: Math.min(1, data.slice(17, 31).reduce((a, b) => a + b, 0) / 1000),\n                    high: Math.min(1, data.slice(32).reduce((a, b) => a + b, 0) / 4000),\n                    smooth: Math.min(1, smootheddata.slice(0, 16).reduce((a, b) => a + b, 0) / 2000)\n                        + Math.min(1, smootheddata.slice(17, 31).reduce((a, b) => a + b, 0) / 1000)\n                        + Math.min(1, smootheddata.slice(32).reduce((a, b) => a + b, 0) / 4000)\n                },\n                    message = JSON.stringify({volume: volume}),\n                    peers = [];\n                document.querySelectorAll('.volume_indicator[data-peerid=\"' + this.peerid + '\"]').forEach(indicator => {\n                    indicator.querySelectorAll('.low').forEach(low => {\n                        low.style.opacity = volume.low;\n                    });\n                    indicator.querySelectorAll('.mid').forEach(mid => {\n                        mid.style.opacity = volume.mid;\n                    });\n                    indicator.querySelectorAll('.high').forEach(high => {\n                        high.style.opacity = volume.high;\n                    });\n                });\n                this.sendMessage(message);\n                document.querySelectorAll('#deft_audio > div').forEach(peer => {\n                    peers.push(peer);\n                });\n                peers.sort((a, b) => {\n                    let volume = 0;\n                    a.querySelectorAll('[data-volume]').forEach(indicator => {\n                        volume += -Number(indicator.getAttribute('data-volume'));\n                    });\n                    b.querySelectorAll('[data-volume]').forEach(indicator => {\n                        volume += Number(indicator.getAttribute('data-volume'));\n                    });\n                    return volume;\n                });\n                peers.forEach(peer => {\n                    document.querySelector('#deft_audio').appendChild(peer);\n                });\n            }, 500);\n        }\n\n        return audioStream;\n    }\n\n    /**\n     * Return audio player for peer\n     *\n     * @param {int} peerid Peer id\n     * @returns {Promise} Resolve to audio player node\n     */\n    peerAudioPlayer(peerid) {\n        const usernode = document.querySelector('#deft_audio div[data-peerid=\"' + peerid + '\"] audio');\n        if (usernode) {\n            return Promise.resolve(usernode);\n        } else {\n            const node = document.createElement('div');\n            node.setAttribute('data-peerid', peerid);\n            if (document.querySelector('body#page-blocks-deft-venue')) {\n                node.setAttribute('class', 'col col-12 col-sm-6 col-md-4 col-lg-3 p-2');\n            } else {\n                node.setAttribute('class', 'col col-12 col-sm-6 col-md-4 p-2');\n            }\n            window.setTimeout(() => {\n                node.querySelectorAll('img.card-img-top').forEach(image => {\n                    image.setAttribute('height', null);\n                    image.setAttribute('width', null);\n                });\n            });\n            return Fragment.loadFragment(\n                'block_deft',\n                'venue',\n                this.contextid,\n                {\n                    peerid: peerid\n                }\n            ).done((userinfo) => {\n                if (!document.querySelector('#deft_audio div[data-peerid=\"' + peerid + '\"] audio')) {\n                    document.querySelector('#deft_audio').appendChild(node);\n                    node.innerHTML = userinfo;\n                }\n            }).then(() => {\n                return document.querySelector('#deft_audio div[data-peerid=\"' + peerid + '\"] audio');\n            }).catch(Notification.exception);\n        }\n    }\n}\n"],"names":["_interopRequireDefault","e","__esModule","default","_ajax","_fragment","_libJitsiMeet","_modal_events","_notification","_log","_socket","_socket2","_adapter","_exports","constructor","contextid","token","peers","peerid","iceServers","autogaincontrol","echocancellation","noisesuppression","samplerate","roomid","server","this","lastSignal","lastUpdate","dataChannels","peerConnections","queueout","ignoreOffer","Set","makingOffer","window","adapter","RTCPeerConnection","document","querySelectorAll","forEach","venue","Event","bubbles","dispatchEvent","Notification","alert","getString","get_string","then","notice","getRoot","on","ModalEvents","cancel","Ajax","call","args","mute","status","done","close","fail","exception","methodname","addListeners","startConnection","querySelector","removeEventListener","handleMuteButtons","bind","addEventListener","handleRaiseHand","closeConnections","onbeforeunload","body","CustomEvent","audioInput","navigator","mediaDevices","getUserMedia","audio","autoGainControl","echoCancellation","noiseSuppression","sampleRate","video","catch","monitorVolume","Log","debug","socket","Socket","subscribe","sendSignals","domain","JitsiMeetJS","init","setLogLevel","logLevels","DEBUG","connection","JitsiConnection","serviceUrl","hosts","muc","events","CONNECTION_ESTABLISHED","room","initJitsiConference","disableSimulcast","JitsiSocket","notify","join","connect","pc","dataChannel","createDataChannel","push","delete","String","onmessage","handleMessage","onnegotiationneeded","negotiate","onicecandidate","handleICECandidate","ontrack","handleTrackEvent","onconnectionstatechange","handleStateChange","oniceconnectionstatechange","iceConnectionState","restartIce","candidate","sendSignal","type","message","JSON","stringify","throttled","onLine","time","Date","now","setTimeout","messages","length","shift","lastsignal","response","settings","peer","id","Number","clearInterval","meterId","audioStream","getAudioTracks","track","stop","Object","values","disconnect","button","getAttribute","classList","add","remove","includes","signal","processSignal","key","keys","setLocalDescription","localDescription","finally","frompeer","description","parse","polite","ondatachannel","peerAudioPlayer","channel","onopen","send","raisehand","has","signalingState","setRemoteDescription","getTransceivers","addTransceiver","streams","currentRemoteDescription","addIceCandidate","player","srcObject","state","enabled","data","hasOwnProperty","indicator","style","opacity","volume","low","mid","high","setAttribute","smooth","userinfo","connectionState","target","closest","stopPropagation","preventDefault","event","beforeunload","sockect","shareAudio","action","option","sendMessage","readyState","audioContext","AudioContext","source","createMediaStreamSource","analyser","AnalyserNode","maxDecibels","minDecibels","fftSize","smoothingTimeConstant","smoothanalyser","bufferLength","frequencyBinCount","Uint8Array","smootheddata","setInterval","getByteFrequencyData","Math","min","slice","reduce","a","b","sort","appendChild","usernode","Promise","resolve","node","createElement","image","Fragment","loadFragment","innerHTML"],"mappings":"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"}