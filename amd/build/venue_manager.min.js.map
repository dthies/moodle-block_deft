{"version":3,"file":"venue_manager.min.js","sources":["../src/venue_manager.js"],"sourcesContent":["/*\n * Manage venue connections\n *\n * @package    block_deft\n * @module     block_deft/venue_manager\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport Fragment from 'core/fragment';\nimport Notification from \"core/notification\";\nimport Log from \"core/log\";\nimport Socket from \"block_deft/socket\";\n\nexport default {\n\n    lastSignal: 0,\n\n    lastUpdate: 0,\n\n    dataChannels: [],\n\n    peerConnections: [],\n\n    queue: [],\n\n    queueout: [],\n\n    /**\n     * Listen for comment actions\n     *\n     * @param {int} contextid Context id of block\n     * @param {string} token Authentication token\n     * @param {array} peers\n     * @param {int} peerid My peer id\n     * @param {array} iceServers ICE server array to configure peers\n     */\n    init: function(contextid, token, peers, peerid, iceServers) {\n        this.contextid = contextid;\n        this.peerid = peerid;\n        this.iceServers = iceServers;\n\n        this.audioInput = navigator.mediaDevices.getUserMedia({\n            audio: {\n                autoGainControl: true,\n                echoCancellation: true,\n                noiseSuppression: true,\n                sampleRate: 22050\n            },\n            video: false\n        });\n        document.querySelector('body').addEventListener('click', e => {\n            const button = e.target.closest('a[data-action=\"mute\"], a[data-action=\"unmute\"]');\n            if (button) {\n                const action = button.getAttribute('data-action');\n                    peerid = button.closest('[data-peerid]').getAttribute('data-peerid');\n                e.stopPropagation();\n                e.preventDefault();\n                if (peerid == this.peerid) {\n                    this.mute(action == 'mute');\n                    Ajax.call([{\n                        args: {\n                            mute: action == 'mute',\n                            \"status\": false\n                        },\n                            fail: Notification.exception,\n                        methodname: 'block_deft_venue_settings'\n                    }]);\n                } else {\n                    Ajax.call([{\n                        args: {\n                            mute: true,\n                            peerid: peerid,\n                            \"status\": false\n                        },\n                            fail: Notification.exception,\n                        methodname: 'block_deft_venue_settings'\n                    }]);\n                }\n                button.closest('[data-peerid]').querySelectorAll('[data-action=\"mute\"], [data-action=\"unmute\"]').forEach(option => {\n                    if (option.getAttribute('data-action') == action) {\n                        option.classList.add('hidden');\n                    } else {\n                        option.classList.remove('hidden');\n                    }\n                });\n            }\n        });\n        peers.forEach(peerid => {\n            const pc = new RTCPeerConnection({\n                 iceServers: iceServers\n            }),\n                dataChannel = pc.createDataChannel('Events');\n            this.dataChannels.push(dataChannel);\n            this.audioInput.then(audioStream => {\n                audioStream.getAudioTracks().forEach(track => {\n                    pc.addTrack(track, audioStream);\n                });\n                return true;\n            }).catch(Notification.exception);\n            dataChannel.onmessage = this.handleMessage.bind(this, peerid);\n            pc.onnegotiationneeded = this.negotiate.bind(this, contextid, pc, peerid);\n            pc.onicecandidate = this.handleICECandidate.bind(this, contextid, peerid);\n            pc.ontrack = this.handleTrackEvent.bind(this, peerid);\n            pc.onconnectionstatechange = this.handleStateChange.bind(this, peerid);\n            this.peerConnections[peerid] = pc;\n        });\n\n        document.querySelectorAll('a[data-action=\"raisehand\"], a[data-action=\"lowerhand\"]').forEach(button => {\n            button.addEventListener('click', (e) => {\n                const action = button.getAttribute('data-action');\n                e.stopPropagation();\n                e.preventDefault();\n                document.querySelectorAll('a[data-action=\"raisehand\"], a[data-action=\"lowerhand\"]').forEach(button => {\n                    if (button.getAttribute('data-action') == action) {\n                        button.classList.add('hidden');\n                    } else {\n                        button.classList.remove('hidden');\n                    }\n                });\n                Ajax.call([{\n                    args: {\n                        \"status\": action == 'raisehand'\n                    },\n                        fail: Notification.exception,\n                    methodname: 'block_deft_raise_hand'\n                }]);\n                this.dataChannels.forEach(dataChannel => {\n                    if (dataChannel.readyState != 'open') {\n                        return;\n                    }\n                    if (action == 'raisehand') {\n                        dataChannel.send('{\"raisehand\": true}');\n                    } else {\n                        dataChannel.send('{\"raisehand\": false}');\n                    }\n                });\n            });\n        });\n\n        document.querySelectorAll('a[data-action=\"close\"]').forEach(button => {\n            button.addEventListener('click', e => {\n                e.stopPropagation();\n                e.preventDefault();\n                button.firstChild.classList.add('bg-warning');\n                this.closeConnections();\n            });\n        });\n        window.onbeforeunload = this.closeConnections.bind(this);\n\n        let socket = new Socket(contextid, token);\n        socket.subscribe(() => {\n            this.sendSignals();\n        });\n    },\n\n    /**\n     * Handle ICE candidate event\n     *\n     * @param {int} contextid Block context id\n     * @param {int} peerid Recipient id\n     * @param {event} e ICE candidate event\n     */\n    handleICECandidate: function(contextid, peerid, e) {\n        if (e.candidate) {\n            this.sendSignal(peerid, 'new-ice-candidate', e.candidate);\n        }\n    },\n\n    /**\n     * Queue signal to peer\n     *\n     * @param {int} peerid Id of recipient\n     * @param {string} type Signal type\n     * @param {object} message Signal content\n     */\n    sendSignal: function(peerid, type, message) {\n        this.queueout.push({\n            message: JSON.stringify(message),\n            peerid: peerid,\n            type: type\n        });\n        this.sendSignals();\n    },\n\n    /**\n     * Transfer signals with signal server\n     */\n    sendSignals: function() {\n\n        if (this.throttled || !navigator.onLine) {\n            return;\n        }\n\n        const time = Date.now();\n        if (this.lastUpdate + 200 > time) {\n            this.throttled = true;\n            setTimeout(() => {\n                this.throttled = false;\n            }, this.lastUpdate + 250 - time);\n            this.sendSignals();\n            return;\n        }\n        this.lastUpdate = time;\n\n        const messages = [];\n        while (this.queueout.length) {\n            messages.push(this.queueout.shift());\n        }\n\n        Ajax.call([{\n            args: {\n                contextid: this.contextid,\n                lastsignal: this.lastSignal,\n                messages: messages\n            },\n            contextid: this.contextid,\n            done: response => {\n                response.settings.forEach(peer => {\n                    if (peer.id == Number(this.peerid)) {\n                        if (peer.status) {\n                            window.close();\n                            return;\n                        }\n                        this.mute(peer.mute);\n                    }\n                    document.querySelectorAll(\n                        '[data-peerid=\"' + peer.id + '\"] [data-action=\"mute\"], [data-peerid=\"' + peer.id\n                            + '\"] [data-action=\"unmute\"]'\n                    ).forEach(button => {\n                        if (peer.mute == (button.getAttribute('data-action') == 'mute')) {\n                            button.classList.add('hidden');\n                        } else {\n                            button.classList.remove('hidden');\n                        }\n                    });\n                });\n                response.messages.forEach((signal) => {\n                    if (signal.id > this.lastSignal) {\n                        this.lastSignal = signal.id;\n                        this.queue.push(signal);\n                    }\n                });\n                Log.debug(response.peers);\n\n                for (const key in this.peerConnections.keys()) {\n                    if (!response.peers.includes(key)) {\n                        const pc = this.peerConnections[key];\n                        Log.debug('Close ' + key);\n                        pc.close();\n                        this.peerConnections[key] = null;\n                    }\n                }\n\n                if (!this.processing && this.queue.length) {\n                    this.processing = true;\n                    this.processSignal();\n                }\n            },\n            fail: Notification.exception,\n            methodname: 'block_deft_send_signal'\n        }]);\n    },\n\n    /**\n     * Handle negtiation needed event\n     *\n     * @param {int} contextid Block conntextid\n     * @param {RTCPeerConnection} pc Connection\n     * @param {int} peerid Id of peer\n     * @return {Promise}\n     */\n    negotiate: function(contextid, pc, peerid) {\n        return pc.createOffer().then(offer => {\n            return pc.setLocalDescription(offer).then(() => {\n                return this.sendSignal(peerid, 'audio-offer', offer);\n            }).catch(e => {\n                Log.debug(e);\n                this.processSignal();\n            });\n        });\n    },\n\n    /**\n     * Recursively process queue\n     *\n     * @return {Promise}\n     */\n    processSignal: function() {\n        const signal = this.queue.shift();\n        if (!signal) {\n            this.processing = false;\n            return Promise.resolve(true);\n        } else if (signal.type === 'audio-offer') {\n            const pc = this.peerConnections[signal.frompeer] || new RTCPeerConnection({\n                 iceServers: this.iceServers\n            });\n            if (!this.peerConnections[signal.frompeer]) {\n                this.peerConnections[signal.frompeer] = pc;\n            }\n            Log.debug('Received offer');\n            pc.onnegotiationneeded = this.negotiate.bind(this, this.contextid, pc, signal.frompeer);\n            pc.onicecandidate = this.handleICECandidate.bind(this, this.contextid, signal.frompeer);\n            pc.ontrack = this.handleTrackEvent.bind(this, signal.frompeer);\n            pc.onconnectionstatechange = this.handleStateChange.bind(this, signal.frompeer);\n            pc.ondatachannel = (e) => {\n                this.dataChannels.push(e.channel);\n                e.channel.onmessage = this.handleMessage.bind(this, signal.frompeer);\n                e.channel.onopen = () => {\n                    if (document.querySelector('[data-peerid=\"' + this.peerid + '\"] a.hidden[data-action=\"raisehand\"]')) {\n                        window.setTimeout(() => {\n                            e.channel.send('{\"raisehand\": true}');\n                        }, 3000);\n                    }\n                };\n            };\n            return pc.setRemoteDescription(JSON.parse(signal.message)).then(() => {\n                Log.debug('Set Remote');\n                this.audioInput.then(audioStream => {\n                    Log.debug('audio stream');\n                    audioStream.getAudioTracks().forEach(track => {\n                        pc.addTransceiver(track, {streams: [audioStream]});\n                    });\n                    Log.debug('Create answer');\n                    pc.createAnswer().then(answer => {\n                        Log.debug('Answer created');\n                        if (!pc || pc.signalingState == 'stable') {\n                            return;\n                        }\n                        pc.setLocalDescription(answer).then(() => {\n                            Log.debug('Set local');\n                            this.sendSignal(signal.frompeer, 'audio-answer', answer);\n                        }).catch(e => {\n                            Log.debug(e);\n                            this.processSignal();\n                        });\n                    }).catch(Notification.exception);\n                }).catch(Notification.exception);\n            }).catch(e => {\n                Log.debug(e);\n                this.processSignal();\n            }).then(() => {\n                this.processSignal();\n            }).catch(Notification.exception);\n        } else if (signal.type === 'audio-answer') {\n            const pc = this.peerConnections[signal.frompeer];\n                    Log.debug('Audio answer');\n            if (!pc) {\n                return this.processSignal();\n            }\n            if (pc.signalingState == 'have-local-offer') {\n                return pc.setRemoteDescription(JSON.parse(signal.message)).then(() => {\n                    Log.debug('Set Remote');\n                    return this.processSignal();\n                }).catch(e => {\n                    Log.debug(e);\n                    return this.processSignal();\n                });\n            }\n        } else if (signal.type === 'new-ice-candidate') {\n            const pc = this.peerConnections[signal.frompeer] || null;\n            if (pc && pc.currentRemoteDescription) {\n                return pc.addIceCandidate(JSON.parse(signal.message)).then(() => {\n                    this.processSignal();\n                }).catch(e => {\n                    Log.debug(e);\n                    return this.processSignal();\n                });\n            }\n        }\n        return this.processSignal();\n    },\n\n    /**\n     * Handle track event\n     *\n     * @param {int} peerid Id of peer\n     * @param {event} e Track event\n     */\n    handleTrackEvent: function(peerid, e) {\n        if (!e || !e.streams || document.querySelector('#deft_audio div[data-peerid=\"' + peerid + '\"]')) {\n            return;\n        }\n\n        const node = document.createElement('div');\n        node.setAttribute('data-peerid', peerid);\n        node.setAttribute('class', 'col col-12 col-md-6 col-lg-4 col-xl-3 m-2');\n        window.setTimeout(() => {\n            node.querySelectorAll('img.card-img-top').forEach(image => {\n                image.setAttribute('height', null);\n                image.setAttribute('width', null);\n            });\n        });\n        document.querySelector('#deft_audio').appendChild(node);\n        Fragment.loadFragment(\n            'block_deft',\n            'venue',\n            this.contextid,\n            {\n                peerid: peerid\n            }\n        ).done((userinfo) => {\n            node.innerHTML = userinfo;\n            const player = node.querySelector('audio');\n            player.srcObject = e.streams[0];\n        }).catch(Notification.exception);\n    },\n\n    /**\n     * Change mute status\n     *\n     * @param {bool} state State to be set\n     */\n    mute: function(state) {\n        this.audioInput.then(audioStream => {\n            audioStream.getAudioTracks().forEach(track => {\n                if (track.enabled == state) {\n                    track.enabled = !state;\n                }\n            });\n            return true;\n        }).catch(Notification.exception);\n    },\n\n    /**\n     * Raise or lower peers hand\n     *\n     * @param {int} peerid Peer id\n     * @param {event} e Message event\n     */\n    handleMessage: function(peerid, e) {\n        const message = JSON.parse(e.data);\n        document.querySelectorAll('[data-peerid=\"' + peerid + '\"] [data-action=\"raisehand\"]').forEach(button => {\n            if (message.raisehand) {\n                button.classList.add('hidden');\n            } else {\n                button.classList.remove('hidden');\n            }\n        });\n        document.querySelectorAll('[data-peerid=\"' + peerid + '\"] [data-action=\"lowerhand\"]').forEach(button => {\n            if (message.raisehand) {\n                button.classList.remove('hidden');\n            } else {\n                button.classList.add('hidden');\n            }\n        });\n    },\n\n    /**\n     * Adjust visiblity when state changes\n     *\n     * @param {int} peerid Peer id\n     */\n    handleStateChange(peerid) {\n        const pc = this.peerConnections[peerid];\n        document.querySelectorAll('#deft_audio div[data-peerid=\"' + peerid + '\"]').forEach(userinfo => {\n            switch (pc.connectionState) {\n                case 'connected':\n                    userinfo.classList.remove('hidden');\n                    break;\n                case 'close':\n                case 'failed':\n                    userinfo.remove();\n                    break;\n                case 'disconnected':\n                    userinfo.classList.add('hidden');\n                    break;\n            }\n        });\n    },\n\n    /**\n     * Shut down gracefully before closing\n     *\n     * @return Promise\n     */\n    closeConnections() {\n        Ajax.call([{\n            args: {\n                mute: false,\n                \"status\": true\n            },\n            fail: Notification.exception,\n            methodname: 'block_deft_venue_settings'\n        }]);\n        this.peerConnections.forEach(pc => {\n            pc.close();\n        });\n\n        window.beforeunload = null;\n    }\n};\n"],"names":["lastSignal","lastUpdate","dataChannels","peerConnections","queue","queueout","init","contextid","token","peers","peerid","iceServers","audioInput","navigator","mediaDevices","getUserMedia","audio","autoGainControl","echoCancellation","noiseSuppression","sampleRate","video","document","querySelector","addEventListener","e","button","target","closest","action","getAttribute","stopPropagation","preventDefault","this","mute","call","args","fail","Notification","exception","methodname","querySelectorAll","forEach","option","classList","add","remove","pc","RTCPeerConnection","dataChannel","createDataChannel","push","then","audioStream","getAudioTracks","track","addTrack","catch","onmessage","handleMessage","bind","onnegotiationneeded","negotiate","onicecandidate","handleICECandidate","ontrack","handleTrackEvent","onconnectionstatechange","handleStateChange","readyState","send","firstChild","closeConnections","window","onbeforeunload","Socket","subscribe","sendSignals","candidate","sendSignal","type","message","JSON","stringify","throttled","onLine","time","Date","now","setTimeout","messages","length","shift","lastsignal","done","response","settings","peer","id","Number","status","close","signal","debug","key","keys","includes","processing","processSignal","createOffer","offer","setLocalDescription","Promise","resolve","frompeer","ondatachannel","channel","onopen","setRemoteDescription","parse","addTransceiver","streams","createAnswer","answer","signalingState","currentRemoteDescription","addIceCandidate","node","createElement","setAttribute","image","appendChild","loadFragment","userinfo","innerHTML","srcObject","state","enabled","data","raisehand","connectionState","beforeunload"],"mappings":"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"}