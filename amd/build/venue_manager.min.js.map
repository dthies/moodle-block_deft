{"version":3,"file":"venue_manager.min.js","sources":["../src/venue_manager.js"],"sourcesContent":["/*\n * Manage venue connections\n *\n * @package    block_deft\n * @module     block_deft/venue_manager\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport Fragment from 'core/fragment';\nimport {get_string as getString} from 'core/str';\nimport ModalEvents from 'core/modal_events';\nimport Notification from \"core/notification\";\nimport Log from \"core/log\";\nimport Socket from \"block_deft/socket\";\nimport \"core/adapter\";\n\nexport default class {\n\n    /**\n     * Listen for comment actions\n     *\n     * @param {int} contextid Context id of block\n     * @param {string} token Authentication token\n     * @param {array} peers\n     * @param {int} peerid My peer id\n     * @param {array} iceServers ICE server array to configure peers\n     * @param {bool} autogaincontrol\n     * @param {bool} echocancellation\n     * @param {bool} noisesuppression\n     * @param {int} samplerate\n     */\n    constructor(contextid, token, peers, peerid, iceServers, autogaincontrol, echocancellation, noisesuppression, samplerate) {\n        this.contextid = contextid;\n        this.peerid = peerid;\n        this.iceServers = iceServers;\n        this.autogaincontrol = autogaincontrol;\n        this.echocancellation = echocancellation;\n        this.noisesuppression = noisesuppression;\n        this.samplerate = samplerate;\n        this.lastSignal = 0;\n        this.lastUpdate = 0;\n        this.dataChannels = [];\n        this.peerConnections = {};\n        this.queueout = [];\n        this.ignoreOffer = new Set();\n        this.makingOffer = new Set();\n\n        if (!window.RTCPeerConnection) {\n            document.querySelectorAll('.venue_manager').forEach((venue) => {\n                const e = new Event('venueclosed', {bubbles: true});\n                venue.dispatchEvent(e);\n            });\n            Notification.alert(\n                getString('unsupportedbrowser', 'block_deft'),\n                getString('unsupportedbrowsermessage', 'block_deft')\n            ).then(notice => {\n                const root = notice.getRoot();\n                root.on(ModalEvents.cancel, () => {\n                    return Ajax.call([{\n                        args: {\n                            mute: false,\n                            \"status\": true\n                        },\n                        fail: Notification.exception,\n                        methodname: 'block_deft_venue_settings'\n                    }])[0].then((status) => {\n                        window.close();\n                        return status;\n                    });\n                });\n\n                return notice;\n            }).fail(Notification.exception);\n\n            return;\n        }\n        this.audioInput = navigator.mediaDevices.getUserMedia({\n            audio: {\n                autoGainControl: autogaincontrol,\n                echoCancellation: echocancellation,\n                noiseSuppression: noisesuppression,\n                sampleRate: samplerate\n            },\n            video: false\n        }).catch((e) => {\n            Log.debug(e);\n\n            Ajax.call([{\n                args: {\n                    mute: true,\n                    \"status\": false\n                },\n                fail: Notification.exception,\n                methodname: 'block_deft_venue_settings'\n            }]);\n\n            return false;\n        });\n        this.audioInput.then(this.monitorVolume.bind(this)).catch(Log.debug);\n\n        document.querySelector('body').removeEventListener('click', this.handleMuteButtons.bind(this));\n        document.querySelector('body').addEventListener('click', this.handleMuteButtons.bind(this));\n\n        peers.forEach(peerid => {\n            const pc = new RTCPeerConnection({\n                 iceServers: iceServers\n            }),\n                dataChannel = pc.createDataChannel('Events');\n            this.dataChannels.push(dataChannel);\n            this.ignoreOffer.delete(String(peerid));\n            dataChannel.onmessage = this.handleMessage.bind(this, peerid);\n            pc.onnegotiationneeded = this.negotiate.bind(this, contextid, pc, peerid);\n            pc.onicecandidate = this.handleICECandidate.bind(this, contextid, peerid);\n            pc.ontrack = this.handleTrackEvent.bind(this, peerid);\n            pc.onconnectionstatechange = this.handleStateChange.bind(this, peerid);\n            pc.oniceconnectionstatechange = () => {\n                if (pc.iceConnectionState === \"failed\") {\n                    Log.debug('restart');\n                    pc.restartIce();\n                }\n            };\n            this.peerConnections[String(peerid)] = pc;\n        });\n\n        document.querySelector('body').removeEventListener('click', this.handleRaiseHand.bind(this));\n        document.querySelector('body').addEventListener('click', this.handleRaiseHand.bind(this));\n\n        document.querySelector('body').removeEventListener('click', this.closeConnections.bind(this));\n        document.querySelector('body').addEventListener('click', this.closeConnections.bind(this));\n\n        window.onbeforeunload = this.closeConnections.bind(this);\n\n        this.socket = new Socket(contextid, token);\n        this.socket.subscribe(() => {\n            this.sendSignals();\n        });\n    }\n\n    /**\n     * Handle ICE candidate event\n     *\n     * @param {int} contextid Block context id\n     * @param {int} peerid Recipient id\n     * @param {event} e ICE candidate event\n     */\n    handleICECandidate(contextid, peerid, e) {\n        if (e.candidate) {\n            this.sendSignal(peerid, 'new-ice-candidate', e.candidate);\n        }\n    }\n\n    /**\n     * Queue signal to peer\n     *\n     * @param {int} peerid Id of recipient\n     * @param {string} type Signal type\n     * @param {object} message Signal content\n     */\n    sendSignal(peerid, type, message) {\n        this.queueout.push({\n            message: JSON.stringify(message),\n            peerid: peerid,\n            type: type\n        });\n        this.sendSignals();\n    }\n\n    /**\n     * Transfer signals with signal server\n     */\n    sendSignals() {\n\n        if (this.throttled || !navigator.onLine) {\n            return;\n        }\n\n        const time = Date.now();\n        if (this.lastUpdate + 200 > time) {\n            this.throttled = true;\n            setTimeout(() => {\n                this.throttled = false;\n            }, this.lastUpdate + 250 - time);\n            this.sendSignals();\n            return;\n        }\n        this.lastUpdate = time;\n\n        const messages = [];\n        while (this.queueout.length) {\n            messages.push(this.queueout.shift());\n        }\n\n        Ajax.call([{\n            args: {\n                contextid: this.contextid,\n                lastsignal: this.lastSignal,\n                messages: messages\n            },\n            contextid: this.contextid,\n            done: response => {\n                response.settings.forEach(peer => {\n                    if (peer.id == Number(this.peerid)) {\n                        if (peer.status) {\n                            // Release microphone.\n                            clearInterval(this.meterId);\n                            this.audioInput.then(audioStream => {\n                                if (audioStream) {\n                                    audioStream.getAudioTracks().forEach(track => {\n                                        track.stop();\n                                    });\n                                }\n                                return audioStream;\n                            }).catch(Notification.exception);\n\n                            // Close connections.\n                            Object.values(this.peerConnections).forEach(pc => {\n                                pc.close();\n                            });\n\n                            document.querySelectorAll(\n                                '[data-region=\"deft-venue\"] [data-peerid=\"' + this.peerid + '\"]'\n                            ).forEach(venue => {\n                                const e = new Event('venueclosed', {bubbles: true});\n                                venue.dispatchEvent(e);\n                            });\n\n                            this.socket.disconnect();\n\n                            window.close();\n                            return;\n                        }\n                        this.mute(peer.mute);\n                    }\n                    document.querySelectorAll(\n                        '[data-peerid=\"' + peer.id + '\"] [data-action=\"mute\"], [data-peerid=\"' + peer.id\n                            + '\"] [data-action=\"unmute\"]'\n                    ).forEach(button => {\n                        if (peer.mute == (button.getAttribute('data-action') == 'mute')) {\n                            button.classList.add('hidden');\n                        } else {\n                            button.classList.remove('hidden');\n                        }\n                    });\n                });\n                if (!response.peers.includes(Number(this.peerid))) {\n                    return;\n                }\n                response.messages.forEach((signal) => {\n                    if (signal.id > this.lastSignal) {\n                        this.lastSignal = signal.id;\n                        this.processSignal(signal);\n                    }\n                });\n\n                for (const key in Object.keys(this.peerConnections)) {\n                    if (!response.peers.includes(Number(key)) && this.peerConnections[key]) {\n                        const pc = this.peerConnections[key];\n                        pc.close();\n                    }\n                }\n            },\n            fail: Notification.exception,\n            methodname: 'block_deft_send_signal'\n        }]);\n    }\n\n    /**\n     * Handle negotiation needed event\n     *\n     * @param {int} contextid Block conntextid\n     * @param {RTCPeerConnection} pc Connection\n     * @param {int} peerid Id of peer\n     * @return {Promise}\n     */\n    negotiate(contextid, pc, peerid) {\n        this.makingOffer.add(String(peerid));\n\n        return pc.setLocalDescription().then(() => {\n            return pc.setLocalDescription().then(() => {\n                return this.sendSignal(peerid, 'audio-offer', pc.localDescription);\n            }).catch(Log.debug).finally(() => {\n                this.makingOffer.delete(String(peerid));\n            });\n        });\n    }\n\n    /**\n     * Process a signal\n     *\n     * @param {object} signal Signal received to process\n     */\n    processSignal(signal) {\n        if ((signal.type === 'audio-offer') || (signal.type === 'audio-answer')) {\n            const pc = this.peerConnections[String(signal.frompeer)] || new RTCPeerConnection({\n                 iceServers: this.iceServers\n            }),\n                description = JSON.parse(signal.message),\n                polite = (Number(signal.frompeer) < Number(this.peerid));\n            if (!this.peerConnections[String(signal.frompeer)]) {\n                this.peerConnections[String(signal.frompeer)] = pc;\n                pc.onnegotiationneeded = this.negotiate.bind(this, this.contextid, pc, signal.frompeer);\n                pc.oniceconnectionstatechange = () => {\n                    if (pc.iceConnectionState === \"failed\") {\n                        Log.debug('restart');\n                        pc.restartIce();\n                    }\n                };\n                pc.onicecandidate = this.handleICECandidate.bind(this, this.contextid, signal.frompeer);\n                pc.ontrack = this.handleTrackEvent.bind(this, signal.frompeer);\n                pc.onconnectionstatechange = this.handleStateChange.bind(this, signal.frompeer);\n                pc.ondatachannel = (e) => {\n                    this.peerAudioPlayer(signal.frompeer);\n                    this.dataChannels.push(e.channel);\n                    e.channel.onmessage = this.handleMessage.bind(this, signal.frompeer);\n                    e.channel.onopen = () => {\n                        window.setTimeout(() => {\n                            e.channel.send(JSON.stringify({\n                                \"raisehand\": !!document.querySelector(\n                                    '[data-peerid=\"' + this.peerid + '\"] a.hidden[data-action=\"raisehand\"]'\n                                )\n                            }));\n                        }, 3000);\n                    };\n                };\n            }\n            if (\n                !polite\n                && (description.type === 'offer')\n                && (this.makingOffer.has(String(signal.frompeer)) || pc.signalingState !== \"stable\")\n            ) {\n                this.ignoreOffer.add(String(signal.frompeer));\n                Log.debug('ignore offer');\n                return;\n            }\n            this.ignoreOffer.delete(String(signal.frompeer));\n            pc.setRemoteDescription(description).then(() => {\n                Log.debug('Set Remote');\n                return this.audioInput.then(audioStream => {\n                    if (audioStream) {\n                        Log.debug('audio stream');\n                        if (pc.getTransceivers().length < 2) {\n                            audioStream.getAudioTracks().forEach(track => {\n                                pc.addTransceiver(track, {streams: [audioStream]});\n                            });\n                        }\n                    }\n                    Log.debug('Create answer');\n                    if (description.type == 'offer') {\n                        pc.setLocalDescription().then(() => {\n                            Log.debug('Set local');\n                            return this.sendSignal(signal.frompeer, 'audio-answer', pc.localDescription);\n                        }).catch(Log.debug);\n                    }\n                    return audioStream;\n                }).catch(Notification.exception);\n            }).catch(Log.debug);\n        } else if (signal.type === 'new-ice-candidate') {\n            const pc = this.peerConnections[String(signal.frompeer)] || null;\n            if (pc && pc.currentRemoteDescription) {\n                pc.addIceCandidate(JSON.parse(signal.message)).catch(e => {\n                    if (!this.ignoreOffer.has(String(signal.frompeer))) {\n                        Log.debug(e);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * Handle track event\n     *\n     * @param {int} peerid Id of peer\n     * @param {event} e Track event\n     */\n    handleTrackEvent(peerid, e) {\n        if (\n            !e || !e.streams || !document.querySelector('#deft_audio')\n        ) {\n            return;\n        }\n\n        this.peerAudioPlayer(peerid).then((player) => {\n            if (!player.srcObject) {\n                player.srcObject = e.streams[0];\n            }\n            return;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Change mute status\n     *\n     * @param {bool} state State to be set\n     */\n    mute(state) {\n        this.audioInput.then(audioStream => {\n            if (!audioStream) {\n                return this.audioInput;\n            }\n            audioStream.getAudioTracks().forEach(track => {\n                if (track.enabled == state) {\n                    track.enabled = !state;\n                }\n            });\n            return true;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Raise or lower another peers hand\n     *\n     * @param {int} peerid Peer id\n     * @param {event} e Message event\n     */\n    handleMessage(peerid, e) {\n        const message = JSON.parse(e.data);\n        if (message.hasOwnProperty('raisehand')) {\n            document.querySelectorAll('[data-peerid=\"' + peerid + '\"] [data-action=\"raisehand\"]').forEach(button => {\n                if (message.raisehand) {\n                    button.classList.add('hidden');\n                } else {\n                    button.classList.remove('hidden');\n                }\n            });\n            document.querySelectorAll('[data-peerid=\"' + peerid + '\"] [data-action=\"lowerhand\"]').forEach(button => {\n                if (message.raisehand) {\n                    button.classList.remove('hidden');\n                } else {\n                    button.classList.add('hidden');\n                }\n            });\n        }\n        if (message.hasOwnProperty('volume')) {\n            document.querySelectorAll('.volume_indicator[data-peerid=\"' + peerid + '\"]').forEach(indicator => {\n                indicator.querySelector('.low').style.opacity = message.volume.low;\n                indicator.querySelector('.mid').style.opacity = message.volume.mid;\n                indicator.querySelector('.high').style.opacity = message.volume.high;\n                indicator.setAttribute('data-volume', message.volume.smooth);\n            });\n        }\n        this.peerAudioPlayer(peerid);\n    }\n\n    /**\n     * Adjust visiblity when state changes\n     *\n     * @param {int} peerid Peer id\n     */\n    handleStateChange(peerid) {\n        const pc = this.peerConnections[String(peerid)];\n        document.querySelectorAll('#deft_audio div[data-peerid=\"' + peerid + '\"]').forEach(userinfo => {\n            switch (pc.connectionState) {\n                case 'connected':\n                    userinfo.classList.remove('hidden');\n                    break;\n                case 'closed':\n                    userinfo.remove();\n                    break;\n                case 'disconnected':\n                    userinfo.classList.add('hidden');\n                    break;\n            }\n        });\n    }\n\n    /**\n     * Shut down gracefully before closing\n     *\n     * @param {Event} e Button click\n     */\n    closeConnections(e) {\n        if (e && e.type == 'click') {\n            const button = e.target.closest('[data-region=\"deft-venue\"] a[data-action=\"close\"]');\n            if (button) {\n                e.stopPropagation();\n                e.preventDefault();\n            } else {\n                return;\n            }\n        }\n        document.querySelectorAll('[data-region=\"deft-venue\"] a[data-action=\"close\"] i').forEach(button => {\n            button.classList.add('bg-danger');\n        });\n        document.querySelector('body').classList.remove('block_deft_raisehand');\n        Ajax.call([{\n            args: {\n                mute: false,\n                \"status\": true\n            },\n            fail: Notification.exception,\n            methodname: 'block_deft_venue_settings'\n        }]);\n\n        // Release microphone.\n        clearInterval(this.meterId);\n        this.audioInput.then(audioStream => {\n            if (audioStream) {\n                audioStream.getAudioTracks().forEach(track => {\n                    track.stop();\n                });\n            }\n            return true;\n        }).catch(Notification.exception);\n\n        // Close connections.\n        Object.values(this.peerConnections).forEach(pc => {\n            pc.close();\n        });\n\n        document.querySelectorAll('.deft-venue [data-peerid=\"' + this.peerid + '\"]').forEach(venue => {\n            const event = new Event('venueclosed');\n            venue.dispatchEvent(event);\n        });\n\n        window.beforeunload = null;\n    }\n\n    /**\n     * Handle click for mute\n     *\n     * @param {Event} e Button click\n     */\n    handleMuteButtons(e) {\n        const button = e.target.closest(\n            'a[data-action=\"mute\"], a[data-action=\"unmute\"]'\n        );\n        if (button) {\n            const action = button.getAttribute('data-action'),\n                peerid = button.closest('[data-peerid]').getAttribute('data-peerid');\n            e.stopPropagation();\n            e.preventDefault();\n            if (!button.closest('#deft_audio')) {\n                this.audioInput.then(audioStream => {\n                    if (audioStream) {\n                        Ajax.call([{\n                            args: {\n                                mute: action == 'mute',\n                                \"status\": false\n                            },\n                                fail: Notification.exception,\n                            methodname: 'block_deft_venue_settings'\n                        }]);\n                    } else if (action == 'unmute') {\n                        this.audioInput = navigator.mediaDevices.getUserMedia({\n                            audio: {\n                                autoGainControl: this.autogaincontrol,\n                                echoCancellation: this.echocancellation,\n                                noiseSuppression: this.noisesuppression,\n                                sampleRate: this.samplerate\n                            },\n                            video: false\n                        }).then(audioStream => {\n\n                            Ajax.call([{\n                                args: {\n                                    mute: false,\n                                    \"status\": false\n                                },\n                                fail: Notification.exception,\n                                methodname: 'block_deft_venue_settings'\n                            }]);\n\n                            this.monitorVolume(audioStream);\n\n                            return audioStream;\n                        }).catch(Log.debug);\n                    }\n\n                    return audioStream;\n                }).catch(Notification.exception);\n            } else {\n                Ajax.call([{\n                    args: {\n                        mute: true,\n                        peerid: peerid,\n                        \"status\": false\n                    },\n                        fail: Notification.exception,\n                    methodname: 'block_deft_venue_settings'\n                }]);\n            }\n            button.closest('[data-peerid]').querySelectorAll('[data-action=\"mute\"], [data-action=\"unmute\"]').forEach(option => {\n                if (option.getAttribute('data-action') == action) {\n                    option.classList.add('hidden');\n                } else {\n                    option.classList.remove('hidden');\n                }\n            });\n        }\n    }\n\n    /**\n     * Handle hand raise buttons\n     *\n     * @param {Event} e Click event\n     */\n    handleRaiseHand(e) {\n        const button = e.target.closest(\n            '[data-action=\"raisehand\"], [data-action=\"lowerhand\"]'\n        );\n        if (button && !button.closest('#deft_audio')) {\n            const action = button.getAttribute('data-action');\n            e.stopPropagation();\n            e.preventDefault();\n            if (action == 'raisehand') {\n                document.querySelector('body').classList.add('block_deft_raisehand');\n            } else {\n                document.querySelector('body').classList.remove('block_deft_raisehand');\n            }\n            document.querySelectorAll('a[data-action=\"raisehand\"], a[data-action=\"lowerhand\"]').forEach(button => {\n                if (button.getAttribute('data-action') == action) {\n                    button.classList.add('hidden');\n                } else {\n                    button.classList.remove('hidden');\n                }\n            });\n            Ajax.call([{\n                args: {\n                    \"status\": action == 'raisehand'\n                },\n                    fail: Notification.exception,\n                methodname: 'block_deft_raise_hand'\n            }]);\n            this.dataChannels.forEach(dataChannel => {\n                if (dataChannel.readyState != 'open') {\n                    return;\n                }\n                if (action == 'raisehand') {\n                    dataChannel.send('{\"raisehand\": true}');\n                } else {\n                    dataChannel.send('{\"raisehand\": false}');\n                }\n            });\n        }\n    }\n\n    /**\n     * Process audio to provide visual feedback\n     *\n     * @param {MediaStream} audioStream Audio from user's microphone\n     * @returns {MediaStream}\n     */\n    monitorVolume(audioStream) {\n        if (audioStream) {\n            const audioContext = new AudioContext(),\n                source = audioContext.createMediaStreamSource(audioStream),\n                analyser = new AnalyserNode(audioContext, {\n                    maxDecibels: -50,\n                    minDecibels: -90,\n                    fftSize: 2048,\n                    smoothingTimeConstant: 0.3\n                }),\n                smoothanalyser = new AnalyserNode(audioContext, {\n                    maxDecibels: -50,\n                    minDecibels: -90,\n                    fftSize: 2048,\n                    smoothingTimeConstant: 0.6\n                }),\n                bufferLength = analyser.frequencyBinCount,\n                data = new Uint8Array(bufferLength),\n                smootheddata = new Uint8Array(bufferLength);\n            source.connect(analyser);\n            source.connect(smoothanalyser);\n            clearInterval(this.meterId);\n            this.meterId = setInterval(() => {\n                analyser.getByteFrequencyData(data);\n                smoothanalyser.getByteFrequencyData(smootheddata);\n                const volume = {\n                    low: Math.min(1, data.slice(0, 16).reduce((a, b) => a + b, 0) / 2000),\n                    mid: Math.min(1, data.slice(17, 31).reduce((a, b) => a + b, 0) / 1000),\n                    high: Math.min(1, data.slice(32).reduce((a, b) => a + b, 0) / 4000),\n                    smooth: Math.min(1, smootheddata.slice(0, 16).reduce((a, b) => a + b, 0) / 2000)\n                        + Math.min(1, smootheddata.slice(17, 31).reduce((a, b) => a + b, 0) / 1000)\n                        + Math.min(1, smootheddata.slice(32).reduce((a, b) => a + b, 0) / 4000)\n                },\n                    message = JSON.stringify({volume: volume}),\n                    peers = [];\n                document.querySelectorAll('.volume_indicator[data-peerid=\"' + this.peerid + '\"]').forEach(indicator => {\n                    indicator.querySelectorAll('.low').forEach(low => {\n                        low.style.opacity = volume.low;\n                    });\n                    indicator.querySelectorAll('.mid').forEach(mid => {\n                        mid.style.opacity = volume.mid;\n                    });\n                    indicator.querySelectorAll('.high').forEach(high => {\n                        high.style.opacity = volume.high;\n                    });\n                });\n                this.dataChannels.forEach(dataChannel => {\n                    if (dataChannel.readyState == 'open') {\n                        dataChannel.send(message);\n                    }\n                });\n                document.querySelectorAll('#deft_audio > div').forEach(peer => {\n                    peers.push(peer);\n                });\n                peers.sort((a, b) => {\n                    let volume = 0;\n                    a.querySelectorAll('[data-volume]').forEach(indicator => {\n                        volume += -Number(indicator.getAttribute('data-volume'));\n                    });\n                    b.querySelectorAll('[data-volume]').forEach(indicator => {\n                        volume += Number(indicator.getAttribute('data-volume'));\n                    });\n                    return volume;\n                });\n                peers.forEach(peer => {\n                    document.querySelector('#deft_audio').appendChild(peer);\n                });\n            }, 500);\n        }\n\n        return audioStream;\n    }\n\n    /**\n     * Return audio player for peer\n     *\n     * @param {int} peerid Peer id\n     * @returns {Promise} Resolve to audio player node\n     */\n    peerAudioPlayer(peerid) {\n        const usernode = document.querySelector('#deft_audio div[data-peerid=\"' + peerid + '\"] audio');\n        if (usernode) {\n            return Promise.resolve(usernode);\n        } else {\n            const node = document.createElement('div');\n            node.setAttribute('data-peerid', peerid);\n            if (document.querySelector('body#page-blocks-deft-venue')) {\n                node.setAttribute('class', 'col col-12 col-sm-6 col-md-4 col-lg-3 p-2');\n            } else {\n                node.setAttribute('class', 'col col-12 col-sm-6 col-md-4 p-2');\n            }\n            window.setTimeout(() => {\n                node.querySelectorAll('img.card-img-top').forEach(image => {\n                    image.setAttribute('height', null);\n                    image.setAttribute('width', null);\n                });\n            });\n            return Fragment.loadFragment(\n                'block_deft',\n                'venue',\n                this.contextid,\n                {\n                    peerid: peerid\n                }\n            ).done((userinfo) => {\n                if (!document.querySelector('#deft_audio div[data-peerid=\"' + peerid + '\"] audio')) {\n                    document.querySelector('#deft_audio').appendChild(node);\n                    node.innerHTML = userinfo;\n                }\n            }).then(() => {\n                return document.querySelector('#deft_audio div[data-peerid=\"' + peerid + '\"] audio');\n            }).catch(Notification.exception);\n        }\n    }\n}\n"],"names":["constructor","contextid","token","peers","peerid","iceServers","autogaincontrol","echocancellation","noisesuppression","samplerate","lastSignal","lastUpdate","dataChannels","peerConnections","queueout","ignoreOffer","Set","makingOffer","window","RTCPeerConnection","document","querySelectorAll","forEach","venue","e","Event","bubbles","dispatchEvent","alert","then","notice","getRoot","on","ModalEvents","cancel","Ajax","call","args","mute","fail","Notification","exception","methodname","status","close","audioInput","navigator","mediaDevices","getUserMedia","audio","autoGainControl","echoCancellation","noiseSuppression","sampleRate","video","catch","debug","this","monitorVolume","bind","Log","querySelector","removeEventListener","handleMuteButtons","addEventListener","pc","dataChannel","createDataChannel","push","delete","String","onmessage","handleMessage","onnegotiationneeded","negotiate","onicecandidate","handleICECandidate","ontrack","handleTrackEvent","onconnectionstatechange","handleStateChange","oniceconnectionstatechange","iceConnectionState","restartIce","handleRaiseHand","closeConnections","onbeforeunload","socket","Socket","subscribe","sendSignals","candidate","sendSignal","type","message","JSON","stringify","throttled","onLine","time","Date","now","setTimeout","messages","length","shift","lastsignal","done","response","settings","peer","id","Number","clearInterval","meterId","audioStream","getAudioTracks","track","stop","Object","values","disconnect","button","getAttribute","classList","add","remove","includes","signal","processSignal","key","keys","setLocalDescription","localDescription","finally","frompeer","description","parse","polite","ondatachannel","peerAudioPlayer","channel","onopen","send","has","signalingState","setRemoteDescription","getTransceivers","addTransceiver","streams","currentRemoteDescription","addIceCandidate","player","srcObject","state","enabled","data","hasOwnProperty","raisehand","indicator","style","opacity","volume","low","mid","high","setAttribute","smooth","userinfo","connectionState","target","closest","stopPropagation","preventDefault","event","beforeunload","action","option","readyState","audioContext","AudioContext","source","createMediaStreamSource","analyser","AnalyserNode","maxDecibels","minDecibels","fftSize","smoothingTimeConstant","smoothanalyser","bufferLength","frequencyBinCount","Uint8Array","smootheddata","connect","setInterval","getByteFrequencyData","Math","min","slice","reduce","a","b","sort","appendChild","usernode","Promise","resolve","node","createElement","image","Fragment","loadFragment","innerHTML"],"mappings":"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"}