{"version":3,"file":"venue_manager.min.js","sources":["../src/venue_manager.js"],"sourcesContent":["/*\n * Manage venue connections\n *\n * @package    block_deft\n * @module     block_deft/venue_manager\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport Fragment from 'core/fragment';\nimport Notification from \"core/notification\";\nimport Log from \"core/log\";\nimport Socket from \"block_deft/socket\";\n\nexport default class {\n\n    /**\n     * Listen for comment actions\n     *\n     * @param {int} contextid Context id of block\n     * @param {string} token Authentication token\n     * @param {array} peers\n     * @param {int} peerid My peer id\n     * @param {array} iceServers ICE server array to configure peers\n     */\n    constructor (contextid, token, peers, peerid, iceServers) {\n        this.contextid = contextid;\n        this.peerid = peerid;\n        this.iceServers = iceServers;\n        this.lastSignal = 0;\n        this.lastUpdate = 0;\n        this.dataChannels = [];\n        this.peerConnections = [];\n        this.queueout = [];\n\n        this.audioInput = navigator.mediaDevices.getUserMedia({\n            audio: {\n                autoGainControl: true,\n                echoCancellation: true,\n                noiseSuppression: true,\n                sampleRate: 8000\n            },\n            video: false\n        });\n        document.querySelector('body').addEventListener('click', e => {\n            const button = e.target.closest('a[data-action=\"mute\"], a[data-action=\"unmute\"]');\n            if (button) {\n                const action = button.getAttribute('data-action');\n                    peerid = button.closest('[data-peerid]').getAttribute('data-peerid');\n                e.stopPropagation();\n                e.preventDefault();\n                if (peerid == this.peerid) {\n                    Ajax.call([{\n                        args: {\n                            mute: action == 'mute',\n                            \"status\": false\n                        },\n                            fail: Notification.exception,\n                        methodname: 'block_deft_venue_settings'\n                    }]);\n                } else {\n                    Ajax.call([{\n                        args: {\n                            mute: true,\n                            peerid: peerid,\n                            \"status\": false\n                        },\n                            fail: Notification.exception,\n                        methodname: 'block_deft_venue_settings'\n                    }]);\n                }\n                button.closest('[data-peerid]').querySelectorAll('[data-action=\"mute\"], [data-action=\"unmute\"]').forEach(option => {\n                    if (option.getAttribute('data-action') == action) {\n                        option.classList.add('hidden');\n                    } else {\n                        option.classList.remove('hidden');\n                    }\n                });\n            }\n        });\n        peers.forEach(peerid => {\n            const pc = new RTCPeerConnection({\n                 iceServers: iceServers\n            }),\n                dataChannel = pc.createDataChannel('Events');\n            this.dataChannels.push(dataChannel);\n            dataChannel.onmessage = this.handleMessage.bind(this, peerid);\n            pc.onnegotiationneeded = this.negotiate.bind(this, contextid, pc, peerid);\n            pc.onicecandidate = this.handleICECandidate.bind(this, contextid, peerid);\n            pc.ontrack = this.handleTrackEvent.bind(this, peerid);\n            pc.onconnectionstatechange = this.handleStateChange.bind(this, peerid);\n            this.peerConnections[peerid] = pc;\n        });\n\n        document.querySelectorAll('a[data-action=\"raisehand\"], a[data-action=\"lowerhand\"]').forEach(button => {\n            button.addEventListener('click', (e) => {\n                const action = button.getAttribute('data-action');\n                e.stopPropagation();\n                e.preventDefault();\n                document.querySelectorAll('a[data-action=\"raisehand\"], a[data-action=\"lowerhand\"]').forEach(button => {\n                    if (button.getAttribute('data-action') == action) {\n                        button.classList.add('hidden');\n                    } else {\n                        button.classList.remove('hidden');\n                    }\n                });\n                Ajax.call([{\n                    args: {\n                        \"status\": action == 'raisehand'\n                    },\n                        fail: Notification.exception,\n                    methodname: 'block_deft_raise_hand'\n                }]);\n                this.dataChannels.forEach(dataChannel => {\n                    if (dataChannel.readyState != 'open') {\n                        return;\n                    }\n                    if (action == 'raisehand') {\n                        dataChannel.send('{\"raisehand\": true}');\n                    } else {\n                        dataChannel.send('{\"raisehand\": false}');\n                    }\n                });\n            });\n        });\n\n        document.querySelectorAll('a[data-action=\"close\"]').forEach(button => {\n            button.addEventListener('click', e => {\n                e.stopPropagation();\n                e.preventDefault();\n                button.firstChild.classList.add('bg-warning');\n                this.closeConnections();\n            });\n        });\n        window.onbeforeunload = this.closeConnections.bind(this);\n\n        let socket = new Socket(contextid, token);\n        socket.subscribe(() => {\n            this.sendSignals();\n        });\n    }\n\n    /**\n     * Handle ICE candidate event\n     *\n     * @param {int} contextid Block context id\n     * @param {int} peerid Recipient id\n     * @param {event} e ICE candidate event\n     */\n    handleICECandidate(contextid, peerid, e) {\n        if (e.candidate) {\n            this.sendSignal(peerid, 'new-ice-candidate', e.candidate);\n        }\n    }\n\n    /**\n     * Queue signal to peer\n     *\n     * @param {int} peerid Id of recipient\n     * @param {string} type Signal type\n     * @param {object} message Signal content\n     */\n    sendSignal(peerid, type, message) {\n        this.queueout.push({\n            message: JSON.stringify(message),\n            peerid: peerid,\n            type: type\n        });\n        this.sendSignals();\n    }\n\n    /**\n     * Transfer signals with signal server\n     */\n    sendSignals() {\n\n        if (this.throttled || !navigator.onLine) {\n            return;\n        }\n\n        const time = Date.now();\n        if (this.lastUpdate + 200 > time) {\n            this.throttled = true;\n            setTimeout(() => {\n                this.throttled = false;\n            }, this.lastUpdate + 250 - time);\n            this.sendSignals();\n            return;\n        }\n        this.lastUpdate = time;\n\n        const messages = [];\n        while (this.queueout.length) {\n            messages.push(this.queueout.shift());\n        }\n\n        Ajax.call([{\n            args: {\n                contextid: this.contextid,\n                lastsignal: this.lastSignal,\n                messages: messages\n            },\n            contextid: this.contextid,\n            done: response => {\n                if (response.peerid != this.peerid) {\n                    return;\n                }\n                response.settings.forEach(peer => {\n                    if (peer.id == Number(this.peerid)) {\n                        if (peer.status) {\n                            // Release microphone.\n                            this.audioInput.then(audioStream => {\n                                audioStream.getAudioTracks().forEach(track => {\n                                   track.stop();\n                                });\n                                return true;\n                            }).catch(Notification.exception);\n\n                            // Close connections.\n                            this.peerConnections.forEach(pc => {\n                                pc.close();\n                            });\n\n                            document.querySelectorAll(\n                                '[data-region=\"deft-venue\"] [data-peerid=\"' + this.peerid + '\"]'\n                            ).forEach(venue => {\n                                const e = new Event('venueclosed', {bubbles: true});\n                                venue.dispatchEvent(e);\n                            });\n\n                            window.close();\n                            return;\n                        }\n                        this.mute(peer.mute);\n                    }\n                    document.querySelectorAll(\n                        '[data-peerid=\"' + peer.id + '\"] [data-action=\"mute\"], [data-peerid=\"' + peer.id\n                            + '\"] [data-action=\"unmute\"]'\n                    ).forEach(button => {\n                        if (peer.mute == (button.getAttribute('data-action') == 'mute')) {\n                            button.classList.add('hidden');\n                        } else {\n                            button.classList.remove('hidden');\n                        }\n                    });\n                });\n                response.messages.forEach((signal) => {\n                    if (signal.id > this.lastSignal) {\n                        this.lastSignal = signal.id;\n                        this.processSignal(signal);\n                    }\n                });\n\n                for (const key in this.peerConnections.keys()) {\n                    if (!response.peers.includes(key)) {\n                        const pc = this.peerConnections[key];\n                        pc.close();\n                    }\n                }\n            },\n            fail: Notification.exception,\n            methodname: 'block_deft_send_signal'\n        }]);\n    }\n\n    /**\n     * Handle negtiation needed event\n     *\n     * @param {int} contextid Block conntextid\n     * @param {RTCPeerConnection} pc Connection\n     * @param {int} peerid Id of peer\n     * @return {Promise}\n     */\n    negotiate(contextid, pc, peerid) {\n        return pc.createOffer().then(offer => {\n            return pc.setLocalDescription(offer).then(() => {\n                return this.sendSignal(peerid, 'audio-offer', offer);\n            }).catch(Log.debug);\n        });\n    }\n\n    /**\n     * Process a signal\n     *\n     * @param {object} signal Signal received to process\n     */\n    processSignal(signal) {\n        if (signal.type === 'audio-offer') {\n            const pc = this.peerConnections[signal.frompeer] || new RTCPeerConnection({\n                 iceServers: this.iceServers\n            });\n            if (!this.peerConnections[signal.frompeer]) {\n                this.peerConnections[signal.frompeer] = pc;\n            }\n            Log.debug('Received offer');\n            pc.onnegotiationneeded = this.negotiate.bind(this, this.contextid, pc, signal.frompeer);\n            pc.onicecandidate = this.handleICECandidate.bind(this, this.contextid, signal.frompeer);\n            pc.ontrack = this.handleTrackEvent.bind(this, signal.frompeer);\n            pc.onconnectionstatechange = this.handleStateChange.bind(this, signal.frompeer);\n            pc.ondatachannel = (e) => {\n                this.dataChannels.push(e.channel);\n                e.channel.onmessage = this.handleMessage.bind(this, signal.frompeer);\n                e.channel.onopen = () => {\n                    if (document.querySelector('[data-peerid=\"' + this.peerid + '\"] a.hidden[data-action=\"raisehand\"]')) {\n                        window.setTimeout(() => {\n                            e.channel.send('{\"raisehand\": true}');\n                        }, 3000);\n                    }\n                };\n            };\n            pc.setRemoteDescription(JSON.parse(signal.message)).then(() => {\n                Log.debug('Set Remote');\n                return this.audioInput.then(audioStream => {\n                    Log.debug('audio stream');\n                    if (pc.getTransceivers().length < 2) {\n                        audioStream.getAudioTracks().forEach(track => {\n                            pc.addTransceiver(track, {streams: [audioStream]});\n                        });\n                    }\n                    Log.debug('Create answer');\n                    return pc.createAnswer().then(answer => {\n                        Log.debug('Answer created');\n                        if (!pc || pc.signalingState == 'stable') {\n                            return false;\n                        }\n                        return pc.setLocalDescription(answer).then(() => {\n                            Log.debug('Set local');\n                            return this.sendSignal(signal.frompeer, 'audio-answer', answer);\n                        }).catch(Log.debug);\n                    }).catch(Notification.exception);\n                }).catch(Notification.exception);\n            }).catch(Log.debug);\n        } else if (signal.type === 'audio-answer') {\n            const pc = this.peerConnections[signal.frompeer];\n            Log.debug('Audio answer');\n            if (pc && pc.signalingState == 'have-local-offer') {\n                pc.setRemoteDescription(JSON.parse(signal.message));\n            }\n        } else if (signal.type === 'new-ice-candidate') {\n            const pc = this.peerConnections[signal.frompeer] || null;\n            if (pc && pc.currentRemoteDescription) {\n                pc.addIceCandidate(JSON.parse(signal.message));\n            }\n        }\n    }\n\n    /**\n     * Handle track event\n     *\n     * @param {int} peerid Id of peer\n     * @param {event} e Track event\n     */\n    handleTrackEvent(peerid, e) {\n        if (\n            !e || !e.streams || !document.querySelector('#deft_audio')\n            || document.querySelector('#deft_audio div[data-peerid=\"' + peerid + '\"]')\n        ) {\n            return;\n        }\n        Log.debug('Track');\n        Log.debug(e);\n\n        const node = document.createElement('div');\n        node.setAttribute('data-peerid', peerid);\n        node.setAttribute('class', 'col col-12 col-md-6 col-lg-4 col-xl-3 m-2');\n        window.setTimeout(() => {\n            node.querySelectorAll('img.card-img-top').forEach(image => {\n                image.setAttribute('height', null);\n                image.setAttribute('width', null);\n            });\n        });\n        document.querySelector('#deft_audio').appendChild(node);\n        Fragment.loadFragment(\n            'block_deft',\n            'venue',\n            this.contextid,\n            {\n                peerid: peerid\n            }\n        ).done((userinfo) => {\n            node.innerHTML = userinfo;\n            const player = node.querySelector('audio');\n            player.srcObject = e.streams[0];\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Change mute status\n     *\n     * @param {bool} state State to be set\n     */\n    mute(state) {\n        this.audioInput.then(audioStream => {\n            audioStream.getAudioTracks().forEach(track => {\n                if (track.enabled == state) {\n                    track.enabled = !state;\n                }\n            });\n            return true;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Raise or lower peers hand\n     *\n     * @param {int} peerid Peer id\n     * @param {event} e Message event\n     */\n    handleMessage(peerid, e) {\n        const message = JSON.parse(e.data);\n        document.querySelectorAll('[data-peerid=\"' + peerid + '\"] [data-action=\"raisehand\"]').forEach(button => {\n            if (message.raisehand) {\n                button.classList.add('hidden');\n            } else {\n                button.classList.remove('hidden');\n            }\n        });\n        document.querySelectorAll('[data-peerid=\"' + peerid + '\"] [data-action=\"lowerhand\"]').forEach(button => {\n            if (message.raisehand) {\n                button.classList.remove('hidden');\n            } else {\n                button.classList.add('hidden');\n            }\n        });\n    }\n\n    /**\n     * Adjust visiblity when state changes\n     *\n     * @param {int} peerid Peer id\n     */\n    handleStateChange(peerid) {\n        const pc = this.peerConnections[peerid];\n        document.querySelectorAll('#deft_audio div[data-peerid=\"' + peerid + '\"]').forEach(userinfo => {\n            switch (pc.connectionState) {\n                case 'connected':\n                    userinfo.classList.remove('hidden');\n                    break;\n                case 'close':\n                case 'failed':\n                    userinfo.remove();\n                    break;\n                case 'disconnected':\n                    userinfo.classList.add('hidden');\n                    break;\n            }\n        });\n    }\n\n    /**\n     * Shut down gracefully before closing\n     */\n    closeConnections() {\n        Ajax.call([{\n            args: {\n                mute: false,\n                \"status\": true\n            },\n            fail: Notification.exception,\n            methodname: 'block_deft_venue_settings'\n        }]);\n\n        // Release microphone.\n        this.audioInput.then(audioStream => {\n            audioStream.getAudioTracks().forEach(track => {\n               track.stop();\n            });\n            return true;\n        }).catch(Notification.exception);\n\n        // Close connections.\n        this.peerConnections.forEach(pc => {\n            pc.close();\n        });\n\n        document.querySelectorAll('.deft-venue [data-peerid=\"' + this.peerid + '\"]').forEach(venue => {\n            const event = new Event('venueclosed');\n            venue.despatchEvent(event);\n        });\n\n        window.beforeunload = null;\n    }\n}\n"],"names":["constructor","contextid","token","peers","peerid","iceServers","lastSignal","lastUpdate","dataChannels","peerConnections","queueout","audioInput","navigator","mediaDevices","getUserMedia","audio","autoGainControl","echoCancellation","noiseSuppression","sampleRate","video","document","querySelector","addEventListener","e","button","target","closest","action","getAttribute","stopPropagation","preventDefault","this","call","args","mute","fail","Notification","exception","methodname","querySelectorAll","forEach","option","classList","add","remove","pc","RTCPeerConnection","dataChannel","createDataChannel","push","onmessage","handleMessage","bind","onnegotiationneeded","negotiate","onicecandidate","handleICECandidate","ontrack","handleTrackEvent","onconnectionstatechange","handleStateChange","readyState","send","firstChild","closeConnections","window","onbeforeunload","Socket","subscribe","sendSignals","candidate","sendSignal","type","message","JSON","stringify","throttled","onLine","time","Date","now","setTimeout","messages","length","shift","lastsignal","done","response","settings","peer","id","Number","status","then","audioStream","getAudioTracks","track","stop","catch","close","venue","Event","bubbles","dispatchEvent","signal","processSignal","key","keys","includes","createOffer","offer","setLocalDescription","Log","debug","frompeer","ondatachannel","channel","onopen","setRemoteDescription","parse","getTransceivers","addTransceiver","streams","createAnswer","answer","signalingState","currentRemoteDescription","addIceCandidate","node","createElement","setAttribute","image","appendChild","loadFragment","userinfo","innerHTML","srcObject","state","enabled","data","raisehand","connectionState","event","despatchEvent","beforeunload"],"mappings":"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"}