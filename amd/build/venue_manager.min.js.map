{"version":3,"file":"venue_manager.min.js","sources":["../src/venue_manager.js"],"sourcesContent":["/*\n * Manage venue connections\n *\n * @package    block_deft\n * @module     block_deft/venue_manager\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport Fragment from 'core/fragment';\nimport Notification from \"core/notification\";\nimport Log from \"core/log\";\nimport Socket from \"block_deft/socket\";\n\nexport default {\n\n    lastSignal: 0,\n\n    lastUpdate: 0,\n\n    dataChannels: [],\n\n    peerConnections: [],\n\n    queue: [],\n\n    queueout: [],\n\n    /**\n     * Listen for comment actions\n     *\n     * @param {int} contextid Context id of block\n     * @param {string} token Authentication token\n     * @param {array} peers\n     * @param {int} peerid My peer id\n     * @param {array} iceServers ICE server array to configure peers\n     */\n    init: function(contextid, token, peers, peerid, iceServers) {\n        this.contextid = contextid;\n        this.peerid = peerid;\n        this.iceServers = iceServers;\n\n        this.audioInput = navigator.mediaDevices.getUserMedia({\n            audio: {\n                autoGainControl: true,\n                echoCancellation: true,\n                noiseSuppression: true,\n                sampleRate: 8000\n            },\n            video: false\n        });\n        document.querySelector('body').addEventListener('click', e => {\n            const button = e.target.closest('a[data-action=\"mute\"], a[data-action=\"unmute\"]');\n            if (button) {\n                const action = button.getAttribute('data-action');\n                    peerid = button.closest('[data-peerid]').getAttribute('data-peerid');\n                e.stopPropagation();\n                e.preventDefault();\n                if (peerid == this.peerid) {\n                    this.mute(action == 'mute');\n                    Ajax.call([{\n                        args: {\n                            mute: action == 'mute',\n                            \"status\": false\n                        },\n                            fail: Notification.exception,\n                        methodname: 'block_deft_venue_settings'\n                    }]);\n                } else {\n                    Ajax.call([{\n                        args: {\n                            mute: true,\n                            peerid: peerid,\n                            \"status\": false\n                        },\n                            fail: Notification.exception,\n                        methodname: 'block_deft_venue_settings'\n                    }]);\n                }\n                button.closest('[data-peerid]').querySelectorAll('[data-action=\"mute\"], [data-action=\"unmute\"]').forEach(option => {\n                    if (option.getAttribute('data-action') == action) {\n                        option.classList.add('hidden');\n                    } else {\n                        option.classList.remove('hidden');\n                    }\n                });\n            }\n        });\n        peers.forEach(peerid => {\n            const pc = new RTCPeerConnection({\n                 iceServers: iceServers\n            }),\n                dataChannel = pc.createDataChannel('Events');\n            this.dataChannels.push(dataChannel);\n            dataChannel.onmessage = this.handleMessage.bind(this, peerid);\n            pc.onnegotiationneeded = this.negotiate.bind(this, contextid, pc, peerid);\n            pc.onicecandidate = this.handleICECandidate.bind(this, contextid, peerid);\n            pc.ontrack = this.handleTrackEvent.bind(this, peerid);\n            pc.onconnectionstatechange = this.handleStateChange.bind(this, peerid);\n            this.peerConnections[peerid] = pc;\n        });\n\n        document.querySelectorAll('a[data-action=\"raisehand\"], a[data-action=\"lowerhand\"]').forEach(button => {\n            button.addEventListener('click', (e) => {\n                const action = button.getAttribute('data-action');\n                e.stopPropagation();\n                e.preventDefault();\n                document.querySelectorAll('a[data-action=\"raisehand\"], a[data-action=\"lowerhand\"]').forEach(button => {\n                    if (button.getAttribute('data-action') == action) {\n                        button.classList.add('hidden');\n                    } else {\n                        button.classList.remove('hidden');\n                    }\n                });\n                Ajax.call([{\n                    args: {\n                        \"status\": action == 'raisehand'\n                    },\n                        fail: Notification.exception,\n                    methodname: 'block_deft_raise_hand'\n                }]);\n                this.dataChannels.forEach(dataChannel => {\n                    if (dataChannel.readyState != 'open') {\n                        return;\n                    }\n                    if (action == 'raisehand') {\n                        dataChannel.send('{\"raisehand\": true}');\n                    } else {\n                        dataChannel.send('{\"raisehand\": false}');\n                    }\n                });\n            });\n        });\n\n        document.querySelectorAll('a[data-action=\"close\"]').forEach(button => {\n            button.addEventListener('click', e => {\n                e.stopPropagation();\n                e.preventDefault();\n                button.firstChild.classList.add('bg-warning');\n                this.closeConnections();\n            });\n        });\n        window.onbeforeunload = this.closeConnections.bind(this);\n\n        let socket = new Socket(contextid, token);\n        socket.subscribe(() => {\n            this.sendSignals();\n        });\n    },\n\n    /**\n     * Handle ICE candidate event\n     *\n     * @param {int} contextid Block context id\n     * @param {int} peerid Recipient id\n     * @param {event} e ICE candidate event\n     */\n    handleICECandidate: function(contextid, peerid, e) {\n        if (e.candidate) {\n            this.sendSignal(peerid, 'new-ice-candidate', e.candidate);\n        }\n    },\n\n    /**\n     * Queue signal to peer\n     *\n     * @param {int} peerid Id of recipient\n     * @param {string} type Signal type\n     * @param {object} message Signal content\n     */\n    sendSignal: function(peerid, type, message) {\n        this.queueout.push({\n            message: JSON.stringify(message),\n            peerid: peerid,\n            type: type\n        });\n        this.sendSignals();\n    },\n\n    /**\n     * Transfer signals with signal server\n     */\n    sendSignals: function() {\n\n        if (this.throttled || !navigator.onLine) {\n            return;\n        }\n\n        const time = Date.now();\n        if (this.lastUpdate + 200 > time) {\n            this.throttled = true;\n            setTimeout(() => {\n                this.throttled = false;\n            }, this.lastUpdate + 250 - time);\n            this.sendSignals();\n            return;\n        }\n        this.lastUpdate = time;\n\n        const messages = [];\n        while (this.queueout.length) {\n            messages.push(this.queueout.shift());\n        }\n\n        Ajax.call([{\n            args: {\n                contextid: this.contextid,\n                lastsignal: this.lastSignal,\n                messages: messages\n            },\n            contextid: this.contextid,\n            done: response => {\n                response.settings.forEach(peer => {\n                    if (peer.id == Number(this.peerid)) {\n                        if (peer.status) {\n                            window.close();\n                            return;\n                        }\n                        this.mute(peer.mute);\n                    }\n                    document.querySelectorAll(\n                        '[data-peerid=\"' + peer.id + '\"] [data-action=\"mute\"], [data-peerid=\"' + peer.id\n                            + '\"] [data-action=\"unmute\"]'\n                    ).forEach(button => {\n                        if (peer.mute == (button.getAttribute('data-action') == 'mute')) {\n                            button.classList.add('hidden');\n                        } else {\n                            button.classList.remove('hidden');\n                        }\n                    });\n                });\n                response.messages.forEach((signal) => {\n                    if (signal.id > this.lastSignal) {\n                        this.lastSignal = signal.id;\n                        this.processSignal(signal);\n                    }\n                });\n\n                for (const key in this.peerConnections.keys()) {\n                    if (!response.peers.includes(key)) {\n                        const pc = this.peerConnections[key];\n                        Log.debug('Close ' + key);\n                        pc.close();\n                        this.peerConnections[key] = null;\n                    }\n                }\n            },\n            fail: Notification.exception,\n            methodname: 'block_deft_send_signal'\n        }]);\n    },\n\n    /**\n     * Handle negtiation needed event\n     *\n     * @param {int} contextid Block conntextid\n     * @param {RTCPeerConnection} pc Connection\n     * @param {int} peerid Id of peer\n     * @return {Promise}\n     */\n    negotiate: function(contextid, pc, peerid) {\n        return pc.createOffer().then(offer => {\n            return pc.setLocalDescription(offer).then(() => {\n                return this.sendSignal(peerid, 'audio-offer', offer);\n            }).catch(Log.debug);\n        });\n    },\n\n    /**\n     * Recursively process queue\n     *\n     * @param {object} signal Signal received to process\n     */\n    processSignal: function(signal) {\n        if (signal.type === 'audio-offer') {\n            const pc = this.peerConnections[signal.frompeer] || new RTCPeerConnection({\n                 iceServers: this.iceServers\n            });\n            if (!this.peerConnections[signal.frompeer]) {\n                this.peerConnections[signal.frompeer] = pc;\n            }\n            Log.debug('Received offer');\n            pc.onnegotiationneeded = this.negotiate.bind(this, this.contextid, pc, signal.frompeer);\n            pc.onicecandidate = this.handleICECandidate.bind(this, this.contextid, signal.frompeer);\n            pc.ontrack = this.handleTrackEvent.bind(this, signal.frompeer);\n            pc.onconnectionstatechange = this.handleStateChange.bind(this, signal.frompeer);\n            pc.ondatachannel = (e) => {\n                this.dataChannels.push(e.channel);\n                e.channel.onmessage = this.handleMessage.bind(this, signal.frompeer);\n                e.channel.onopen = () => {\n                    if (document.querySelector('[data-peerid=\"' + this.peerid + '\"] a.hidden[data-action=\"raisehand\"]')) {\n                        window.setTimeout(() => {\n                            e.channel.send('{\"raisehand\": true}');\n                        }, 3000);\n                    }\n                };\n            };\n            pc.setRemoteDescription(JSON.parse(signal.message)).then(() => {\n                Log.debug('Set Remote');\n                return this.audioInput.then(audioStream => {\n                    Log.debug('audio stream');\n                    if (pc.getTransceivers().length < 2) {\n                        audioStream.getAudioTracks().forEach(track => {\n                            pc.addTransceiver(track, {streams: [audioStream]});\n                        });\n                    }\n                    Log.debug('Create answer');\n                    return pc.createAnswer().then(answer => {\n                        Log.debug('Answer created');\n                        if (!pc || pc.signalingState == 'stable') {\n                            return false;\n                        }\n                        return pc.setLocalDescription(answer).then(() => {\n                            Log.debug('Set local');\n                            return this.sendSignal(signal.frompeer, 'audio-answer', answer);\n                        }).catch(Log.debug);\n                    }).catch(Notification.exception);\n                }).catch(Notification.exception);\n            }).catch(Log.debug);\n        } else if (signal.type === 'audio-answer') {\n            const pc = this.peerConnections[signal.frompeer];\n            Log.debug('Audio answer');\n            if (pc && pc.signalingState == 'have-local-offer') {\n                pc.setRemoteDescription(JSON.parse(signal.message));\n            }\n        } else if (signal.type === 'new-ice-candidate') {\n            const pc = this.peerConnections[signal.frompeer] || null;\n            if (pc && pc.currentRemoteDescription) {\n                pc.addIceCandidate(JSON.parse(signal.message));\n            }\n        }\n    },\n\n    /**\n     * Handle track event\n     *\n     * @param {int} peerid Id of peer\n     * @param {event} e Track event\n     */\n    handleTrackEvent: function(peerid, e) {\n        if (!e || !e.streams || document.querySelector('#deft_audio div[data-peerid=\"' + peerid + '\"]')) {\n            return;\n        }\n        Log.debug('Track');\n        Log.debug(e);\n\n        const node = document.createElement('div');\n        node.setAttribute('data-peerid', peerid);\n        node.setAttribute('class', 'col col-12 col-md-6 col-lg-4 col-xl-3 m-2');\n        window.setTimeout(() => {\n            node.querySelectorAll('img.card-img-top').forEach(image => {\n                image.setAttribute('height', null);\n                image.setAttribute('width', null);\n            });\n        });\n        document.querySelector('#deft_audio').appendChild(node);\n        Fragment.loadFragment(\n            'block_deft',\n            'venue',\n            this.contextid,\n            {\n                peerid: peerid\n            }\n        ).done((userinfo) => {\n            node.innerHTML = userinfo;\n            const player = node.querySelector('audio');\n            player.srcObject = e.streams[0];\n        }).catch(Notification.exception);\n    },\n\n    /**\n     * Change mute status\n     *\n     * @param {bool} state State to be set\n     */\n    mute: function(state) {\n        this.audioInput.then(audioStream => {\n            audioStream.getAudioTracks().forEach(track => {\n                if (track.enabled == state) {\n                    track.enabled = !state;\n                }\n            });\n            return true;\n        }).catch(Notification.exception);\n    },\n\n    /**\n     * Raise or lower peers hand\n     *\n     * @param {int} peerid Peer id\n     * @param {event} e Message event\n     */\n    handleMessage: function(peerid, e) {\n        const message = JSON.parse(e.data);\n        document.querySelectorAll('[data-peerid=\"' + peerid + '\"] [data-action=\"raisehand\"]').forEach(button => {\n            if (message.raisehand) {\n                button.classList.add('hidden');\n            } else {\n                button.classList.remove('hidden');\n            }\n        });\n        document.querySelectorAll('[data-peerid=\"' + peerid + '\"] [data-action=\"lowerhand\"]').forEach(button => {\n            if (message.raisehand) {\n                button.classList.remove('hidden');\n            } else {\n                button.classList.add('hidden');\n            }\n        });\n    },\n\n    /**\n     * Adjust visiblity when state changes\n     *\n     * @param {int} peerid Peer id\n     */\n    handleStateChange(peerid) {\n        const pc = this.peerConnections[peerid];\n        document.querySelectorAll('#deft_audio div[data-peerid=\"' + peerid + '\"]').forEach(userinfo => {\n            switch (pc.connectionState) {\n                case 'connected':\n                    userinfo.classList.remove('hidden');\n                    break;\n                case 'close':\n                case 'failed':\n                    userinfo.remove();\n                    break;\n                case 'disconnected':\n                    userinfo.classList.add('hidden');\n                    break;\n            }\n        });\n    },\n\n    /**\n     * Shut down gracefully before closing\n     */\n    closeConnections() {\n        Ajax.call([{\n            args: {\n                mute: false,\n                \"status\": true\n            },\n            fail: Notification.exception,\n            methodname: 'block_deft_venue_settings'\n        }]);\n        this.peerConnections.forEach(pc => {\n            pc.close();\n        });\n\n        // Release microphone.\n        this.audioInput.then(audioStream => {\n            audioStream.getAudioTracks().forEach(track => {\n               track.stop();\n            });\n            return true;\n        }).catch(Notification.exception);\n\n        window.beforeunload = null;\n    }\n};\n"],"names":["lastSignal","lastUpdate","dataChannels","peerConnections","queue","queueout","init","contextid","token","peers","peerid","iceServers","audioInput","navigator","mediaDevices","getUserMedia","audio","autoGainControl","echoCancellation","noiseSuppression","sampleRate","video","document","querySelector","addEventListener","e","button","target","closest","action","getAttribute","stopPropagation","preventDefault","this","mute","call","args","fail","Notification","exception","methodname","querySelectorAll","forEach","option","classList","add","remove","pc","RTCPeerConnection","dataChannel","createDataChannel","push","onmessage","handleMessage","bind","onnegotiationneeded","negotiate","onicecandidate","handleICECandidate","ontrack","handleTrackEvent","onconnectionstatechange","handleStateChange","readyState","send","firstChild","closeConnections","window","onbeforeunload","Socket","subscribe","sendSignals","candidate","sendSignal","type","message","JSON","stringify","throttled","onLine","time","Date","now","setTimeout","messages","length","shift","lastsignal","done","response","settings","peer","id","Number","status","close","signal","processSignal","key","keys","includes","debug","createOffer","then","offer","setLocalDescription","catch","Log","frompeer","ondatachannel","channel","onopen","setRemoteDescription","parse","audioStream","getTransceivers","getAudioTracks","track","addTransceiver","streams","createAnswer","answer","signalingState","currentRemoteDescription","addIceCandidate","node","createElement","setAttribute","image","appendChild","loadFragment","userinfo","innerHTML","srcObject","state","enabled","data","raisehand","connectionState","stop","beforeunload"],"mappings":"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"}