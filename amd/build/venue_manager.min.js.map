{"version":3,"file":"venue_manager.min.js","sources":["../src/venue_manager.js"],"sourcesContent":["/*\n * Manage venue connections\n *\n * @package    block_deft\n * @module     block_deft/venue_manager\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport Fragment from 'core/fragment';\nimport {get_string as getString} from 'core/str';\nimport ModalEvents from 'core/modal_events';\nimport Notification from \"core/notification\";\nimport Log from \"core/log\";\nimport Socket from \"block_deft/socket\";\nimport \"core/adapter\";\n\nexport default class {\n\n    /**\n     * Listen for comment actions\n     *\n     * @param {int} contextid Context id of block\n     * @param {string} token Authentication token\n     * @param {array} peers\n     * @param {int} peerid My peer id\n     * @param {array} iceServers ICE server array to configure peers\n     * @param {bool} autogaincontrol\n     * @param {bool} echocancellation\n     * @param {bool} noisesuppression\n     * @param {int} samplerate\n     */\n    constructor(contextid, token, peers, peerid, iceServers, autogaincontrol, echocancellation, noisesuppression, samplerate) {\n        this.contextid = contextid;\n        this.peerid = peerid;\n        this.iceServers = iceServers;\n        this.autogaincontrol = autogaincontrol;\n        this.echocancellation = echocancellation;\n        this.noisesuppression = noisesuppression;\n        this.samplerate = samplerate;\n        this.lastSignal = 0;\n        this.lastUpdate = 0;\n        this.dataChannels = [];\n        this.peerConnections = {};\n        this.queueout = [];\n\n        if (!window.RTCPeerConnection) {\n            document.querySelectorAll('.venue_manager').forEach((venue) => {\n                const e = new Event('venueclosed', {bubbles: true});\n                venue.dispatchEvent(e);\n            });\n            Notification.alert(\n                getString('unsupportedbrowser', 'block_deft'),\n                getString('unsupportedbrowsermessage', 'block_deft')\n            ).then(notice => {\n                const root = notice.getRoot();\n                root.on(ModalEvents.cancel, () => {\n                    return Ajax.call([{\n                        args: {\n                            mute: false,\n                            \"status\": true\n                        },\n                        fail: Notification.exception,\n                        methodname: 'block_deft_venue_settings'\n                    }])[0].then((status) => {\n                        window.close();\n                        return status;\n                    });\n                });\n\n                return notice;\n            }).fail(Notification.exception);\n\n            return;\n        }\n        this.audioInput = navigator.mediaDevices.getUserMedia({\n            audio: {\n                autoGainControl: autogaincontrol,\n                echoCancellation: echocancellation,\n                noiseSuppression: noisesuppression,\n                sampleRate: samplerate\n            },\n            video: false\n        }).catch((e) => {\n            Log.debug(e);\n\n            Ajax.call([{\n                args: {\n                    mute: true,\n                    \"status\": false\n                },\n                fail: Notification.exception,\n                methodname: 'block_deft_venue_settings'\n            }]);\n\n            return false;\n        });\n        this.audioInput.then(this.monitorVolume.bind(this)).catch(Log.debug);\n\n        document.querySelector('body').removeEventListener('click', this.handleMuteButtons.bind(this));\n        document.querySelector('body').addEventListener('click', this.handleMuteButtons.bind(this));\n\n        peers.forEach(peerid => {\n            const pc = new RTCPeerConnection({\n                 iceServers: iceServers\n            }),\n                dataChannel = pc.createDataChannel('Events');\n            this.dataChannels.push(dataChannel);\n            dataChannel.onmessage = this.handleMessage.bind(this, peerid);\n            pc.onnegotiationneeded = this.negotiate.bind(this, contextid, pc, peerid);\n            pc.onicecandidate = this.handleICECandidate.bind(this, contextid, peerid);\n            pc.ontrack = this.handleTrackEvent.bind(this, peerid);\n            pc.onconnectionstatechange = this.handleStateChange.bind(this, peerid);\n            this.peerConnections[String(peerid)] = pc;\n        });\n\n        document.querySelector('body').removeEventListener('click', this.handleRaiseHand.bind(this));\n        document.querySelector('body').addEventListener('click', this.handleRaiseHand.bind(this));\n\n        document.querySelector('body').removeEventListener('click', this.closeConnections.bind(this));\n        document.querySelector('body').addEventListener('click', this.closeConnections.bind(this));\n\n        window.onbeforeunload = this.closeConnections.bind(this);\n\n        this.socket = new Socket(contextid, token);\n        this.socket.subscribe(() => {\n            this.sendSignals();\n        });\n    }\n\n    /**\n     * Handle ICE candidate event\n     *\n     * @param {int} contextid Block context id\n     * @param {int} peerid Recipient id\n     * @param {event} e ICE candidate event\n     */\n    handleICECandidate(contextid, peerid, e) {\n        if (e.candidate) {\n            this.sendSignal(peerid, 'new-ice-candidate', e.candidate);\n        }\n    }\n\n    /**\n     * Queue signal to peer\n     *\n     * @param {int} peerid Id of recipient\n     * @param {string} type Signal type\n     * @param {object} message Signal content\n     */\n    sendSignal(peerid, type, message) {\n        this.queueout.push({\n            message: JSON.stringify(message),\n            peerid: peerid,\n            type: type\n        });\n        this.sendSignals();\n    }\n\n    /**\n     * Transfer signals with signal server\n     */\n    sendSignals() {\n\n        if (this.throttled || !navigator.onLine) {\n            return;\n        }\n\n        const time = Date.now();\n        if (this.lastUpdate + 200 > time) {\n            this.throttled = true;\n            setTimeout(() => {\n                this.throttled = false;\n            }, this.lastUpdate + 250 - time);\n            this.sendSignals();\n            return;\n        }\n        this.lastUpdate = time;\n\n        const messages = [];\n        while (this.queueout.length) {\n            messages.push(this.queueout.shift());\n        }\n\n        Ajax.call([{\n            args: {\n                contextid: this.contextid,\n                lastsignal: this.lastSignal,\n                messages: messages\n            },\n            contextid: this.contextid,\n            done: response => {\n                response.settings.forEach(peer => {\n                    if (peer.id == Number(this.peerid)) {\n                        if (peer.status) {\n                            // Release microphone.\n                            clearInterval(this.meterId);\n                            this.audioInput.then(audioStream => {\n                                if (audioStream) {\n                                    audioStream.getAudioTracks().forEach(track => {\n                                        track.stop();\n                                    });\n                                }\n                                return audioStream;\n                            }).catch(Notification.exception);\n\n                            // Close connections.\n                            Object.values(this.peerConnections).forEach(pc => {\n                                pc.close();\n                            });\n\n                            document.querySelectorAll(\n                                '[data-region=\"deft-venue\"] [data-peerid=\"' + this.peerid + '\"]'\n                            ).forEach(venue => {\n                                const e = new Event('venueclosed', {bubbles: true});\n                                venue.dispatchEvent(e);\n                            });\n\n                            this.socket.disconnect();\n\n                            window.close();\n                            return;\n                        }\n                        this.mute(peer.mute);\n                    }\n                    document.querySelectorAll(\n                        '[data-peerid=\"' + peer.id + '\"] [data-action=\"mute\"], [data-peerid=\"' + peer.id\n                            + '\"] [data-action=\"unmute\"]'\n                    ).forEach(button => {\n                        if (peer.mute == (button.getAttribute('data-action') == 'mute')) {\n                            button.classList.add('hidden');\n                        } else {\n                            button.classList.remove('hidden');\n                        }\n                    });\n                });\n                if (!response.peers.includes(Number(this.peerid))) {\n                    return;\n                }\n                response.messages.forEach((signal) => {\n                    if (signal.id > this.lastSignal) {\n                        this.lastSignal = signal.id;\n                        this.processSignal(signal);\n                    }\n                });\n\n                for (const key in Object.keys(this.peerConnections)) {\n                    if (!response.peers.includes(Number(key)) && this.peerConnections[key]) {\n                        const pc = this.peerConnections[key];\n                        pc.close();\n                    }\n                }\n            },\n            fail: Notification.exception,\n            methodname: 'block_deft_send_signal'\n        }]);\n    }\n\n    /**\n     * Handle negotiation needed event\n     *\n     * @param {int} contextid Block conntextid\n     * @param {RTCPeerConnection} pc Connection\n     * @param {int} peerid Id of peer\n     * @return {Promise}\n     */\n    negotiate(contextid, pc, peerid) {\n        return pc.createOffer().then(offer => {\n            return pc.setLocalDescription(offer).then(() => {\n                return this.sendSignal(peerid, 'audio-offer', offer);\n            }).catch(Log.debug);\n        });\n    }\n\n    /**\n     * Process a signal\n     *\n     * @param {object} signal Signal received to process\n     */\n    processSignal(signal) {\n        if (signal.type === 'audio-offer') {\n            const pc = this.peerConnections[String(signal.frompeer)] || new RTCPeerConnection({\n                 iceServers: this.iceServers\n            });\n            if (!this.peerConnections[String(signal.frompeer)]) {\n                this.peerConnections[String(signal.frompeer)] = pc;\n            }\n            Log.debug('Received offer');\n            pc.onnegotiationneeded = this.negotiate.bind(this, this.contextid, pc, signal.frompeer);\n            pc.onicecandidate = this.handleICECandidate.bind(this, this.contextid, signal.frompeer);\n            pc.ontrack = this.handleTrackEvent.bind(this, signal.frompeer);\n            pc.onconnectionstatechange = this.handleStateChange.bind(this, signal.frompeer);\n            pc.ondatachannel = (e) => {\n                this.peerAudioPlayer(signal.frompeer);\n                this.dataChannels.push(e.channel);\n                e.channel.onmessage = this.handleMessage.bind(this, signal.frompeer);\n                e.channel.onopen = () => {\n                    window.setTimeout(() => {\n                        e.channel.send(JSON.stringify({\n                            \"raisehand\": !!document.querySelector(\n                                '[data-peerid=\"' + this.peerid + '\"] a.hidden[data-action=\"raisehand\"]'\n                            )\n                        }));\n                    }, 3000);\n                };\n            };\n            pc.setRemoteDescription(JSON.parse(signal.message)).then(() => {\n                Log.debug('Set Remote');\n                return this.audioInput.then(audioStream => {\n                    if (audioStream) {\n                        Log.debug('audio stream');\n                        if (pc.getTransceivers().length < 2) {\n                            audioStream.getAudioTracks().forEach(track => {\n                                pc.addTransceiver(track, {streams: [audioStream]});\n                            });\n                        }\n                    }\n                    Log.debug('Create answer');\n                    return pc.createAnswer().then(answer => {\n                        Log.debug('Answer created');\n                        if (!pc || pc.signalingState == 'stable') {\n                            return false;\n                        }\n                        return pc.setLocalDescription(answer).then(() => {\n                            Log.debug('Set local');\n                            return this.sendSignal(signal.frompeer, 'audio-answer', answer);\n                        }).catch(Log.debug);\n                    }).catch(Notification.exception);\n                }).catch(Notification.exception);\n            }).catch(Log.debug);\n        } else if (signal.type === 'audio-answer') {\n            const pc = this.peerConnections[String(signal.frompeer)];\n            Log.debug('Audio answer');\n            if (pc && pc.signalingState == 'have-local-offer') {\n                pc.setRemoteDescription(JSON.parse(signal.message));\n            }\n        } else if (signal.type === 'new-ice-candidate') {\n            const pc = this.peerConnections[String(signal.frompeer)] || null;\n            if (pc && pc.currentRemoteDescription) {\n                pc.addIceCandidate(JSON.parse(signal.message));\n            }\n        }\n    }\n\n    /**\n     * Handle track event\n     *\n     * @param {int} peerid Id of peer\n     * @param {event} e Track event\n     */\n    handleTrackEvent(peerid, e) {\n        if (\n            !e || !e.streams || !document.querySelector('#deft_audio')\n        ) {\n            return;\n        }\n\n        this.peerAudioPlayer(peerid).then((player) => {\n            if (!player.srcObject) {\n                player.srcObject = e.streams[0];\n            }\n            return;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Change mute status\n     *\n     * @param {bool} state State to be set\n     */\n    mute(state) {\n        this.audioInput.then(audioStream => {\n            if (!audioStream) {\n                return this.audioInput;\n            }\n            audioStream.getAudioTracks().forEach(track => {\n                if (track.enabled == state) {\n                    track.enabled = !state;\n                }\n            });\n            return true;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Raise or lower another peers hand\n     *\n     * @param {int} peerid Peer id\n     * @param {event} e Message event\n     */\n    handleMessage(peerid, e) {\n        const message = JSON.parse(e.data);\n        if (message.hasOwnProperty('raisehand')) {\n            document.querySelectorAll('[data-peerid=\"' + peerid + '\"] [data-action=\"raisehand\"]').forEach(button => {\n                if (message.raisehand) {\n                    button.classList.add('hidden');\n                } else {\n                    button.classList.remove('hidden');\n                }\n            });\n            document.querySelectorAll('[data-peerid=\"' + peerid + '\"] [data-action=\"lowerhand\"]').forEach(button => {\n                if (message.raisehand) {\n                    button.classList.remove('hidden');\n                } else {\n                    button.classList.add('hidden');\n                }\n            });\n        }\n        if (message.hasOwnProperty('volume')) {\n            document.querySelectorAll('.volume_indicator[data-peerid=\"' + peerid + '\"]').forEach(indicator => {\n                indicator.querySelector('.low').style.opacity = message.volume.low;\n                indicator.querySelector('.mid').style.opacity = message.volume.mid;\n                indicator.querySelector('.high').style.opacity = message.volume.high;\n            });\n        }\n        this.peerAudioPlayer(peerid);\n    }\n\n    /**\n     * Adjust visiblity when state changes\n     *\n     * @param {int} peerid Peer id\n     */\n    handleStateChange(peerid) {\n        const pc = this.peerConnections[String(peerid)];\n        document.querySelectorAll('#deft_audio div[data-peerid=\"' + peerid + '\"]').forEach(userinfo => {\n            switch (pc.connectionState) {\n                case 'connected':\n                    userinfo.classList.remove('hidden');\n                    break;\n                case 'close':\n                case 'failed':\n                    userinfo.remove();\n                    break;\n                case 'disconnected':\n                    userinfo.classList.add('hidden');\n                    break;\n            }\n        });\n    }\n\n    /**\n     * Shut down gracefully before closing\n     *\n     * @param {Event} e Button click\n     */\n    closeConnections(e) {\n        if (e && e.type == 'click') {\n            const button = e.target.closest('[data-region=\"deft-venue\"] a[data-action=\"close\"]');\n            if (button) {\n                e.stopPropagation();\n                e.preventDefault();\n            } else {\n                return;\n            }\n        }\n        document.querySelectorAll('[data-region=\"deft-venue\"] a[data-action=\"close\"] i').forEach(button => {\n            button.classList.add('bg-danger');\n        });\n        document.querySelector('body').classList.remove('block_deft_raisehand');\n        Ajax.call([{\n            args: {\n                mute: false,\n                \"status\": true\n            },\n            fail: Notification.exception,\n            methodname: 'block_deft_venue_settings'\n        }]);\n\n        // Release microphone.\n        clearInterval(this.meterId);\n        this.audioInput.then(audioStream => {\n            if (audioStream) {\n                audioStream.getAudioTracks().forEach(track => {\n                    track.stop();\n                });\n            }\n            return true;\n        }).catch(Notification.exception);\n\n        // Close connections.\n        Object.values(this.peerConnections).forEach(pc => {\n            pc.close();\n        });\n\n        document.querySelectorAll('.deft-venue [data-peerid=\"' + this.peerid + '\"]').forEach(venue => {\n            const event = new Event('venueclosed');\n            venue.dispatchEvent(event);\n        });\n\n        window.beforeunload = null;\n    }\n\n    /**\n     * Handle click for mute\n     *\n     * @param {Event} e Button click\n     */\n    handleMuteButtons(e) {\n        const button = e.target.closest(\n            'a[data-action=\"mute\"], a[data-action=\"unmute\"]'\n        );\n        if (button) {\n            const action = button.getAttribute('data-action'),\n                peerid = button.closest('[data-peerid]').getAttribute('data-peerid');\n            e.stopPropagation();\n            e.preventDefault();\n            if (!button.closest('#deft_audio')) {\n                this.audioInput.then(audioStream => {\n                    if (audioStream) {\n                        Ajax.call([{\n                            args: {\n                                mute: action == 'mute',\n                                \"status\": false\n                            },\n                                fail: Notification.exception,\n                            methodname: 'block_deft_venue_settings'\n                        }]);\n                    } else if (action == 'unmute') {\n                        this.audioInput = navigator.mediaDevices.getUserMedia({\n                            audio: {\n                                autoGainControl: this.autogaincontrol,\n                                echoCancellation: this.echocancellation,\n                                noiseSuppression: this.noisesuppression,\n                                sampleRate: this.samplerate\n                            },\n                            video: false\n                        }).then(audioStream => {\n\n                            Ajax.call([{\n                                args: {\n                                    mute: false,\n                                    \"status\": false\n                                },\n                                fail: Notification.exception,\n                                methodname: 'block_deft_venue_settings'\n                            }]);\n\n                            this.monitorVolume(audioStream);\n\n                            return audioStream;\n                        }).catch(Log.debug);\n                    }\n\n                    return audioStream;\n                }).catch(Notification.exception);\n            } else {\n                Ajax.call([{\n                    args: {\n                        mute: true,\n                        peerid: peerid,\n                        \"status\": false\n                    },\n                        fail: Notification.exception,\n                    methodname: 'block_deft_venue_settings'\n                }]);\n            }\n            button.closest('[data-peerid]').querySelectorAll('[data-action=\"mute\"], [data-action=\"unmute\"]').forEach(option => {\n                if (option.getAttribute('data-action') == action) {\n                    option.classList.add('hidden');\n                } else {\n                    option.classList.remove('hidden');\n                }\n            });\n        }\n    }\n\n    /**\n     * Handle hand raise buttons\n     *\n     * @param {Event} e Click event\n     */\n    handleRaiseHand(e) {\n        const button = e.target.closest(\n            '[data-action=\"raisehand\"], [data-action=\"lowerhand\"]'\n        );\n        if (button && !button.closest('#deft_audio')) {\n            const action = button.getAttribute('data-action');\n            e.stopPropagation();\n            e.preventDefault();\n            if (action == 'raisehand') {\n                document.querySelector('body').classList.add('block_deft_raisehand');\n            } else {\n                document.querySelector('body').classList.remove('block_deft_raisehand');\n            }\n            document.querySelectorAll('a[data-action=\"raisehand\"], a[data-action=\"lowerhand\"]').forEach(button => {\n                if (button.getAttribute('data-action') == action) {\n                    button.classList.add('hidden');\n                } else {\n                    button.classList.remove('hidden');\n                }\n            });\n            Ajax.call([{\n                args: {\n                    \"status\": action == 'raisehand'\n                },\n                    fail: Notification.exception,\n                methodname: 'block_deft_raise_hand'\n            }]);\n            this.dataChannels.forEach(dataChannel => {\n                if (dataChannel.readyState != 'open') {\n                    return;\n                }\n                if (action == 'raisehand') {\n                    dataChannel.send('{\"raisehand\": true}');\n                } else {\n                    dataChannel.send('{\"raisehand\": false}');\n                }\n            });\n        }\n    }\n\n    /**\n     * Process audio to provide visual feedback\n     *\n     * @param {MediaStream} audioStream Audio from user's microphone\n     * @returns {MediaStream}\n     */\n    monitorVolume(audioStream) {\n        if (audioStream) {\n            const audioContext = new AudioContext(),\n                source = audioContext.createMediaStreamSource(audioStream),\n                analyser = new AnalyserNode(audioContext, {\n                    maxDecibels: -50,\n                    minDecibels: -90,\n                    fftSize: 2048,\n                    smoothingTimeConstant: 0.3\n                }),\n                bufferLength = analyser.frequencyBinCount,\n                data = new Uint8Array(bufferLength);\n            source.connect(analyser);\n            clearInterval(this.meterId);\n            this.meterId = setInterval(() => {\n                analyser.getByteFrequencyData(data);\n                const volume = {\n                    low: Math.min(1, data.slice(0, 16).reduce((a, b) => a + b, 0) / 2000),\n                    mid: Math.min(1, data.slice(17, 31).reduce((a, b) => a + b, 0) / 1000),\n                    high: Math.min(1, data.slice(32).reduce((a, b) => a + b, 0) / 4000)\n                },\n                    message = JSON.stringify({volume: volume}),\n                    peers = [];\n                document.querySelectorAll('.volume_indicator[data-peerid=\"' + this.peerid + '\"]').forEach(indicator => {\n                    indicator.querySelectorAll('.low').forEach(low => {\n                        low.style.opacity = volume.low;\n                    });\n                    indicator.querySelectorAll('.mid').forEach(mid => {\n                        mid.style.opacity = volume.mid;\n                    });\n                    indicator.querySelectorAll('.high').forEach(high => {\n                        high.style.opacity = volume.high;\n                    });\n                });\n                this.dataChannels.forEach(dataChannel => {\n                    if (dataChannel.readyState == 'open') {\n                        dataChannel.send(message);\n                    }\n                });\n                document.querySelectorAll('#deft_audio > div').forEach(peer => {\n                    peers.push(peer);\n                });\n                peers.sort((a, b) => {\n                    let volume = 0;\n                    a.querySelectorAll('.high, .mid, .low').forEach(indicator => {\n                        volume += -indicator.style.opacity;\n                    });\n                    b.querySelectorAll('.high, .mid, .low').forEach(indicator => {\n                        volume += indicator.style.opacity;\n                    });\n                    return volume;\n                });\n                peers.forEach(peer => {\n                    document.querySelector('#deft_audio').appendChild(peer);\n                });\n            }, 500);\n        }\n\n        return audioStream;\n    }\n\n    /**\n     * Return audio player for peer\n     *\n     * @param {int} peerid Peer id\n     * @returns {Promise} Resolve to audio player node\n     */\n    peerAudioPlayer(peerid) {\n        const usernode = document.querySelector('#deft_audio div[data-peerid=\"' + peerid + '\"] audio');\n        if (usernode) {\n            return Promise.resolve(usernode);\n        } else {\n            const node = document.createElement('div');\n            node.setAttribute('data-peerid', peerid);\n            if (document.querySelector('body#page-blocks-deft-venue')) {\n                node.setAttribute('class', 'col col-12 col-md-6 col-lg-4 col-xl-3 m-2');\n            } else {\n                node.setAttribute('class', 'col col-12 m-2');\n            }\n            window.setTimeout(() => {\n                node.querySelectorAll('img.card-img-top').forEach(image => {\n                    image.setAttribute('height', null);\n                    image.setAttribute('width', null);\n                });\n            });\n            return Fragment.loadFragment(\n                'block_deft',\n                'venue',\n                this.contextid,\n                {\n                    peerid: peerid\n                }\n            ).done((userinfo) => {\n                if (!document.querySelector('#deft_audio div[data-peerid=\"' + peerid + '\"] audio')) {\n                    document.querySelector('#deft_audio').appendChild(node);\n                    node.innerHTML = userinfo;\n                }\n            }).then(() => {\n                return document.querySelector('#deft_audio div[data-peerid=\"' + peerid + '\"] audio');\n            }).catch(Notification.exception);\n        }\n    }\n}\n"],"names":["constructor","contextid","token","peers","peerid","iceServers","autogaincontrol","echocancellation","noisesuppression","samplerate","lastSignal","lastUpdate","dataChannels","peerConnections","queueout","window","RTCPeerConnection","document","querySelectorAll","forEach","venue","e","Event","bubbles","dispatchEvent","alert","then","notice","getRoot","on","ModalEvents","cancel","Ajax","call","args","mute","fail","Notification","exception","methodname","status","close","audioInput","navigator","mediaDevices","getUserMedia","audio","autoGainControl","echoCancellation","noiseSuppression","sampleRate","video","catch","debug","this","monitorVolume","bind","Log","querySelector","removeEventListener","handleMuteButtons","addEventListener","pc","dataChannel","createDataChannel","push","onmessage","handleMessage","onnegotiationneeded","negotiate","onicecandidate","handleICECandidate","ontrack","handleTrackEvent","onconnectionstatechange","handleStateChange","String","handleRaiseHand","closeConnections","onbeforeunload","socket","Socket","subscribe","sendSignals","candidate","sendSignal","type","message","JSON","stringify","throttled","onLine","time","Date","now","setTimeout","messages","length","shift","lastsignal","done","response","settings","peer","id","Number","clearInterval","meterId","audioStream","getAudioTracks","track","stop","Object","values","disconnect","button","getAttribute","classList","add","remove","includes","signal","processSignal","key","keys","createOffer","offer","setLocalDescription","frompeer","ondatachannel","peerAudioPlayer","channel","onopen","send","setRemoteDescription","parse","getTransceivers","addTransceiver","streams","createAnswer","answer","signalingState","currentRemoteDescription","addIceCandidate","player","srcObject","state","enabled","data","hasOwnProperty","raisehand","indicator","style","opacity","volume","low","mid","high","userinfo","connectionState","target","closest","stopPropagation","preventDefault","event","beforeunload","action","option","readyState","audioContext","AudioContext","source","createMediaStreamSource","analyser","AnalyserNode","maxDecibels","minDecibels","fftSize","smoothingTimeConstant","bufferLength","frequencyBinCount","Uint8Array","connect","setInterval","getByteFrequencyData","Math","min","slice","reduce","a","b","sort","appendChild","usernode","Promise","resolve","node","createElement","setAttribute","image","Fragment","loadFragment","innerHTML"],"mappings":"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"}