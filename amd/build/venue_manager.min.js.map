{"version":3,"file":"venue_manager.min.js","sources":["../src/venue_manager.js"],"sourcesContent":["/*\n * Manage venue connections\n *\n * @package    block_deft\n * @module     block_deft/venue_manager\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport Fragment from 'core/fragment';\nimport Notification from \"core/notification\";\nimport Log from \"core/log\";\nimport Socket from \"block_deft/socket\";\n\nexport default {\n\n    lastSignal: 0,\n\n    lastUpdate: 0,\n\n    dataChannels: [],\n\n    peerConnections: [],\n\n    queue: [],\n\n    queueout: [],\n\n    /**\n     * Listen for comment actions\n     *\n     * @param {int} contextid Context id of block\n     * @param {string} token Authentication token\n     * @param {array} peers\n     * @param {int} peerid My peer id\n     * @param {array} iceServers ICE server array to configure peers\n     */\n    init: function(contextid, token, peers, peerid, iceServers) {\n        this.contextid = contextid;\n        this.peerid = peerid;\n        this.iceServers = iceServers;\n\n        this.audioInput = navigator.mediaDevices.getUserMedia({\n            audio: {\n                autoGainControl: false,\n                echoCancellation: true,\n                noiseSuppression: true,\n                sampleRate: 22050\n            },\n            video: false\n        });\n        document.querySelector('body').addEventListener('click', e => {\n            const button = e.target.closest('a[data-action=\"mute\"], a[data-action=\"unmute\"]');\n            if (button) {\n                const action = button.getAttribute('data-action');\n                    peerid = button.closest('[data-peerid]').getAttribute('data-peerid');\n                e.stopPropagation();\n                if (peerid == this.peerid) {\n                    this.mute(action == 'mute');\n                    Ajax.call([{\n                        args: {\n                            mute: action == 'mute',\n                            \"status\": false\n                        },\n                            fail: Notification.exception,\n                        methodname: 'block_deft_venue_settings'\n                    }]);\n                }\n                button.closest('[data-peerid]').querySelectorAll('[data-action=\"mute\"], [data-action=\"unmute\"]').forEach(option => {\n                    if (option.getAttribute('data-action') == action) {\n                        option.classList.add('hidden');\n                    } else {\n                        option.classList.remove('hidden');\n                    }\n                });\n            }\n        });\n        peers.forEach(peerid => {\n            const pc = new RTCPeerConnection({\n                 iceServers: iceServers\n            }),\n                dataChannel = pc.createDataChannel('Events');\n            this.dataChannels.push(dataChannel);\n            this.audioInput.then(audioStream => {\n                audioStream.getAudioTracks().forEach(track => {\n                    pc.addTrack(track, audioStream);\n                });\n                return true;\n            }).catch(Notification.exception);\n            dataChannel.onmessage = this.handleMessage.bind(this, peerid);\n            pc.onnegotiationneeded = this.negotiate.bind(this, contextid, pc, peerid);\n            pc.onicecandidate = this.handleICECandidate.bind(this, contextid, peerid);\n            pc.ontrack = this.handleTrackEvent.bind(this, peerid);\n            pc.onconnectionstatechange = this.handleStateChange.bind(this, peerid);\n            this.peerConnections[peerid] = pc;\n        });\n\n        document.querySelectorAll('a[data-action=\"raisehand\"], a[data-action=\"lowerhand\"]').forEach(button => {\n            button.addEventListener('click', () => {\n                const action = button.getAttribute('data-action');\n                document.querySelectorAll('a[data-action=\"raisehand\"], a[data-action=\"lowerhand\"]').forEach(button => {\n                    if (button.getAttribute('data-action') == action) {\n                        button.classList.add('hidden');\n                    } else {\n                        button.classList.remove('hidden');\n                    }\n                });\n                this.dataChannels.forEach(dataChannel => {\n                    if (dataChannel.readyState != 'open') {\n                        return;\n                    }\n                    if (action == 'raisehand') {\n                        dataChannel.send('{\"raisehand\": true}');\n                    } else {\n                        dataChannel.send('{\"raisehand\": false}');\n                    }\n                });\n            });\n        });\n\n        let socket = new Socket(contextid, token);\n        socket.subscribe(() => {\n            this.sendSignals();\n        });\n    },\n\n    /**\n     * Handle ICE candidate event\n     *\n     * @param {int} contextid Block context id\n     * @param {int} peerid Recipient id\n     * @param {event} e ICE candidate event\n     */\n    handleICECandidate: function(contextid, peerid, e) {\n        if (e.candidate) {\n            this.sendSignal(peerid, 'new-ice-candidate', e.candidate);\n        }\n    },\n\n    /**\n     * Queue signal to peer\n     *\n     * @param {int} peerid Id of recipient\n     * @param {string} type Signal type\n     * @param {object} message Signal content\n     */\n    sendSignal: function(peerid, type, message) {\n        this.queueout.push({\n            message: JSON.stringify(message),\n            peerid: peerid,\n            type: type\n        });\n        this.sendSignals();\n    },\n\n    /**\n     * Transfer signals with signal server\n     */\n    sendSignals: function() {\n\n        if (this.throttled) {\n            return;\n        }\n\n        const time = Date.now();\n        if (this.lastUpdate + 200 > time) {\n            this.throttled = true;\n            setTimeout(() => {\n                this.throttled = false;\n            }, this.lastUpdate + 250 - time);\n            this.sendSignals();\n            return;\n        }\n        this.lastUpdate = time;\n\n        const messages = [];\n        while (this.queueout.length) {\n            messages.push(this.queueout.shift());\n        }\n\n        Ajax.call([{\n            args: {\n                contextid: this.contextid,\n                lastsignal: this.lastSignal,\n                messages: messages\n            },\n            contextid: this.contextid,\n            done: response => {\n                response.settings.forEach(peer => {\n                    if (peer.id == Number(this.peerid)) {\n                        if (peer.status) {\n                            window.close();\n                            return;\n                        }\n                        this.mute(peer.mute);\n                    }\n                    document.querySelectorAll(\n                        '[data-peerid=\"' + peer.id + '\"] [data-action=\"mute\"], [data-peerid=\"' + peer.id\n                            + '\"] [data-action=\"unmute\"]'\n                    ).forEach(button => {\n                        if (peer.mute == (button.getAttribute('data-action') == 'mute')) {\n                            button.classList.add('hidden');\n                        } else {\n                            button.classList.remove('hidden');\n                        }\n                    });\n                });\n                response.messages.forEach((signal) => {\n                    if (signal.id > this.lastSignal) {\n                        this.lastSignal = signal.id;\n                        this.queue.push(signal);\n                    }\n                });\n                if (!this.processing && this.queue.length) {\n                    this.processing = true;\n                    this.processSignal();\n                }\n            },\n            fail: Notification.exception,\n            methodname: 'block_deft_send_signal'\n        }]);\n    },\n\n    /**\n     * Handle negtiation needed event\n     *\n     * @param {int} contextid Block conntextid\n     * @param {RTCPeerConnection} pc Connection\n     * @param {int} peerid Id of peer\n     * @return {Promise}\n     */\n    negotiate: function(contextid, pc, peerid) {\n        return pc.createOffer().then(offer => {\n            return pc.setLocalDescription(offer).then(() => {\n                return this.sendSignal(peerid, 'audio-offer', offer);\n            });\n        });\n    },\n\n    /**\n     * Recursively process queue\n     *\n     * @return {Promise}\n     */\n    processSignal: function() {\n        const signal = this.queue.shift();\n        if (!signal) {\n            this.processing = false;\n            return Promise.resolve(true);\n        } else if (signal.type === 'audio-offer') {\n            const pc = this.peerConnections[signal.frompeer] || new RTCPeerConnection({\n                 iceServers: this.iceServers\n            });\n            if (!this.peerConnections[signal.frompeer]) {\n                this.peerConnections[signal.frompeer] = pc;\n            }\n            Log.debug('Received offer');\n            pc.onnegotiationneeded = this.negotiate.bind(this, this.contextid, pc, signal.frompeer);\n            pc.onicecandidate = this.handleICECandidate.bind(this, this.contextid, signal.frompeer);\n            pc.ontrack = this.handleTrackEvent.bind(this, signal.frompeer);\n            pc.onconnectionstatechange = this.handleStateChange.bind(this, signal.frompeer);\n            pc.ondatachannel = (e) => {\n                this.dataChannels.push(e.channel);\n                e.channel.onmessage = this.handleMessage.bind(this, signal.frompeer);\n            };\n            return pc.setRemoteDescription(JSON.parse(signal.message)).then(() => {\n                Log.debug('Set Remote');\n                this.audioInput.then(audioStream => {\n                    Log.debug('audio stream');\n                    audioStream.getAudioTracks().forEach(track => {\n                        pc.addTransceiver(track, {streams: [audioStream]});\n                    });\n                    Log.debug('Create answer');\n                    pc.createAnswer().then(answer => {\n                        Log.debug('Answer created');\n                        if (pc.signalingState == 'stable') {\n                            return;\n                        }\n                        pc.setLocalDescription(answer).then(() => {\n                            Log.debug('Set local');\n                            this.sendSignal(signal.frompeer, 'audio-answer', answer);\n                        }).catch(e => {\n                            Log.debug(e);\n                            this.processSignal();\n                        });\n                    }).catch(Notification.exception);\n                }).catch(Notification.exception);\n            }).catch(e => {\n                Log.debug(e);\n                this.processSignal();\n            }).then(() => {\n                this.processSignal();\n            }).catch(Notification.exception);\n        } else if (signal.type === 'audio-answer') {\n            const pc = this.peerConnections[signal.frompeer];\n                    Log.debug('Audio answer');\n            if (pc.signalingState == 'have-local-offer') {\n                return pc.setRemoteDescription(JSON.parse(signal.message)).then(() => {\n                    Log.debug('Set Remote');\n                    return this.processSignal();\n                }).catch(e => {\n                    Log.debug(e);\n                    return this.processSignal();\n                });\n            }\n        } else if (signal.type === 'new-ice-candidate') {\n            const pc = this.peerConnections[signal.frompeer] || null;\n            if (pc) {\n                return pc.addIceCandidate(JSON.parse(signal.message)).then(() => {\n                    this.processSignal();\n                }).catch(Notification.exception);\n            }\n        }\n        return this.processSignal();\n    },\n\n    /**\n     * Handle track event\n     *\n     * @param {int} peerid Id of peer\n     * @param {event} e Track event\n     */\n    handleTrackEvent: function(peerid, e) {\n        if (!e || !e.streams || document.querySelector('#deft_audio div[data-peerid=\"' + peerid + '\"]')) {\n            return;\n        }\n\n        const node = document.createElement('div');\n        node.setAttribute('data-peerid', peerid);\n        node.setAttribute('class', 'col-4 col-md-3 col-xl-2 m-2');\n        window.setTimeout(() => {\n            node.querySelectorAll('img.card-img-top').forEach(image => {\n                image.setAttribute('height', null);\n                image.setAttribute('width', null);\n            });\n        });\n        document.querySelector('#deft_audio').appendChild(node);\n        Fragment.loadFragment(\n            'block_deft',\n            'venue',\n            this.contextid,\n            {\n                peerid: peerid\n            }\n        ).done((userinfo) => {\n            node.innerHTML = userinfo;\n            const player = node.querySelector('audio');\n            player.srcObject = e.streams[0];\n        }).catch(Notification.exception);\n    },\n\n    /**\n     * Change mute status\n     *\n     * @param {bool} state State to be set\n     */\n    mute: function(state) {\n        this.audioInput.then(audioStream => {\n            audioStream.getAudioTracks().forEach(track => {\n                if (track.enabled == state) {\n                    track.enabled = !state;\n                }\n            });\n            return true;\n        }).catch(Notification.exception);\n    },\n\n    /**\n     * Raise or lower peers hand\n     *\n     * @param {int} peerid Peer id\n     * @param {event} e Message event\n     */\n    handleMessage: function(peerid, e) {\n        const message = JSON.parse(e.data);\n        document.querySelectorAll('[data-peerid=\"' + peerid + '\"] [data-action=\"raisehand\"]').forEach(button => {\n            if (message.raisehand) {\n                button.classList.add('hidden');\n            } else {\n                button.classList.remove('hidden');\n            }\n        });\n        document.querySelectorAll('[data-peerid=\"' + peerid + '\"] [data-action=\"lowerhand\"]').forEach(button => {\n            if (message.raisehand) {\n                button.classList.remove('hidden');\n            } else {\n                button.classList.add('hidden');\n            }\n        });\n    },\n\n    /**\n     * Adjust visiblity when state changes\n     *\n     * @param {int} peerid Peer id\n     */\n    handleStateChange(peerid) {\n        const pc = this.peerConnections[peerid];\n        switch (pc.connectionState) {\n            case 'connected':\n                document.querySelectorAll('#deft_audio div[data-peerid=\"' + peerid + '\"]').forEach(userinfo => {\n                    userinfo.classList.remove('hidden');\n                });\n                break;\n            case 'close':\n            case 'disconnected':\n            case 'failed':\n                document.querySelectorAll('#deft_audio div[data-peerid=\"' + peerid + '\"]').forEach(userinfo => {\n                    userinfo.classList.add('hidden');\n                });\n                break;\n        }\n    }\n};\n"],"names":["lastSignal","lastUpdate","dataChannels","peerConnections","queue","queueout","init","contextid","token","peers","peerid","iceServers","audioInput","navigator","mediaDevices","getUserMedia","audio","autoGainControl","echoCancellation","noiseSuppression","sampleRate","video","document","querySelector","addEventListener","e","button","target","closest","action","getAttribute","stopPropagation","this","mute","call","args","fail","Notification","exception","methodname","querySelectorAll","forEach","option","classList","add","remove","pc","RTCPeerConnection","dataChannel","createDataChannel","push","then","audioStream","getAudioTracks","track","addTrack","catch","onmessage","handleMessage","bind","onnegotiationneeded","negotiate","onicecandidate","handleICECandidate","ontrack","handleTrackEvent","onconnectionstatechange","handleStateChange","readyState","send","Socket","subscribe","sendSignals","candidate","sendSignal","type","message","JSON","stringify","throttled","time","Date","now","setTimeout","messages","length","shift","lastsignal","done","response","settings","peer","id","Number","status","window","close","signal","processing","processSignal","createOffer","offer","setLocalDescription","Promise","resolve","frompeer","debug","ondatachannel","channel","setRemoteDescription","parse","addTransceiver","streams","createAnswer","answer","signalingState","addIceCandidate","node","createElement","setAttribute","image","appendChild","loadFragment","userinfo","innerHTML","srcObject","state","enabled","data","raisehand","connectionState"],"mappings":"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"}