{"version":3,"file":"subscribe.min.js","sources":["../src/subscribe.js"],"sourcesContent":["/**\n * Manage venue connections\n *\n * @module     block_deft/venue_manager\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport Janus from 'block_deft/janus-gateway';\nimport Publish from 'block_deft/publish';\nimport Log from \"core/log\";\nimport Notification from \"core/notification\";\n\nexport default class Subscribe extends Publish {\n\n    /**\n     * Start to establish the peer connections\n     *\n     * @param {int} feed Initial feed\n     */\n    startConnection(feed) {\n        this.feed = feed;\n        this.current = feed;\n        this.transactions = {};\n\n        this.creatingSubscription = true;\n\n        this.remoteStreams = {};\n\n        // Initialize the library (all console debuggers enabled)\n        Janus.init({\n            debug: \"all\", callback: () => {\n                // Create session.\n                this.janus = new Janus(\n                    {\n                        server: this.server,\n                        iceServers: this.iceServers,\n                        success: () => {\n                            // Attach to video room test plugin\n                            this.janus.attach(\n                                {\n                                    plugin: \"janus.plugin.videoroom\",\n                                    opaqueId: \"videoroom-\" + Janus.randomString(12),\n                                    success: pluginHandle => {\n                                        this.videoroom = pluginHandle;\n                                        this.register(pluginHandle);\n                                    },\n                                    error: (error) => {\n                                        this.restart = true;\n                                        Janus.error(\"  -- Error attaching plugin...\", error);\n                                        Notification.alert('', \"Error attaching plugin... \" + error);\n                                    },\n                                    ondata: (data) => {\n                                        const message = JSON.parse(data);\n                                        if (message && message.feed) {\n                                            const publish = {\n                                                request: 'update',\n                                                subscribe: [{\n                                                    feed: message.feed,\n                                                    mid: message.mid,\n                                                }]\n                                            };\n                                            this.videoroom.send({\n                                                message: publish\n                                            });\n                                        }\n                                    },\n                                    onlocaltrack: this.onLocalTrack.bind(this),\n                                    onmessage: this.onMessage.bind(this),\n                                    onremotetrack: (track, mid, on, metadata) => {\n                                        Janus.debug(\n                                            \"Remote track (mid=\" + mid + \") \" +\n                                            (on ? \"added\" : \"removed\") +\n                                            (metadata ? \" (\" + metadata.reason + \") \" : \"\") + \":\", track\n                                        );\n                                        if (!on) {\n                                            // Track removed, get rid of the stream and the rendering\n                                          delete this.remoteStreams[mid];\n                                            return;\n                                        }\n                                        if (this.remoteStreams.hasOwnProperty(mid) || track.kind !== \"video\") {\n                                            return;\n                                        }\n                                        this.remoteStreams[mid] = track;\n                                        if (this.remoteStream) {\n                                            return;\n                                        }\n                                        this.remoteStream = new MediaStream([track]);\n                                        this.remoteStream.mid = mid;\n                                        Log.debug(this.remoteStream);\n                                        Janus.attachMediaStream(\n                                            this.remoteVideo || document.getElementById('deft_venue_remote_video'),\n                                            this.remoteStream\n                                        );\n                                    }\n                                }\n                            );\n                        },\n                        error: function(error) {\n                            this.restart = true;\n                            Log.debug(error);\n                        }\n                    }\n                );\n            }\n        });\n    }\n\n    /**\n     * Register the room\n     *\n     * @param {object} pluginHandle\n     * @return {Promise}\n     */\n    register(pluginHandle) {\n        return Ajax.call([{\n            args: {\n                handle: pluginHandle.getId(),\n                id: Number(this.peerid),\n                plugin: pluginHandle.plugin,\n                room: this.roomid,\n                ptype: false,\n                feed: this.feed,\n                session: pluginHandle.session.getSessionId()\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'block_deft_join_room'\n        }])[0];\n    }\n\n    onLocalTrack() {\n        return;\n    }\n\n    onMessage(msg, jsep) {\n        Log.debug(msg);\n                    const pluginHandle = this.videoroom;\n        Janus.debug(\" ::: Got a message :::\", msg);\n        const event = msg.videoroom;\n        Janus.debug(\"Event: \" + event);\n        switch (event) {\n            case 'joined':\n                // Successfully joined, negotiate WebRTC now\n                if (msg.id) {\n                    this.peerid = msg.id;\n                    Janus.log(\"Successfully joined room \" + msg.room + \" with ID \" + this.peerid);\n                    if (!this.webrtcUp) {\n                        const tracks = [{\n                            type: 'video',\n                            capture: true,\n                            recv: false\n                        }];\n                        this.webrtcUp = true;\n                        pluginHandle.createOffer({\n                            // We only want bidirectional audio\n                            tracks: tracks,\n                            success: (jsep) => {\n                                Janus.debug(\"Got SDP!\", jsep);\n                                const publish = {\n                                    request: \"configure\",\n                                    video: true,\n                                    audio: false\n                                };\n                                pluginHandle.send({\n                                    message: publish,\n                                    jsep: jsep\n                                });\n                            },\n                            error: function(error) {\n                                Janus.error(\"WebRTC error:\", error);\n                                Notification.alert(\"WebRTC error... \", error.message);\n                            }\n                        });\n                    }\n                }\n                break;\n            case 'destroyed':\n                // The room has been destroyed\n                Janus.warn(\"The room has been destroyed!\");\n                Notification.alert('', \"The room has been destroyed\", function() {\n                    window.close();\n                });\n                break;\n            case 'attached':\n                this.creatingSubscription = false;\n                break;\n            case 'event':\n                if (msg.error) {\n                    if (msg.error_code === 485) {\n                        // This is a \"no such room\" error: give a more meaningful description\n                        Notification.alert(\n                            \"<p>Apparently room <code>\" + this.roomid + \"</code> is not configured</p>\"\n                        );\n                    } else if (msg.error_code === 428) {\n                        this.restart = true;\n                    } else {\n                        Notification.alert(msg.error_code, msg.error);\n                    }\n                    return;\n                }\n                break;\n        }\n        if (jsep) {\n            Janus.debug(\"Handling SDP as well...\", jsep);\n            // Answer and attach\n            pluginHandle.createAnswer(\n                {\n                    jsep: jsep,\n                    tracks: [\n                        {type: 'data'}\n                    ],\n                    success: function(jsep) {\n                        Janus.debug(\"Got SDP!\");\n                        Janus.debug(jsep);\n                        let body = {request: \"start\", room: this.roomid};\n                        pluginHandle.send({message: body, jsep: jsep});\n                    },\n                    error: function(error) {\n                        Janus.error(\"WebRTC error:\", error);\n                        Notification.alert(\"WebRTC error... \", error.message);\n                    }\n                }\n            );\n        }\n    }\n}\n"],"names":["Subscribe","Publish","startConnection","feed","current","transactions","creatingSubscription","remoteStreams","init","debug","callback","janus","Janus","server","this","iceServers","success","attach","plugin","opaqueId","randomString","pluginHandle","videoroom","register","error","restart","alert","ondata","data","message","JSON","parse","publish","request","subscribe","mid","send","onlocaltrack","onLocalTrack","bind","onmessage","onMessage","onremotetrack","track","on","metadata","reason","hasOwnProperty","kind","remoteStream","MediaStream","attachMediaStream","remoteVideo","document","getElementById","Ajax","call","args","handle","getId","id","Number","peerid","room","roomid","ptype","session","getSessionId","contextid","fail","Notification","exception","methodname","msg","jsep","event","log","webrtcUp","tracks","type","capture","recv","createOffer","video","audio","warn","window","close","error_code","createAnswer","body"],"mappings":"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"}