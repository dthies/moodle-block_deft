{"version":3,"file":"janus_venue.min.js","sources":["../src/janus_venue.js"],"sourcesContent":["/**\n * Manage venue connections\n *\n * @module     block_deft/venue_manager\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport {get_string as getString} from 'core/str';\nimport Janus from 'block_deft/janus-gateway';\nimport Log from \"core/log\";\nimport Notification from \"core/notification\";\nimport Publish from 'block_deft/publish';\nimport Subscribe from 'block_deft/subscribe';\nimport * as Toast from 'core/toast';\nimport VenueManager from \"block_deft/venue_manager\";\n\nvar publish = null,\n    contextid = 0,\n    iceServers = '',\n    roomid = 0,\n    peerid = 0,\n    server = '',\n    stereo = false;\n\nexport default class JanusManager extends VenueManager {\n\n    /**\n     * Start to establish the peer connections\n     */\n    startConnection() {\n        this.transactions = {};\n        roomid = this.roomid;\n        peerid = this.peerid;\n        server = this.server;\n        contextid = this.contextid;\n        iceServers = this.iceServers;\n\n        // Initialize the library (all console debuggers enabled)\n        Janus.init({\n            debug: \"none\", callback: () => {\n                // Create session.\n                this.janus = new Janus(\n                    {\n                        server: this.server,\n                        iceServers: this.iceServers,\n                        success: () => {\n                            // Attach audiobridge plugin.\n                            this.janus.attach(\n                                {\n                                    plugin: \"janus.plugin.audiobridge\",\n                                    opaqueId: \"audioroom-\" + Janus.randomString(12),\n                                    success: pluginHandle => {\n                                        this.audioBridge = pluginHandle;\n                                        Log.debug(pluginHandle.session.getSessionId());\n                                        this.register(pluginHandle);\n                                    },\n                                    error: function(error) {\n                                        Janus.error(\"  -- Error attaching plugin...\", error);\n                                        Notification.alert('', \"Error attaching plugin... \" + error);\n                                    },\n                                    onmessage: this.onMessage.bind(this),\n                                    onremotetrack: (track, mid, on, metadata) => {\n                                        Janus.debug(\n                                            \"Remote track (mid=\" + mid + \") \" +\n                                            (on ? \"added\" : \"removed\") +\n                                            (metadata ? \" (\" + metadata.reason + \") \" : \"\") + \":\", track\n                                        );\n                                        if (this.remoteStream || track.kind !== \"audio\") {\n                                            return;\n                                        }\n                                        if (!on) {\n                                            // Track removed, get rid of the stream and the rendering\n                                            this.remoteStream = null;\n                                            return;\n                                        }\n                                        this.remoteStream = new MediaStream([track]);\n                                        Janus.attachMediaStream(document.getElementById('roomaudio'), this.remoteStream);\n                                    }\n                                }\n                            );\n                            this.janus.attach(\n                                {\n                                    plugin: \"janus.plugin.textroom\",\n                                    opaqueId: \"textroom-\" + Janus.randomString(12),\n                                    success: pluginHandle => {\n                                        this.textroom = pluginHandle;\n                                        Janus.log(\"Plugin attached! (\" + this.textroom.getPlugin()\n                                            + \", id=\" + this.textroom.getId() + \")\");\n                                        // Setup the DataChannel\n                                        const body = {request: \"setup\"};\n                                        Janus.debug(\"Sending message:\", body);\n                                        this.textroom.send({message: body});\n                                    },\n                                    error: function(error) {\n                                        Notification.alert('', error);\n                                        Janus.error(\"  -- Error attaching plugin...\", error);\n                                    },\n                                    onmessage: (msg, jsep) => {\n                                        Janus.debug(\" ::: Got a message :::\", msg);\n                                        if (msg.error) {\n                                            Notification.alert(msg.error_code, msg.error);\n                                        }\n\n                                        if (jsep) {\n                                            // Answer\n                                            this.textroom.createAnswer(\n                                                {\n                                                    jsep: jsep,\n                                                    // We only use datachannels\n                                                    tracks: [\n                                                        {type: 'data'}\n                                                    ],\n                                                    success: (jsep) => {\n                                                        Janus.debug(\"Got SDP!\", jsep);\n                                                        const body = {request: \"ack\"};\n                                                        this.textroom.send({message: body, jsep: jsep});\n                                                    },\n                                                    error: function(error) {\n                                                        Janus.error(\"WebRTC error:\", error);\n                                                    }\n                                                }\n                                            );\n                                        }\n                                    },\n                                    // eslint-disable-next-line no-unused-vars\n                                    ondataopen: (label, protocol) => {\n                                        const transaction = Janus.randomString(12),\n                                            register = {\n                                                textroom: \"join\",\n                                                transaction: transaction,\n                                                room: this.roomid,\n                                                username: String(this.peerid),\n                                                display: '',\n                                            };\n                                        this.textroom.data({\n                                            text: JSON.stringify(register),\n                                            error: function(reason) {\n                                                Notification.alert('Error', reason);\n                                            }\n                                        });\n                                    },\n                                    ondata: (data) => {\n                                        Janus.debug(\"We got data from the DataChannel!\", data);\n                                        const message = JSON.parse(data),\n                                            event = message.textroom,\n                                            transaction = message.transaction;\n                                        if (transaction && this.transactions[transaction]) {\n                                            this.transactions[transaction](message);\n                                            delete this.transactions[transaction];\n                                        }\n\n                                        if (event === 'message' && message.from != this.peerid) {\n                                            this.handleMessage(message.from, {data: message.text});\n                                        }\n                                        if (event === 'join') {\n                                            this.sendMessage(JSON.stringify({\n                                                \"raisehand\": !!document.querySelector(\n                                                    '[data-peerid=\"' + this.peerid + '\"] a.hidden[data-action=\"raisehand\"]'\n                                                )\n                                            }));\n                                        }\n                                    }\n                                }\n                            );\n                        },\n                        error: (error) => {\n                            getString('serverlost', 'block_deft').done((message) => {\n                                Toast.add(message, {'type': 'info'});\n                            });\n                            Log.debug(error);\n                            this.restart = true;\n                            if (publish) {\n                                publish.handleClose();\n                                publish = null;\n                            }\n                            if (this.remoteFeed) {\n                                this.remoteFeed.handleClose();\n                                this.remoteFeed = null;\n                            }\n                            document.querySelectorAll(\n                                '[data-region=\"deft-venue\"] video'\n                            ).forEach(video => {\n                                const newfeed = document.createElement('video');\n                                video.classList.add('hidden');\n                                video.srcObject = null;\n                                video.parentNode.insertBefore(newfeed, video);\n                                video.remove();\n                                newfeed.classList.add('w-100');\n                                newfeed.id ='deft_venue_remote_video';\n                                newfeed.setAttribute('controls', true);\n                                newfeed.setAttribute('autoplay', true);\n                            });\n                            document.querySelectorAll(\n                                '[data-region=\"deft-venue\"] [data-action=\"publish\"],'\n                                + '[data-region=\"deft-venue\"] [data-action=\"unpublish\"]'\n                            ).forEach(button => {\n                                if (button.getAttribute('data-action') == 'publish') {\n                                    button.classList.remove('hidden');\n                                } else {\n                                    button.classList.add('hidden');\n                                }\n                            });\n                        },\n                        destroyed: function() {\n                            window.close();\n                        }\n                    }\n                );\n            }\n        });\n\n        document.querySelector('body').removeEventListener('venueclosed', this.handleClose.bind(this));\n        document.querySelector('body').addEventListener('venueclosed', this.handleClose.bind(this));\n\n        document.querySelector('body').removeEventListener('click', handleClick);\n        document.querySelector('body').addEventListener('click', handleClick);\n    }\n\n    /**\n     * Register the room\n     *\n     * @param {object} pluginHandle\n     * @return {Promise}\n     */\n    register(pluginHandle) {\n        // Try a registration\n        return Ajax.call([{\n            args: {\n                handle: pluginHandle.getId(),\n                id: Number(this.peerid),\n                plugin: pluginHandle.plugin,\n                room: this.roomid,\n                session: pluginHandle.session.getSessionId(),\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'block_deft_join_room'\n        }])[0];\n    }\n\n    /**\n     * Handle plugin message\n     *\n     * @param {object} msg msg\n     * @param {string} jsep\n     */\n    onMessage(msg, jsep) {\n        const event = msg.audiobridge;\n        if (event) {\n            if (event === \"joined\") {\n                // Successfully joined, negotiate WebRTC now\n                if (msg.id) {\n                    Janus.log(\"Successfully joined room \" + msg.room + \" with ID \" + this.peerid);\n                    if (!this.webrtcUp) {\n                        this.webrtcUp = true;\n                        this.audioInput.then(audioStream => {\n                            // Publish our stream.\n                            const tracks = [];\n                            if (audioStream) {\n                                audioStream.getAudioTracks().forEach(track => {\n                                    tracks.push({\n                                        type: 'audio',\n                                        capture: track,\n                                        recv: true\n                                    });\n                                });\n                            } else {\n                                tracks.push({\n                                    type: 'audio',\n                                    capture: true,\n                                    recv: true\n                                });\n                            }\n                            this.audioBridge.createOffer({\n                                // We only want bidirectional audio\n                                tracks: tracks,\n                                customizeSdp: function(jsep) {\n                                    if (stereo && jsep.sdp.indexOf(\"stereo=1\") == -1) {\n                                        // Make sure that our offer contains stereo too\n                                        jsep.sdp = jsep.sdp.replace(\"useinbandfec=1\", \"useinbandfec=1;stereo=1\");\n                                    }\n                                },\n                                success: (jsep) => {\n                                    Janus.debug(\"Got SDP!\", jsep);\n                                    const publish = {request: \"configure\", muted: false};\n                                    this.audioBridge.send({message: publish, jsep: jsep});\n                                },\n                                error: function(error) {\n                                    Janus.error(\"WebRTC error:\", error);\n                                    Notification.alert(\"WebRTC error... \", error.message);\n                                }\n                            });\n\n                            return audioStream;\n                        }).catch(Notification.exception);\n                    }\n                }\n                // Any room participant?\n                if (msg.participants) {\n                    this.updateParticipants(msg.participants);\n                }\n            } else if (event === \"destroyed\") {\n                // The room has been destroyed\n                Janus.warn(\"The room has been destroyed!\");\n                Notification.alert('', \"The room has been destroyed\");\n            } else if (event === \"event\") {\n                if (msg.participants) {\n                    this.updateParticipants(msg.participants);\n                } else if (msg.error) {\n                    if (msg.error_code === 485) {\n                        // This is a \"no such room\" error: give a more meaningful description\n                        Notification.alert(\n                            \"<p>Room <code>\" + this.roomid + \"</code> is not configured.\"\n                        );\n                    } else {\n                        Notification.alert(msg.error_code, msg.error);\n                    }\n                    return;\n                }\n                if (msg.leaving) {\n                    // One of the participants has gone away?\n                    const leaving = msg.leaving;\n                    Janus.log(\n                        \"Participant left: \" + leaving\n                    );\n                    document.querySelectorAll('#deft_audio [peerid=\"' + leaving + '\"]').forEach(peer => {\n                        peer.remove();\n                    });\n                }\n            }\n        }\n        if (jsep) {\n            Janus.debug(\"Handling SDP as well...\", jsep);\n            this.audioBridge.handleRemoteJsep({jsep: jsep});\n        }\n    }\n\n    processSignal() {\n        return;\n    }\n\n    /**\n     * Update participants display for audio bridge\n     *\n     * @param {array} list List of participants returned by plugin\n     */\n    updateParticipants(list) {\n        Janus.debug(\"Got a list of participants:\", list);\n        for (const f in list) {\n            const id = list[f].id,\n                display = list[f].display,\n                setup = list[f].setup,\n                muted = list[f].muted;\n            Janus.debug(\"  >> [\" + id + \"] \" + display + \" (setup=\" + setup + \", muted=\" + muted + \")\");\n            if (!document.querySelector('#deft_audio [peerid=\"' + id + '\"]') && Number(this.peerid) != Number(id)) {\n                // Add to the participants list\n                Log.debug(this.peerid);\n                Log.debug(id);\n                this.peerAudioPlayer(id);\n            }\n        }\n    }\n\n    /**\n     * Transfer signals with signal server\n     */\n    sendSignals() {\n\n        if (this.throttled || !navigator.onLine) {\n            return;\n        }\n\n        const time = Date.now();\n        if (this.lastUpdate + 200 > time) {\n            this.throttled = true;\n            setTimeout(() => {\n                this.throttled = false;\n            }, this.lastUpdate + 250 - time);\n            this.sendSignals();\n            return;\n        }\n        this.lastUpdate = time;\n\n        Ajax.call([{\n            args: {\n                contextid: this.contextid,\n                lastsignal: 0,\n                messages: [],\n            },\n            contextid: this.contextid,\n            done: response => {\n                response.settings.forEach(peer => {\n                    if (peer.id == Number(this.peerid)) {\n                        if (peer.status) {\n                            // Release microphone.\n                            clearInterval(this.meterId);\n                            this.audioInput.then(audioStream => {\n                                if (audioStream) {\n                                    audioStream.getAudioTracks().forEach(track => {\n                                        track.stop();\n                                    });\n                                }\n                                return audioStream;\n                            }).catch(Log.debug);\n\n                            // Close connections.\n                            this.janus.destroy();\n\n                            document.querySelectorAll(\n                                '[data-region=\"deft-venue\"] [data-peerid=\"' + this.peerid\n                                + '\"], [data-region=\"deft-venue\"] [data-action=\"publish\"]'\n                            ).forEach(venue => {\n                                const e = new Event('venueclosed', {bubbles: true});\n                                venue.dispatchEvent(e);\n                            });\n\n                            this.socket.disconnect();\n\n                            window.close();\n                            return;\n                        }\n                        this.mute(peer.mute);\n                    }\n                    document.querySelectorAll(\n                        '[data-peerid=\"' + peer.id + '\"] [data-action=\"mute\"], [data-peerid=\"' + peer.id\n                            + '\"] [data-action=\"unmute\"]'\n                    ).forEach(button => {\n                        if (peer.mute == (button.getAttribute('data-action') == 'mute')) {\n                            button.classList.add('hidden');\n                        } else {\n                            button.classList.remove('hidden');\n                        }\n                    });\n                    if (\n                        !response.peers.includes(Number(peer.id))\n                        && document.querySelector('#deft_audio [data-peerid=\"' + peer.id + '\"]')\n                    ) {\n                        document.querySelector('#deft_audio [data-peerid=\"' + peer.id + '\"]').remove();\n                    }\n                });\n                if (!response.peers.includes(Number(this.peerid))) {\n                    return;\n                }\n                for (const key in Object.keys(this.peerConnections)) {\n                    if (!response.peers.includes(Number(key)) && this.peerConnections[key]) {\n                        const pc = this.peerConnections[key];\n                        pc.close();\n                    }\n                }\n                if (response.peers.includes(Number(response.feed))) {\n                    this.subscribeTo(response.feed);\n                    document.querySelectorAll('[data-region=\"deft-venue\"] video').forEach(video => {\n                        video.classList.remove('hidden');\n                    });\n                } else {\n                    this.subscribeTo(0);\n                    document.querySelectorAll('[data-region=\"deft-venue\"] video').forEach(video => {\n                        video.classList.add('hidden');\n                    });\n                }\n                if (this.restart) {\n                    getString('reconnecting', 'block_deft').done((message) => {\n                        Toast.add(message, {'type': 'info'});\n                    });\n                    Ajax.call([{\n                        args: {\n                            id: Number(this.peerid),\n                            publish: false,\n                            room: this.roomid\n                        },\n                        contextid: this.contextid,\n                        fail: Notification.exception,\n                        methodname: 'block_deft_publish_feed'\n                    }]);\n                    this.restart = false;\n                    publish = null;\n                    this.startConnection();\n                }\n            },\n            fail: Notification.exception,\n            methodname: 'block_deft_send_signal'\n        }]);\n    }\n\n    /**\n     * Send a message through data channel to peers\n     *\n     * @param {string} text\n     */\n    sendMessage(text) {\n        if (text && text !== \"\" && this.textroom) {\n            const message = {\n                textroom: \"message\",\n                transaction: Janus.randomString(12),\n                room: this.roomid,\n                text: text\n            };\n            this.textroom.data({\n                text: JSON.stringify(message),\n                error: Log.debug,\n            });\n        }\n    }\n\n    /**\n     * Subscribe to feed\n     *\n     * @param {int} source Feed to subscribe\n     */\n    subscribeTo(source) {\n\n        if (this.remoteFeed && !this.remoteFeed.creatingSubscription && !this.remoteFeed.restart) {\n            const update = {\n                request: 'update',\n                subscribe: [{\n                    feed: Number(source)\n                }],\n                unsubscribe: [{\n                    feed: Number(this.remoteFeed.current)\n                }]\n            };\n\n            if (!source && this.remoteFeed.current) {\n                delete update.subscribe;\n            } else if (source && !this.remoteFeed.current) {\n                delete update.unsubscribe;\n            }\n\n            if (this.remoteFeed.current != source) {\n                this.remoteFeed.videoroom.send({message: update});\n                if (this.remoteFeed.current == this.peerid) {\n                    publish.unpublish();\n                }\n                this.remoteFeed.current = source;\n            }\n        } else if (this.remoteFeed && this.remoteFeed.restart) {\n            if (this.remoteFeed.current != source) {\n                this.remoteFeed = null;\n                this.subscribeTo(source);\n            }\n        } else if (this.remoteFeed) {\n            setTimeout(() => {\n                this.subscribeTo(source);\n            }, 500);\n        } else if (source) {\n            this.remoteFeed = new Subscribe(this.contextid, this.iceservers, this.roomid, this.server, this.peerid);\n            this.remoteFeed.startConnection(source);\n        }\n    }\n\n    /**\n     * Close connection when peer removed\n     */\n    handleClose() {\n        if (this.janus) {\n            this.janus.destroy();\n            this.janus = null;\n        }\n\n        if (publish) {\n            publish.handleClose();\n            publish = null;\n        }\n        document.querySelector('body').removeEventListener('click', handleClick);\n\n\n        if (this.remoteFeed && this.remoteFeed.janus) {\n            this.remoteFeed.janus.destroy();\n            this.remoteFeed = null;\n        }\n    }\n}\n\n/**\n * Handle click event\n *\n * @param {Event} e\n */\nconst handleClick = function(e) {\n    const button = e.target.closest(\n        '[data-region=\"deft-venue\"] [data-action=\"publish\"], [data-region=\"deft-venue\"] [data-action=\"unpublish\"]'\n    );\n    if (publish) {\n        publish.handleClick(e);\n    } else if (button) {\n        const action = button.getAttribute('data-action'),\n            type = button.getAttribute('data-type');\n        publish = new Publish(contextid, iceServers, roomid, server, peerid);\n        e.stopPropagation();\n        e.preventDefault();\n        document.querySelectorAll(\n            '[data-region=\"deft-venue\"] [data-action=\"publish\"],  [data-region=\"deft-venue\"] [data-action=\"unpublish\"]'\n        ).forEach(button => {\n            if ((button.getAttribute('data-action') == action) && (button.getAttribute('data-type') == type)) {\n                button.classList.add('hidden');\n            } else {\n                button.classList.remove('hidden');\n            }\n        });\n        if (type == 'display') {\n            publish.shareDisplay();\n        } else {\n            publish.shareCamera();\n        }\n        publish.startConnection();\n    }\n};\n"],"names":["publish","contextid","iceServers","roomid","peerid","server","JanusManager","VenueManager","startConnection","transactions","this","init","debug","callback","janus","Janus","success","attach","plugin","opaqueId","randomString","pluginHandle","audioBridge","session","getSessionId","register","error","alert","onmessage","onMessage","bind","onremotetrack","track","mid","on","metadata","reason","remoteStream","kind","MediaStream","attachMediaStream","document","getElementById","textroom","log","getPlugin","getId","body","request","send","message","msg","jsep","error_code","createAnswer","tracks","type","ondataopen","label","protocol","transaction","room","username","String","display","data","text","JSON","stringify","ondata","parse","event","from","handleMessage","sendMessage","querySelector","done","Toast","add","restart","handleClose","remoteFeed","querySelectorAll","forEach","video","newfeed","createElement","classList","srcObject","parentNode","insertBefore","remove","id","setAttribute","button","getAttribute","destroyed","window","close","removeEventListener","addEventListener","handleClick","Ajax","call","args","handle","Number","fail","Notification","exception","methodname","audiobridge","webrtcUp","audioInput","then","audioStream","getAudioTracks","push","capture","recv","createOffer","customizeSdp","muted","catch","participants","updateParticipants","warn","leaving","peer","handleRemoteJsep","processSignal","list","f","setup","peerAudioPlayer","sendSignals","throttled","navigator","onLine","time","Date","now","lastUpdate","setTimeout","lastsignal","messages","response","settings","status","clearInterval","meterId","stop","Log","destroy","venue","e","Event","bubbles","dispatchEvent","socket","disconnect","mute","peers","includes","key","Object","keys","peerConnections","feed","subscribeTo","source","creatingSubscription","current","Subscribe","iceservers","update","subscribe","unsubscribe","videoroom","unpublish","target","closest","action","Publish","stopPropagation","preventDefault","shareDisplay","shareCamera"],"mappings":"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"}