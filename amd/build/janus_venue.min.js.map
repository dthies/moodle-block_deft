{"version":3,"file":"janus_venue.min.js","sources":["../src/janus_venue.js"],"sourcesContent":["/**\n * Manage venue connections\n *\n * @module     block_deft/venue_manager\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport {get_string as getString} from 'core/str';\nimport Janus from 'block_deft/janus-gateway';\nimport Log from \"core/log\";\nimport Notification from \"core/notification\";\nimport PublishBase from 'block_deft/publish';\nimport Subscribe from 'block_deft/subscribe';\nimport Templates from \"core/templates\";\nimport * as Toast from 'core/toast';\nimport VenueManager from \"block_deft/venue_manager\";\n\nvar venue = null,\n    publish = null,\n    contextid = 0,\n    iceServers = '',\n    roomid = 0,\n    peerid = 0,\n    server = '',\n    stereo = false;\n\nexport default class JanusManager extends VenueManager {\n\n    /**\n     * Start to establish the peer connections\n     */\n    startConnection() {\n        this.transactions = {};\n        roomid = this.roomid;\n        peerid = this.peerid;\n        server = this.server;\n        contextid = this.contextid;\n        iceServers = this.iceServers;\n\n        // Initialize the library (all console debuggers enabled)\n        Janus.init({\n            debug: \"none\", callback: () => {\n                // Create session.\n                this.janus = new Janus(\n                    {\n                        server: this.server,\n                        iceServers: this.iceServers,\n                        success: () => {\n                            // Attach audiobridge plugin.\n                            this.janus.attach(\n                                {\n                                    plugin: \"janus.plugin.audiobridge\",\n                                    opaqueId: \"audioroom-\" + Janus.randomString(12),\n                                    success: pluginHandle => {\n                                        this.audioBridge = pluginHandle;\n                                        Log.debug(pluginHandle.session.getSessionId());\n                                        this.register(pluginHandle);\n                                    },\n                                    error: function(error) {\n                                        Janus.error(\"  -- Error attaching plugin...\", error);\n                                        Notification.alert('', \"Error attaching audiobridege plugin... \" + error);\n                                    },\n                                    onmessage: this.onMessage.bind(this),\n                                    onremotetrack: (track, mid, on, metadata) => {\n                                        Janus.debug(\n                                            \"Remote track (mid=\" + mid + \") \" +\n                                            (on ? \"added\" : \"removed\") +\n                                            (metadata ? \" (\" + metadata.reason + \") \" : \"\") + \":\", track\n                                        );\n                                        if (this.remoteStream || track.kind !== \"audio\") {\n                                            return;\n                                        }\n                                        if (!on) {\n                                            // Track removed, get rid of the stream and the rendering\n                                            this.remoteStream = null;\n                                            return;\n                                        }\n                                        this.remoteStream = new MediaStream([track]);\n                                        Janus.attachMediaStream(document.getElementById('roomaudio'), this.remoteStream);\n                                    }\n                                }\n                            );\n                            this.janus.attach(\n                                {\n                                    plugin: \"janus.plugin.textroom\",\n                                    opaqueId: \"textroom-\" + Janus.randomString(12),\n                                    success: pluginHandle => {\n                                        this.textroom = pluginHandle;\n                                        Janus.log(\"Plugin attached! (\" + this.textroom.getPlugin()\n                                            + \", id=\" + this.textroom.getId() + \")\");\n                                        // Setup the DataChannel\n                                        const body = {request: \"setup\"};\n                                        Janus.debug(\"Sending message:\", body);\n                                        this.textroom.send({message: body});\n                                    },\n                                    error: function(error) {\n                                        Notification.alert('', error);\n                                        Janus.error(\"  -- Error attaching plugin...\", error);\n                                    },\n                                    onmessage: (msg, jsep) => {\n                                        Janus.debug(\" ::: Got a message :::\", msg);\n                                        if (msg.error) {\n                                            Notification.alert(msg.error_code, msg.error);\n                                        }\n\n                                        if (jsep) {\n                                            // Answer\n                                            this.textroom.createAnswer(\n                                                {\n                                                    jsep: jsep,\n                                                    // We only use datachannels\n                                                    tracks: [\n                                                        {type: 'data'}\n                                                    ],\n                                                    success: (jsep) => {\n                                                        Janus.debug(\"Got SDP!\", jsep);\n                                                        const body = {request: \"ack\"};\n                                                        this.textroom.send({message: body, jsep: jsep});\n                                                    },\n                                                    error: function(error) {\n                                                        Janus.error(\"WebRTC error:\", error);\n                                                    }\n                                                }\n                                            );\n                                        }\n                                    },\n                                    // eslint-disable-next-line no-unused-vars\n                                    ondataopen: (label, protocol) => {\n                                        const transaction = Janus.randomString(12),\n                                            register = {\n                                                textroom: \"join\",\n                                                transaction: transaction,\n                                                room: this.roomid,\n                                                username: String(this.peerid),\n                                                display: '',\n                                            };\n                                        this.textroom.data({\n                                            text: JSON.stringify(register),\n                                            error: function(reason) {\n                                                Notification.alert('Error', reason);\n                                            }\n                                        });\n                                    },\n                                    ondata: (data) => {\n                                        Janus.debug(\"We got data from the DataChannel!\", data);\n                                        const message = JSON.parse(data),\n                                            event = message.textroom,\n                                            transaction = message.transaction;\n                                        if (transaction && this.transactions[transaction]) {\n                                            this.transactions[transaction](message);\n                                            delete this.transactions[transaction];\n                                        }\n\n                                        if (event === 'message' && message.from != this.peerid) {\n                                            this.handleMessage(message.from, {data: message.text});\n                                        }\n                                        if (event === 'join') {\n                                            this.sendMessage(JSON.stringify({\n                                                \"raisehand\": !!document.querySelector(\n                                                    '[data-peerid=\"' + this.peerid + '\"] a.hidden[data-action=\"raisehand\"]'\n                                                )\n                                            }));\n                                        }\n                                    }\n                                }\n                            );\n                        },\n                        error: (error) => {\n                            getString('serverlost', 'block_deft').done((message) => {\n                                Toast.add(message, {'type': 'info'});\n                            });\n                            Log.debug(error);\n                            this.restart = true;\n                            if (publish) {\n                                publish.handleClose();\n                                publish = null;\n                            }\n                            if (this.remoteFeed) {\n                                this.remoteFeed.handleClose();\n                                this.remoteFeed = null;\n                            }\n                            document.querySelectorAll(\n                                '[data-region=\"deft-venue\"] video'\n                            ).forEach(video => {\n                                const newfeed = document.createElement('video');\n                                video.classList.add('hidden');\n                                video.srcObject = null;\n                                video.parentNode.insertBefore(newfeed, video);\n                                video.remove();\n                                newfeed.classList.add('w-100');\n                                newfeed.id = 'deft_venue_remote_video';\n                                newfeed.setAttribute('controls', true);\n                                newfeed.setAttribute('autoplay', true);\n                            });\n                            document.querySelectorAll(\n                                '[data-region=\"deft-venue\"] [data-action=\"publish\"],'\n                                + '[data-region=\"deft-venue\"] [data-action=\"unpublish\"]'\n                            ).forEach(button => {\n                                if (button.getAttribute('data-action') == 'publish') {\n                                    button.classList.remove('hidden');\n                                } else {\n                                    button.classList.add('hidden');\n                                }\n                            });\n                        },\n                        destroyed: function() {\n                            window.close();\n                        }\n                    }\n                );\n            }\n        });\n\n        document.querySelector('body').removeEventListener('venueclosed', this.handleClose.bind(this));\n        document.querySelector('body').addEventListener('venueclosed', this.handleClose.bind(this));\n\n        document.querySelector('body').removeEventListener('click', handleClick);\n        document.querySelector('body').addEventListener('click', handleClick);\n\n        venue = this;\n    }\n\n    /**\n     * Register the room\n     *\n     * @param {object} pluginHandle\n     * @return {Promise}\n     */\n    register(pluginHandle) {\n        // Try a registration\n        return Ajax.call([{\n            args: {\n                handle: pluginHandle.getId(),\n                id: Number(this.peerid),\n                plugin: pluginHandle.plugin,\n                room: this.roomid,\n                session: pluginHandle.session.getSessionId(),\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'block_deft_join_room'\n        }])[0];\n    }\n\n    /**\n     * Handle plugin message\n     *\n     * @param {object} msg msg\n     * @param {string} jsep\n     */\n    onMessage(msg, jsep) {\n        const event = msg.audiobridge;\n        if (event) {\n            if (event === \"joined\") {\n                // Successfully joined, negotiate WebRTC now\n                if (msg.id) {\n                    Janus.log(\"Successfully joined room \" + msg.room + \" with ID \" + this.peerid);\n                    if (!this.webrtcUp) {\n                        this.webrtcUp = true;\n                        this.audioInput.then(audioStream => {\n                            // Publish our stream.\n                            const tracks = [];\n                            if (audioStream) {\n                                audioStream.getAudioTracks().forEach(track => {\n                                    tracks.push({\n                                        type: 'audio',\n                                        capture: track,\n                                        recv: true\n                                    });\n                                });\n                            } else {\n                                tracks.push({\n                                    type: 'audio',\n                                    capture: true,\n                                    recv: true\n                                });\n                            }\n                            this.audioBridge.createOffer({\n                                // We only want bidirectional audio\n                                tracks: tracks,\n                                customizeSdp: function(jsep) {\n                                    if (stereo && jsep.sdp.indexOf(\"stereo=1\") == -1) {\n                                        // Make sure that our offer contains stereo too\n                                        jsep.sdp = jsep.sdp.replace(\"useinbandfec=1\", \"useinbandfec=1;stereo=1\");\n                                    }\n                                },\n                                success: (jsep) => {\n                                    Janus.debug(\"Got SDP!\", jsep);\n                                    const publish = {request: \"configure\", muted: false};\n                                    this.audioBridge.send({message: publish, jsep: jsep});\n                                },\n                                error: function(error) {\n                                    Janus.error(\"WebRTC error:\", error);\n                                    Notification.alert(\"WebRTC error... \", error.message);\n                                }\n                            });\n\n                            return audioStream;\n                        }).catch(Notification.exception);\n                    }\n                }\n                // Any room participant?\n                if (msg.participants) {\n                    this.updateParticipants(msg.participants);\n                }\n            } else if (event === \"destroyed\") {\n                // The room has been destroyed\n                Janus.warn(\"The room has been destroyed!\");\n                Notification.alert('', \"The room has been destroyed\");\n            } else if (event === \"event\") {\n                if (msg.participants) {\n                    this.updateParticipants(msg.participants);\n                } else if (msg.error) {\n                    if (msg.error_code === 485) {\n                        // This is a \"no such room\" error: give a more meaningful description\n                        Notification.alert(\n                            \"<p>Room <code>\" + this.roomid + \"</code> is not configured.\"\n                        );\n                    } else if (msg.error_code === 489) {\n                        this.handleClose();\n                    } else {\n                        Notification.alert(msg.error_code, msg.error);\n                    }\n                    return;\n                }\n                if (msg.leaving) {\n                    // One of the participants has gone away?\n                    const leaving = msg.leaving;\n                    Janus.log(\n                        \"Participant left: \" + leaving\n                    );\n                    document.querySelectorAll('#deft_audio [peerid=\"' + leaving + '\"]').forEach(peer => {\n                        peer.remove();\n                    });\n                }\n            }\n        }\n        if (jsep) {\n            Janus.debug(\"Handling SDP as well...\", jsep);\n            this.audioBridge.handleRemoteJsep({jsep: jsep});\n        }\n    }\n\n    processSignal() {\n        return;\n    }\n\n    /**\n     * Update participants display for audio bridge\n     *\n     * @param {array} list List of participants returned by plugin\n     */\n    updateParticipants(list) {\n        Janus.debug(\"Got a list of participants:\", list);\n        for (const f in list) {\n            const id = list[f].id,\n                display = list[f].display,\n                setup = list[f].setup,\n                muted = list[f].muted;\n            Janus.debug(\"  >> [\" + id + \"] \" + display + \" (setup=\" + setup + \", muted=\" + muted + \")\");\n            if (!document.querySelector('#deft_audio [peerid=\"' + id + '\"]') && Number(this.peerid) != Number(id)) {\n                // Add to the participants list\n                Log.debug(this.peerid);\n                Log.debug(id);\n                this.peerAudioPlayer(id);\n            }\n        }\n    }\n\n    /**\n     * Transfer signals with signal server\n     */\n    sendSignals() {\n\n        if (this.throttled || !navigator.onLine) {\n            return;\n        }\n\n        const time = Date.now();\n        if (this.lastUpdate + 200 > time) {\n            this.throttled = true;\n            setTimeout(() => {\n                this.throttled = false;\n            }, this.lastUpdate + 250 - time);\n            this.sendSignals();\n            return;\n        }\n        this.lastUpdate = time;\n\n        Ajax.call([{\n            args: {\n                contextid: this.contextid,\n                lastsignal: 0,\n                messages: [],\n            },\n            contextid: this.contextid,\n            done: response => {\n                response.settings.forEach(peer => {\n                    if (peer.id == Number(this.peerid)) {\n                        if (peer.status) {\n                            // Release microphone.\n                            clearInterval(this.meterId);\n                            this.audioInput.then(audioStream => {\n                                if (audioStream) {\n                                    audioStream.getAudioTracks().forEach(track => {\n                                        track.stop();\n                                    });\n                                }\n                                return audioStream;\n                            }).catch(Log.debug);\n\n                            // Close connections.\n                            this.janus.destroy();\n\n                            document.querySelectorAll(\n                                '[data-region=\"deft-venue\"] [data-peerid=\"' + this.peerid\n                                + '\"], [data-region=\"deft-venue\"] [data-action=\"publish\"]'\n                            ).forEach(venue => {\n                                const e = new Event('venueclosed', {bubbles: true});\n                                venue.dispatchEvent(e);\n                            });\n\n                            this.socket.disconnect();\n\n                            window.close();\n                            return;\n                        }\n                        this.mute(peer.mute);\n                    }\n                    document.querySelectorAll(\n                        '[data-peerid=\"' + peer.id + '\"] [data-action=\"mute\"], [data-peerid=\"' + peer.id\n                            + '\"] [data-action=\"unmute\"]'\n                    ).forEach(button => {\n                        if (peer.mute == (button.getAttribute('data-action') == 'mute')) {\n                            button.classList.add('hidden');\n                        } else {\n                            button.classList.remove('hidden');\n                        }\n                    });\n                    if (\n                        !response.peers.includes(Number(peer.id))\n                        && document.querySelector('#deft_audio [data-peerid=\"' + peer.id + '\"]')\n                    ) {\n                        document.querySelector('#deft_audio [data-peerid=\"' + peer.id + '\"]').remove();\n                    }\n                });\n                if (!response.peers.includes(Number(this.peerid))) {\n                    return;\n                }\n                for (const key in Object.keys(this.peerConnections)) {\n                    if (!response.peers.includes(Number(key)) && this.peerConnections[key]) {\n                        const pc = this.peerConnections[key];\n                        pc.close();\n                    }\n                }\n                if (response.peers.includes(Number(response.feed))) {\n                    this.subscribeTo(response.feed);\n                } else {\n                    this.subscribeTo(0);\n                    document.querySelectorAll('[data-region=\"deft-venue\"] video').forEach(video => {\n                        video.classList.add('hidden');\n                    });\n                }\n                if (this.restart) {\n                    getString('reconnecting', 'block_deft').done((message) => {\n                        Toast.add(message, {'type': 'info'});\n                    });\n                    Ajax.call([{\n                        args: {\n                            id: Number(this.peerid),\n                            publish: false,\n                            room: this.roomid\n                        },\n                        contextid: this.contextid,\n                        fail: Notification.exception,\n                        methodname: 'block_deft_publish_feed'\n                    }]);\n                    this.restart = false;\n                    publish = null;\n                    this.startConnection();\n                }\n            },\n            fail: Notification.exception,\n            methodname: 'block_deft_send_signal'\n        }]);\n    }\n\n    /**\n     * Send a message through data channel to peers\n     *\n     * @param {string} text\n     */\n    sendMessage(text) {\n        if (text && text !== \"\" && this.textroom) {\n            const message = {\n                textroom: \"message\",\n                transaction: Janus.randomString(12),\n                room: this.roomid,\n                text: text\n            };\n            this.textroom.data({\n                text: JSON.stringify(message),\n                error: Log.debug,\n            });\n        }\n    }\n\n    /**\n     * Subscribe to feed\n     *\n     * @param {int} source Feed to subscribe\n     */\n    subscribeTo(source) {\n\n        if (this.remoteFeed && !this.remoteFeed.creatingSubscription && !this.remoteFeed.restart) {\n            const update = {\n                request: 'update',\n                subscribe: [{\n                    feed: Number(source)\n                }],\n                unsubscribe: [{\n                    feed: Number(this.remoteFeed.current)\n                }]\n            };\n\n            if (!source && this.remoteFeed.current) {\n                delete update.subscribe;\n                document.querySelectorAll(\n                    '[data-region=\"deft-venue\"] video'\n                ).forEach(video => {\n                    video.classList.add('hidden');\n                });\n            } else if (source && !this.remoteFeed.current) {\n                document.querySelectorAll(\n                    '[data-region=\"deft-venue\"] video'\n                ).forEach(video => {\n                    video.classList.remove('hidden');\n                });\n                delete update.unsubscribe;\n            }\n\n            if (this.remoteFeed.current != source) {\n                this.remoteFeed.videoroom.send({message: update});\n                if (this.remoteFeed.current == publish.feed) {\n                    publish.handleClose();\n                    publish = null;\n                }\n                this.remoteFeed.current = source;\n            }\n        } else if (this.remoteFeed && this.remoteFeed.restart) {\n            if (this.remoteFeed.current != source) {\n                this.remoteFeed = null;\n                this.subscribeTo(source);\n            }\n        } else if (this.remoteFeed) {\n            setTimeout(() => {\n                this.subscribeTo(source);\n            }, 500);\n        } else if (source) {\n            this.remoteFeed = new Subscribe(this.contextid, this.iceservers, this.roomid, this.server, this.peerid);\n            this.remoteFeed.startConnection(source);\n        }\n    }\n\n    /**\n     * Close connection when peer removed\n     */\n    handleClose() {\n        if (this.janus) {\n            this.janus.destroy();\n            this.janus = null;\n        }\n\n        if (publish) {\n            publish.handleClose();\n            publish.unpublish();\n            publish = null;\n        }\n        document.querySelector('body').removeEventListener('click', handleClick);\n\n\n        if (this.remoteFeed && this.remoteFeed.janus) {\n            this.remoteFeed.janus.destroy();\n            this.remoteFeed = null;\n        }\n        Templates.replaceNodeContents('[data-region=\"block_deft_venue_static\"]', '');\n    }\n}\n\n/**\n * Handle click event\n *\n * @param {Event} e\n */\nconst handleClick = function(e) {\n    const button = e.target.closest(\n        '[data-region=\"deft-venue\"] [data-action=\"publish\"], [data-region=\"deft-venue\"] [data-action=\"unpublish\"]'\n    );\n    if (publish) {\n        publish.handleClick(e);\n        if (button && button.getAttribute('data-action') === 'publish') {\n            if (publish.audioBridge) {\n                publish.processAudioStream();\n            } else {\n                publish.janus.attach({\n                    plugin: \"janus.plugin.audiobridge\",\n                    opaqueId: \"audiobridge-\" + Janus.randomString(12),\n                    success: pluginHandle => {\n                        publish.audioBridge = pluginHandle;\n                        publish.register(pluginHandle).then(response => {\n                            publish.processAudioStream();\n\n                            return response;\n                        }).catch(Notification.exception);\n                    },\n                    error: function(error) {\n                        Janus.error(\"  -- Error attaching plugin...\", error);\n                        Notification.alert('', \"Error attaching plugin... \" + error);\n                    },\n                    onmessage: publish.onAudioMessage.bind(publish)\n                });\n            }\n        }\n    } else if (button) {\n        const action = button.getAttribute('data-action'),\n            type = button.getAttribute('data-type');\n        publish = new Publish(contextid, iceServers, roomid, server, peerid);\n        e.stopPropagation();\n        e.preventDefault();\n        document.querySelectorAll(\n            '[data-region=\"deft-venue\"] [data-action=\"publish\"],  [data-region=\"deft-venue\"] [data-action=\"unpublish\"]'\n        ).forEach(button => {\n            if ((button.getAttribute('data-action') == action) && (button.getAttribute('data-type') == type)) {\n                button.classList.add('hidden');\n            } else {\n                button.classList.remove('hidden');\n            }\n        });\n        if (type == 'display') {\n            publish.shareDisplay();\n        } else {\n            publish.shareCamera();\n        }\n        publish.startConnection();\n    }\n\n    if (button) {\n        const action = button.getAttribute('data-action');\n        if (action === 'publish') {\n            if (venue.webrtcUp) {\n                publish.videoInput.then(audioStream => {\n                    // Publish our stream.\n                    const tracks = [];\n                    if (audioStream) {\n                        audioStream.getAudioTracks().forEach(track => {\n                            tracks.push({\n                                type: 'audio',\n                                capture: track,\n                                recv: true\n                            });\n                        });\n                        if (tracks.length) {\n                            venue.audioBridge.createOffer({\n                                // We only want bidirectional audio\n                                tracks: tracks,\n                                customizeSdp: function(jsep) {\n                                    if (stereo && jsep.sdp.indexOf(\"stereo=1\") == -1) {\n                                        // Make sure that our offer contains stereo too\n                                        jsep.sdp = jsep.sdp.replace(\"useinbandfec=1\", \"useinbandfec=1;stereo=1\");\n                                    }\n                                },\n                                success: (jsep) => {\n                                    Janus.debug(\"Got SDP!\", jsep);\n                                    const publish = {request: \"configure\", muted: false};\n                                    venue.audioBridge.send({message: publish, jsep: jsep});\n                                },\n                                error: function(error) {\n                                    Janus.error(\"WebRTC error:\", error);\n                                    Notification.alert(\"WebRTC error... \", error.message);\n                                }\n                            });\n                        }\n                    }\n\n                    return audioStream;\n                }).catch(Notification.exception);\n            }\n        }\n    }\n};\n\nclass Publish extends PublishBase {\n    /**\n     * Register the room or publish audio\n     *\n     * @param {object} pluginHandle\n     * @return {Promise}\n     */\n    register(pluginHandle) {\n        return super.register(pluginHandle).then(result => {\n            if (pluginHandle.plugin == 'janus.plugin.audiobridge') {\n                return result;\n            }\n            this.peerid = this.feed;\n            this.janus.attach({\n                plugin: \"janus.plugin.audiobridge\",\n                opaqueId: \"audiobridge-\" + Janus.randomString(12),\n                success: pluginHandle => {\n                    this.audioBridge = pluginHandle;\n                    this.register(pluginHandle);\n                },\n                error: function(error) {\n                    Janus.error(\"  -- Error attaching plugin...\", error);\n                    Notification.alert('', \"Error attaching plugin... \" + error);\n                },\n                onmessage: this.onAudioMessage.bind(this)\n            });\n\n            return result;\n        });\n    }\n\n    /**\n     * Handle plugin message\n     *\n     * @param {object} msg msg\n     * @param {string} jsep\n     */\n    onAudioMessage(msg, jsep) {\n        const event = msg.audiobridge;\n        Log.debug(event);\n        if (event) {\n            if (event === \"joined\") {\n                // Successfully joined, negotiate WebRTC now\n                if (msg.id) {\n                    Log.debug(\"Successfully joined room \" + msg.room + \" with ID \" + msg.id);\n                    if (!this.audioWebrtcUp) {\n                        this.audioWebrtcUp = true;\n                        this.processAudioStream();\n                    }\n                }\n            } else if (event === \"destroyed\") {\n                // The room has been destroyed\n                Janus.warn(\"The room has been destroyed!\");\n                Notification.alert('', \"The room has been destroyed\");\n            } else if (event === \"event\") {\n                if (msg.error) {\n                    if (msg.error_code === 485) {\n                        // This is a \"no such room\" error: give a more meaningful description\n                        Notification.alert(\n                            \"<p>Room <code>\" + this.roomid + \"</code> is not configured.\"\n                        );\n                    } else if (msg.error_code === 489) {\n                        window.close();\n                    } else {\n                        Notification.alert(msg.error_code, msg.error);\n                    }\n                    return;\n                }\n            }\n        }\n        if (jsep) {\n            Janus.debug(\"Handling SDP as well...\", jsep);\n            this.audioBridge.handleRemoteJsep({jsep: jsep});\n        }\n    }\n\n    /**\n     * Find track changes and begin negotiation\n     */\n    processAudioStream() {\n        this.videoInput.then(audioStream => {\n            // Publish our stream.\n            const tracks = [];\n            let transceiver = null;\n\n            if (\n                this.audioBridge.webrtcStuff.pc\n                && this.audioBridge.webrtcStuff.pc.iceConnectionState == 'connected'\n            ) {\n                this.audioBridge.webrtcStuff.pc.getTransceivers().forEach(x => {\n                    const sender = x.sender;\n                    if (\n                        sender.track\n                        && sender.track.id\n                        && (sender.track.kind == 'audio')\n                    ) {\n                        transceiver = x;\n                    }\n                });\n            }\n\n            if (transceiver && (!audioStream || !audioStream.getAudioTracks().length)) {\n                this.audioBridge.detach();\n                this.audioBridge = null;\n\n                return audioStream;\n            } else if (audioStream) {\n                audioStream.getAudioTracks().forEach(track => {\n                    if (transceiver) {\n                        this.videoroom.replaceTracks({\n                            tracks: [{\n                                type: 'audio',\n                                mid: transceiver.mid,\n                                capture: track\n                            }],\n                            error: Notification.exception\n                        });\n                        track.enabled = true;\n\n                        return;\n                    }\n                    tracks.push({\n                        type: 'audio',\n                        capture: track,\n                        recv: true\n                    });\n                });\n            }\n            if (!tracks.length) {\n                return audioStream;\n            }\n            this.audioBridge.createOffer({\n                // We only want bidirectional audio\n                tracks: tracks,\n                customizeSdp: function(jsep) {\n                    if (stereo && jsep.sdp.indexOf(\"stereo=1\") == -1) {\n                        // Make sure that our offer contains stereo too\n                        jsep.sdp = jsep.sdp.replace(\"useinbandfec=1\", \"useinbandfec=1;stereo=1\");\n                    }\n                },\n                success: (jsep) => {\n                    if (transceiver) {\n                        return;\n                    }\n                    Janus.debug(\"Got SDP!\", jsep);\n                    const publish = {request: \"configure\", muted: false};\n                    this.audioBridge.send({message: publish, jsep: jsep});\n                },\n                error: function(error) {\n                    Janus.error(\"WebRTC error:\", error);\n                    Notification.alert(\"WebRTC error... \", error.message);\n                }\n            });\n\n            return audioStream;\n        }).catch(Notification.exception);\n    }\n}\n"],"names":["_interopRequireDefault","e","__esModule","default","_ajax","_janusGateway","_log","_notification","_publish","_subscribe","_templates","Toast","t","WeakMap","r","n","o","i","f","__proto__","has","get","set","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","_interopRequireWildcard","_venue_manager","venue","publish","contextid","iceServers","roomid","peerid","server","JanusManager","VenueManager","startConnection","this","transactions","Janus","init","debug","callback","janus","success","attach","plugin","opaqueId","randomString","pluginHandle","audioBridge","Log","session","getSessionId","register","error","Notification","alert","onmessage","onMessage","bind","onremotetrack","track","mid","on","metadata","reason","remoteStream","kind","MediaStream","attachMediaStream","document","getElementById","textroom","log","getPlugin","getId","body","request","send","message","msg","jsep","error_code","createAnswer","tracks","type","ondataopen","label","protocol","transaction","room","username","String","display","data","text","JSON","stringify","ondata","parse","event","from","handleMessage","sendMessage","raisehand","querySelector","getString","done","add","restart","handleClose","remoteFeed","querySelectorAll","forEach","video","newfeed","createElement","classList","srcObject","parentNode","insertBefore","remove","id","setAttribute","button","getAttribute","destroyed","window","close","removeEventListener","addEventListener","handleClick","Ajax","args","handle","Number","fail","exception","methodname","audiobridge","webrtcUp","audioInput","then","audioStream","getAudioTracks","push","capture","recv","createOffer","customizeSdp","muted","catch","participants","updateParticipants","warn","leaving","peer","handleRemoteJsep","processSignal","list","setup","peerAudioPlayer","sendSignals","throttled","navigator","onLine","time","Date","now","lastUpdate","setTimeout","lastsignal","messages","response","settings","status","clearInterval","meterId","stop","destroy","Event","bubbles","dispatchEvent","socket","disconnect","mute","peers","includes","key","keys","peerConnections","feed","subscribeTo","source","creatingSubscription","current","Subscribe","iceservers","update","subscribe","unsubscribe","videoroom","unpublish","Templates","replaceNodeContents","_exports","target","closest","processAudioStream","onAudioMessage","action","Publish","stopPropagation","preventDefault","shareDisplay","shareCamera","videoInput","length","PublishBase","super","result","audioWebrtcUp","transceiver","webrtcStuff","pc","iceConnectionState","getTransceivers","x","sender","replaceTracks","enabled","detach"],"mappings":"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"}