{"version":3,"file":"refresh.min.js","sources":["../../src/jitsi/refresh.js"],"sourcesContent":["/*\n * Refresh content when changed on the system\n *\n * @package    block_deft\n * @module     block_deft/jitis/refresh\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Fragment from \"core/fragment\";\nimport JitsiMeetJS from \"block_deft/jitsi/lib-jitsi-meet.min\";\nimport Log from \"core/log\";\nimport Socket from \"block_deft/jitsi/socket\";\nimport Templates from \"core/templates\";\n\nvar domain;\n\nexport default class {\n\n    /**\n     * Listen to WebSocket and refresh content\n     *\n     * @param {int} contextid Context id of block\n     * @param {string} selector Content location to replace\n     * @param {string} jwt Authentication token to connect server\n     * @param {int} throttle Throttle dely in ms\n     * @param {string} server Jitsi server to use\n     * @param {string} room Room name\n     */\n    constructor(contextid, selector, jwt, throttle, server, room) {\n        this.contextid = contextid;\n        this.selector = selector;\n        this.throttle = throttle;\n        this.throttled = false;\n        this.lastupdate = 0;\n        this.server = server;\n        domain = server;\n\n        JitsiMeetJS.init();\n        JitsiMeetJS.setLogLevel(JitsiMeetJS.logLevels.DEBUG);\n\n        this.connection = new JitsiMeetJS.JitsiConnection(null, jwt, {\n            serviceUrl: `https://${ domain }/http-bind`,\n            hosts: {\n                domain: domain,\n                muc: `conference.${ domain }`\n            }\n        });\n        this.connection.addEventListener(JitsiMeetJS.events.connection.CONNECTION_ESTABLISHED, () => {\n            this.room = this.connection.initJitsiConference(room, {\n                disableSimulcast: true\n            });\n            this.room.addCommandListener('updateinterface', e => {\n                this.handleMessage(e.attributes.id, {\n                    data: e.attributes.message\n                });\n            });\n\n            this.socket = new Socket(this.room);\n            this.socket.subscribe(() => {\n                this.update();\n            });\n            document.body.addEventListener('deftaction', () => {\n                this.socket.notify();\n            });\n            this.room.on(JitsiMeetJS.events.conference.CONFERENCE_JOINED, async() => {\n            });\n\n            this.room.join();\n        });\n\n        this.connection.connect();\n    }\n\n    /**\n     * Refresh content\n     *\n     */\n    update() {\n        if (document.querySelector(this.selector)) {\n            let content = document.querySelector(this.selector).parentNode,\n                component = content.closest('[data-component]')\n                    && content.closest('[data-component]').getAttribute('data-component')\n                    || 'block_deft',\n                data = {};\n            if (!content) {\n                return;\n            }\n\n            if (\n                (this.lastupdate + this.throttle > Date.now())\n                || (document.activeElement.closest(this.selector) && document.activeElement.closest('select'))\n            ) {\n                if (\n                    !this.throttled\n                    || (this.lastupdate + this.throttle < Date.now())\n                ) {\n                    setTimeout(() => {\n                        this.update();\n                    }, Math.max(this.lastupdate + this.throttle - Date.now(), 40));\n                    this.throttled = true;\n                }\n\n                return;\n            }\n\n            document.querySelector(this.selector)\n                .querySelectorAll('[data-type=\"comments\"] .block_deft_comments.expanded')\n                .forEach((opencomments) => {\n                    data.opencomments = data.opencomments || [];\n                    data.opencomments.push(opencomments.closest('[data-task]').getAttribute('data-task'));\n                });\n\n            if (document.querySelector(this.selector).closest('[data-modified]')) {\n                data.lastmodified = document.querySelector(this.selector).closest('[data-modified]').getAttribute('data-modified');\n            }\n\n            Fragment.loadFragment(\n                component,\n                'content',\n                this.contextid,\n                {\n                    jsondata: JSON.stringify(data)\n                }\n            ).done((html, js) => {\n                if (html) {\n                    this.replace(content, html, js);\n                }\n            }).catch(Log.debug);\n\n            this.throttled = false;\n            this.lastupdate = Date.now();\n        }\n    }\n\n    /**\n     * Replace content\n     *\n     * @param {DOMNode} content\n     * @param {string} html New content\n     * @param {string} js Scripts to run after replacement\n     */\n    replace(content, html, js) {\n        let setScroll = () => {\n                return true;\n            },\n            setHeight = () => {\n                return true;\n            };\n        content.style.height = content.offsetHeight;\n        setTimeout(() => {\n            content.style.height = null;\n        });\n        content.querySelectorAll('.block_deft_comments').forEach((comments) => {\n            const position = comments.scrollTop,\n                task = comments.closest('[data-task]').getAttribute('data-task'),\n                recurse = setScroll;\n            setScroll = () => {\n                content.querySelectorAll('[data-task=\"' + task + '\"]').forEach((task) => {\n                    task.querySelector('.block_deft_comments').scrollTop = position;\n                });\n                recurse();\n            };\n        });\n\n        content.querySelectorAll('[data-summary]').forEach((summary) => {\n            const height = summary.offsetHeight,\n                task = summary.getAttribute('data-summary'),\n                recurse = setHeight;\n            setHeight = () => {\n                content.querySelectorAll('[data-summary=\"' + task + '\"]').forEach((summary) => {\n                    summary.setAttribute('style', 'min-height: ' + height + 'px;');\n                });\n                recurse();\n            };\n        });\n        Templates.replaceNodeContents(content, html, js);\n        setScroll();\n        setHeight();\n    }\n}\n"],"names":["domain","constructor","contextid","selector","jwt","throttle","server","room","throttled","lastupdate","init","setLogLevel","JitsiMeetJS","logLevels","DEBUG","connection","JitsiConnection","serviceUrl","hosts","muc","addEventListener","events","CONNECTION_ESTABLISHED","this","initJitsiConference","disableSimulcast","addCommandListener","e","handleMessage","attributes","id","data","message","socket","Socket","subscribe","update","document","body","notify","on","conference","CONFERENCE_JOINED","async","join","connect","querySelector","content","parentNode","component","closest","getAttribute","Date","now","activeElement","setTimeout","Math","max","querySelectorAll","forEach","opencomments","push","lastmodified","loadFragment","jsondata","JSON","stringify","done","html","js","replace","catch","Log","debug","setScroll","setHeight","style","height","offsetHeight","comments","position","scrollTop","task","recurse","summary","setAttribute","replaceNodeContents"],"mappings":"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"}