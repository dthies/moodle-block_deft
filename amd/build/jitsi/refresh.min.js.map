{"version":3,"file":"refresh.min.js","sources":["../../src/jitsi/refresh.js"],"sourcesContent":["/*\n * Refresh content when changed on the system\n *\n * @package    block_deft\n * @module     block_deft/jitis/refresh\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Fragment from \"core/fragment\";\nimport JitsiMeetJS from \"block_deft/jitsi/lib-jitsi-meet.min\";\nimport Log from \"core/log\";\nimport Socket from \"block_deft/jitsi/socket\";\nimport Templates from \"core/templates\";\n\nvar domain;\n\nexport default class {\n\n    /**\n     * Listen to WebSocket and refresh content\n     *\n     * @param {int} contextid Context id of block\n     * @param {string} selector Content location to replace\n     * @param {string} jwt Authentication token to connect server\n     * @param {int} throttle Throttle dely in ms\n     * @param {string} server Jitsi server to use\n     * @param {string} room Room name\n     */\n    constructor(contextid, selector, jwt, throttle, server, room) {\n        this.contextid = contextid;\n        this.selector = selector;\n        this.throttle = throttle;\n        this.throttled = false;\n        this.lastupdate = 0;\n        this.server = server;\n        domain = server;\n\n        JitsiMeetJS.init();\n        JitsiMeetJS.setLogLevel(JitsiMeetJS.logLevels.DEBUG);\n\n        this.connection = new JitsiMeetJS.JitsiConnection(null, jwt, {\n            serviceUrl: `https://${ domain }/http-bind`,\n            hosts: {\n                domain: domain,\n                muc: `conference.${ domain }`\n            }\n        });\n        this.connection.addEventListener(JitsiMeetJS.events.connection.CONNECTION_ESTABLISHED, () => {\n            this.room = this.connection.initJitsiConference(room, {\n                disableSimulcast: true\n            });\n            this.room.addCommandListener('updateinterface', e => {\n                this.handleMessage(e.attributes.id, {\n                    data: e.attributes.message\n                });\n            });\n\n            this.socket = new Socket(this.room);\n            this.socket.subscribe(() => {\n                this.update();\n            });\n            document.body.addEventListener('deftaction', () => {\n                this.socket.notify();\n            });\n            this.room.on(JitsiMeetJS.events.conference.CONFERENCE_JOINED, async() => {\n            });\n\n            this.room.join();\n        });\n\n        this.connection.connect();\n    }\n\n    /**\n     * Refresh content\n     *\n     */\n    update() {\n        if (document.querySelector(this.selector)) {\n            let content = document.querySelector(this.selector).parentNode,\n                component = content.closest('[data-component]')\n                    && content.closest('[data-component]').getAttribute('data-component')\n                    || 'block_deft',\n                data = {};\n            if (!content) {\n                return;\n            }\n\n            if (\n                (this.lastupdate + this.throttle > Date.now())\n                || (document.activeElement.closest(this.selector) && document.activeElement.closest('select'))\n            ) {\n                if (\n                    !this.throttled\n                    || (this.lastupdate + this.throttle < Date.now())\n                ) {\n                    setTimeout(() => {\n                        this.update();\n                    }, Math.max(this.lastupdate + this.throttle - Date.now(), 40));\n                    this.throttled = true;\n                }\n\n                return;\n            }\n\n            document.querySelector(this.selector)\n                .querySelectorAll('[data-type=\"comments\"] .block_deft_comments.expanded')\n                .forEach((opencomments) => {\n                    data.opencomments = data.opencomments || [];\n                    data.opencomments.push(opencomments.closest('[data-task]').getAttribute('data-task'));\n                });\n\n            if (document.querySelector(this.selector).closest('[data-modified]')) {\n                data.lastmodified = document.querySelector(this.selector).closest('[data-modified]').getAttribute('data-modified');\n            }\n\n            Fragment.loadFragment(\n                component,\n                'content',\n                this.contextid,\n                {\n                    jsondata: JSON.stringify(data)\n                }\n            ).done((html, js) => {\n                if (html) {\n                    this.replace(content, html, js);\n                }\n            }).catch(Log.debug);\n\n            this.throttled = false;\n            this.lastupdate = Date.now();\n        }\n    }\n\n    /**\n     * Replace content\n     *\n     * @param {DOMNode} content\n     * @param {string} html New content\n     * @param {string} js Scripts to run after replacement\n     */\n    replace(content, html, js) {\n        let setScroll = () => {\n                return true;\n            },\n            setHeight = () => {\n                return true;\n            };\n        content.style.height = content.offsetHeight;\n        setTimeout(() => {\n            content.style.height = null;\n        });\n        content.querySelectorAll('.block_deft_comments').forEach((comments) => {\n            const position = comments.scrollTop,\n                task = comments.closest('[data-task]').getAttribute('data-task'),\n                recurse = setScroll;\n            setScroll = () => {\n                content.querySelectorAll('[data-task=\"' + task + '\"]').forEach((task) => {\n                    task.querySelector('.block_deft_comments').scrollTop = position;\n                });\n                recurse();\n            };\n        });\n\n        content.querySelectorAll('[data-summary]').forEach((summary) => {\n            const height = summary.offsetHeight,\n                task = summary.getAttribute('data-summary'),\n                recurse = setHeight;\n            setHeight = () => {\n                content.querySelectorAll('[data-summary=\"' + task + '\"]').forEach((summary) => {\n                    summary.setAttribute('style', 'min-height: ' + height + 'px;');\n                });\n                recurse();\n            };\n        });\n        Templates.replaceNodeContents(content, html, js);\n        setScroll();\n        setHeight();\n    }\n}\n"],"names":["_interopRequireDefault","e","__esModule","default","domain","_fragment","_libJitsiMeet","_log","_socket","_templates","_exports","constructor","contextid","selector","jwt","throttle","server","room","this","throttled","lastupdate","JitsiMeetJS","init","setLogLevel","logLevels","DEBUG","connection","JitsiConnection","serviceUrl","hosts","muc","addEventListener","events","CONNECTION_ESTABLISHED","initJitsiConference","disableSimulcast","addCommandListener","handleMessage","attributes","id","data","message","socket","Socket","subscribe","update","document","body","notify","on","conference","CONFERENCE_JOINED","async","join","connect","querySelector","content","parentNode","component","closest","getAttribute","Date","now","activeElement","setTimeout","Math","max","querySelectorAll","forEach","opencomments","push","lastmodified","Fragment","loadFragment","jsondata","JSON","stringify","done","html","js","replace","catch","Log","debug","setScroll","setHeight","style","height","offsetHeight","comments","position","scrollTop","task","recurse","summary","setAttribute","Templates","replaceNodeContents"],"mappings":"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"}