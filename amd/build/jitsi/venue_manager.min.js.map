{"version":3,"file":"venue_manager.min.js","sources":["../../src/jitsi/venue_manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/ //\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * Deft response Jitsi integration venue manager\n *\n * @package    block_deft\n * @module     block_deft/jitsi/venue_manager\n * @copyright  2025 Daniel Thies\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nvar domain;\nvar connection;\n\nimport Ajax from \"core/ajax\";\nimport Fragment from 'core/fragment';\nimport JitsiMeetJS from \"block_deft/jitsi/lib-jitsi-meet.min\";\nimport Notification from \"core/notification\";\nimport Socket from \"block_deft/jitsi/socket\";\nimport VenueManager from \"block_deft/venue_manager\";\n\nexport default class MediaManager extends VenueManager {\n    /**\n     * Initialize player plugin\n     *\n     * @param {int} contextid\n     * @param {string} server Jitsi server to use\n     * @param {string} room Room name\n     * @param {object} userinfo User information to pass to meeting\n     * @param {string} jwt JWT authentication token\n     * @param {int} peerid Peer ID\n     *\n     * @returns {bool}\n     */\n    constructor(contextid, server, room, userinfo, jwt, peerid) {\n\n        super(contextid, '', [], '', true, true, 14400, 0, '');\n        this.contextid = contextid;\n        domain = server;\n        this.userinfo = [];\n        this.peerid = peerid;\n        this.displayedTracks = [];\n        this.videoTracks = {};\n        this.audioTracks = {};\n\n        JitsiMeetJS.init();\n        JitsiMeetJS.setLogLevel(JitsiMeetJS.logLevels.DEBUG);\n        if (connection) {\n            connection.disconnect();\n        }\n\n        connection = new JitsiMeetJS.JitsiConnection(null, jwt, {\n            serviceUrl: `https://${ domain }/http-bind`,\n            hosts: {\n                domain: domain,\n                muc: `conference.${ domain }`\n            }\n        });\n        connection.addEventListener(JitsiMeetJS.events.connection.CONNECTION_ESTABLISHED, () => {\n            this.room = connection.initJitsiConference(room, {\n                disableSimulcast: true\n            });\n            this.room.addEventListener(JitsiMeetJS.events.conference.TRACK_ADDED, track => {\n                this.onRemoteTrack(track);\n            });\n            this.room.addEventListener(JitsiMeetJS.events.conference.TRACK_REMOVED, track => {\n                if (track.getType() == 'video') {\n                    this.videoTracks[track.getParticipantId()] = null;\n                } else {\n                    this.audioTracks[track.getParticipantId()] = null;\n                }\n                track.dispose();\n            });\n            this.room.addCommandListener('updateinterface', e => {\n                this.handleMessage(e.attributes.id, {\n                    data: e.attributes.message\n                });\n            });\n\n            this.socket = new Socket(this.room);\n            this.socket.subscribe(() => {\n                this.sendSignals();\n            });\n            this.room.on(JitsiMeetJS.events.conference.CONFERENCE_JOINED, async() => {\n                const tracks = await JitsiMeetJS.createLocalTracks({\n                    devices: ['audio'],\n                });\n                tracks.forEach(track => {\n                    if (this[`${ track.getType() }Track`]) {\n                        this.room.replaceTrack(this[`${ track.getType() }Track`], track);\n                    } else {\n                        this.room.addTrack(track);\n                    }\n                    this[`${ track.getType() }Track`] = track;\n\n                    this.monitorVolume(track.stream);\n                });\n                this.register();\n            });\n\n            document.body.addEventListener(\n                'venueclosed',\n                () => {\n                    this.closeConnections();\n                }\n            );\n\n            this.room.join();\n\n            document.body.addEventListener('click', e => this.handleClick(e));\n        });\n        connection.addEventListener(JitsiMeetJS.events.connection.CONNECTION_DISCONNECTED, () => {\n            window.close();\n        });\n\n        connection.connect();\n\n        this.addListeners();\n    }\n\n    /**\n     * Start to establish the peer connections\n     */\n    startConnection() {\n        return;\n    }\n\n    /**\n     * Process new remote track\n     *\n     * @param {JitsiTrack} track New track\n     */\n    onRemoteTrack(track) {\n        if (track.getType() == 'video') {\n            this.videoTracks[track.getParticipantId()] = track;\n        } else {\n            this.audioTracks[track.getParticipantId()] = track;\n        }\n        document.body.dispatchEvent(new CustomEvent('deftaction', { }));\n    }\n\n    /**\n     * Change published media in activity\n     *\n     * @param {bool} publish Whether to add or remove media\n     */\n    async publish(publish) {\n        await Ajax.call([{\n            args: {\n                id: this.peerid,\n                publish: publish,\n                room: 0\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'block_deft_publish_feed'\n        }])[0];\n\n        document.body.dispatchEvent(new CustomEvent('deftaction', { }));\n        this.socket.notify();\n    }\n\n    /**\n     * Register the room\n     *\n     * @return {Promise}\n     */\n    async register() {\n        // Try a registration\n        const response = await Ajax.call([{\n            args: {\n                handle: 0,\n                id: Number(this.peerid),\n                plugin: this.room.myUserId(),\n                room: 0,\n                session: 0,\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'block_deft_join_room'\n        }])[0];\n\n        if (response.status) {\n            document.body.dispatchEvent(new CustomEvent('deftaction', { }));\n            this.socket.notify();\n        }\n\n        return response;\n    }\n\n    /**\n     * Handle button click\n     *\n     * @param {Event} e Click event\n     */\n    async handleClick(e) {\n        const button = e.target.closest('a[data-action=\"publish\"], a[data-action=\"unpublish\"]');\n\n        if (!button) {\n            return;\n        }\n        e.stopPropagation();\n        e.preventDefault();\n\n        if (button.dataset.action == 'publish') {\n            if (!this.audioTrack) {\n                return;\n            }\n            const tracks = await JitsiMeetJS.createLocalTracks({\n                devices: ['video'],\n                constraints: {aspectRatio: {exact: 1}, height: {ideal: 360}, width: {ideal: 360}}\n            });\n            tracks.forEach(track => {\n                if (this[`${ track.getType() }Track`]) {\n                    this.room.replaceTrack(this[`${ track.getType() }Track`], track);\n                } else {\n                    this.room.addTrack(track);\n                }\n                this[`${ track.getType() }Track`] = track;\n            });\n            this.publish(true);\n            document.querySelectorAll('a[data-action=\"publish\"]').forEach(button => {\n                button.classList.add('hidden');\n            });\n            document.querySelectorAll('a[data-action=\"unpublish\"]').forEach(button => {\n                button.classList.remove('hidden');\n            });\n        } else {\n            document.querySelectorAll('a[data-action=\"publish\"]').forEach(button => {\n                button.classList.remove('hidden');\n            });\n            document.querySelectorAll('a[data-action=\"unpublish\"]').forEach(button => {\n                button.classList.add('hidden');\n            });\n            if (this.videoTrack) {\n                this.videoTrack.dispose();\n                this.videoTrack = null;\n            }\n            this.publish(false);\n        }\n    }\n\n    /**\n     * Change mute status\n     *\n     * @param {bool} state State to be set\n     */\n    mute(state) {\n        if (this.audioTrack) {\n            this.audioTrack.track.enabled = !state;\n        }\n    }\n\n    processSignal() {\n        return;\n    }\n\n    /**\n     * Transfer signals with signal server\n     */\n    sendSignals() {\n\n        if (this.throttled || !navigator.onLine) {\n            return;\n        }\n\n        const time = Date.now();\n        if (this.lastUpdate + 200 > time) {\n            this.throttled = true;\n            setTimeout(() => {\n                this.throttled = false;\n            }, this.lastUpdate + 250 - time);\n            this.sendSignals();\n            return;\n        }\n        this.lastUpdate = time;\n\n        Ajax.call([{\n            args: {\n                contextid: this.contextid,\n                lastsignal: 0,\n                messages: [],\n            },\n            contextid: this.contextid,\n            done: response => {\n                this.subscribeTo(response.feed);\n                response.settings.forEach(peer => {\n                    if (peer.id == Number(this.peerid)) {\n                        if (peer.status) {\n                            // Release microphone.\n                            clearInterval(this.meterId);\n                            if (this.audioTrack) {\n                                this.audioTrack.track.stop();\n                            }\n                            // Close connections.\n                            document.querySelectorAll(\n                                '[data-region=\"deft-venue\"] [data-peerid=\"' + this.peerid\n                                + '\"], [data-region=\"deft-venue\"] [data-action=\"publish\"]'\n                            ).forEach(venue => {\n                                const e = new Event('venueclosed', {bubbles: true});\n                                venue.dispatchEvent(e);\n                            });\n\n                            this.socket.disconnect();\n\n                            this.closeConnections();\n\n                            return;\n                        }\n                        this.mute(peer.mute);\n                    }\n                    document.querySelectorAll(\n                        '[data-peerid=\"' + peer.id + '\"] [data-action=\"mute\"], [data-peerid=\"' + peer.id\n                            + '\"] [data-action=\"unmute\"]'\n                    ).forEach(button => {\n                        if (peer.mute == (button.getAttribute('data-action') == 'mute')) {\n                            button.classList.add('hidden');\n                        } else {\n                            button.classList.remove('hidden');\n                        }\n                    });\n                    if (\n                        !response.peers.includes(Number(peer.id))\n                        && document.querySelector('#deft_audio [data-peerid=\"' + peer.id + '\"]')\n                    ) {\n                        document.querySelector('#deft_audio [data-peerid=\"' + peer.id + '\"]').remove();\n                    }\n                    if (!document.querySelector('#deft_audio [data-peerid=\"' + peer.id + '\"]')\n                        && this.audioTracks[peer.username]\n                        && peer.id != this.peerid\n                    ) {\n                        this.peerAudioPlayer(peer);\n                    }\n                });\n                if (!response.peers.includes(Number(this.peerid))) {\n                    return;\n                }\n            },\n            fail: Notification.exception,\n            methodname: 'block_deft_send_signal'\n        }]);\n    }\n\n    /**\n     * Send a message through data channel to peers\n     *\n     * @param {string} text\n     */\n    sendMessage(text) {\n        if (text) {\n            this.room.sendCommandOnce('updateinterface', {\n                value: 'updateinterface',\n                attributes: {\n                    id: this.peerid,\n                    message: text\n                },\n                children: []\n            });\n        }\n    }\n\n    /**\n     * Return audio player for peer\n     *\n     * @param {object} peer Peer information\n     * @returns {Promise} Resolve to audio player node\n     */\n    peerAudioPlayer(peer) {\n        const usernode = document.querySelector('#deft_audio div[data-peerid=\"' + peer.id + '\"] audio');\n        if (usernode) {\n            return Promise.resolve(usernode);\n        } else {\n            const node = document.createElement('div');\n            node.setAttribute('data-peerid', peer.id);\n            if (document.querySelector('body#page-blocks-deft-venue')) {\n                node.setAttribute('class', 'col col-12 col-sm-6 col-md-4 col-lg-3 p-2');\n            } else {\n                node.setAttribute('class', 'col col-12 col-sm-6 col-md-4 p-2');\n            }\n            window.setTimeout(() => {\n                node.querySelectorAll('img.card-img-top').forEach(image => {\n                    image.setAttribute('height', null);\n                    image.setAttribute('width', null);\n                });\n            });\n            return Fragment.loadFragment(\n                'block_deft',\n                'venue',\n                this.contextid,\n                {\n                    peerid: peer.id\n                }\n            ).done((userinfo) => {\n                if (!document.querySelector('#deft_audio div[data-peerid=\"' + peer.id + '\"] audio')) {\n                    document.querySelector('#deft_audio').appendChild(node);\n                    node.innerHTML = userinfo;\n                }\n            }).then(() => {\n                const audio = document.querySelector('#deft_audio div[data-peerid=\"' + peer.id + '\"] audio');\n                if (audio) {\n                    const track = this.audioTracks[peer.username];\n                    track.attach(audio);\n                }\n                return audio;\n            }).catch(Notification.exception);\n        }\n    }\n\n    /**\n     * Add event listeners\n     */\n    addListeners() {\n\n        document.querySelector('body').removeEventListener('click', this.handleMuteButtons.bind(this));\n        document.querySelector('body').addEventListener('click', this.handleMuteButtons.bind(this));\n\n        document.querySelector('body').removeEventListener('click', this.handleRaiseHand.bind(this));\n        document.querySelector('body').addEventListener('click', this.handleRaiseHand.bind(this));\n\n        document.querySelector('body').removeEventListener('click', this.closeConnections.bind(this));\n        document.querySelector('body').addEventListener('click', this.closeConnections.bind(this));\n\n        window.onbeforeunload = this.closeConnections.bind(this);\n    }\n\n    /**\n     * Handle click for mute\n     *\n     * @param {Event} e Button click\n     */\n    async handleMuteButtons(e) {\n        const button = e.target.closest(\n            'a[data-action=\"mute\"], a[data-action=\"unmute\"]'\n        );\n        if (button) {\n            const action = button.getAttribute('data-action'),\n                peerid = button.closest('[data-peerid]').getAttribute('data-peerid');\n            e.stopPropagation();\n            e.preventDefault();\n            if (peerid == this.peerid) {\n                this.mute(action == 'mute');\n            }\n            await Ajax.call([{\n                args: {\n                    mute: action == 'mute',\n                    peerid: peerid,\n                    \"status\": false\n                },\n                fail: Notification.exception,\n                methodname: 'block_deft_venue_settings'\n            }]);\n            button.closest('[data-peerid]').querySelectorAll('[data-action=\"mute\"], [data-action=\"unmute\"]').forEach(option => {\n                if (option.getAttribute('data-action') == action) {\n                    option.classList.add('hidden');\n                } else {\n                    option.classList.remove('hidden');\n                }\n            });\n            this.socket.notify();\n            document.body.dispatchEvent(new CustomEvent('deftaction', { }));\n        }\n    }\n\n    /**\n     * Shut down gracefully before closing\n     *\n     * @param {Event} e Button click\n     */\n    closeConnections(e) {\n        if (e && e.type == 'click') {\n            const button = e.target.closest('[data-region=\"deft-venue\"] a[data-action=\"close\"]');\n            if (button) {\n                e.stopPropagation();\n                e.preventDefault();\n            } else {\n                return;\n            }\n        }\n        document.querySelectorAll('[data-region=\"deft-venue\"] a[data-action=\"close\"] i').forEach(button => {\n            button.classList.add('bg-danger');\n        });\n        if (this.room) {\n            this.room.getLocalTracks().forEach(track => {\n                track.dispose();\n            });\n        }\n        document.querySelector('body').classList.remove('block_deft_raisehand');\n        Ajax.call([{\n            args: {\n                mute: false,\n                \"status\": true\n            },\n            fail: Notification.exception,\n            methodname: 'block_deft_venue_settings'\n        }]);\n        document.body.dispatchEvent(new CustomEvent('deftaction', { }));\n\n        // Release microphone.\n        clearInterval(this.meterId);\n\n        // Close connections.\n        connection.disconnect();\n\n        document.querySelectorAll('[data-region=\"deft-venue\"] [data-peerid=\"' + this.peerid + '\"]').forEach(venue => {\n            const event = new Event('venueclosed');\n            venue.dispatchEvent(event);\n        });\n\n        window.beforeunload = null;\n\n        this.sendSignals();\n    }\n\n    /**\n     * Subscribe to feed\n     *\n     * @param {int} source Feed to subscribe\n     */\n    subscribeTo(source) {\n        if (!source || !this.videoTracks[source]) {\n            document.querySelectorAll('[data-region=\"deft-venue\"] video').forEach(video => {\n                video.classList.add('hidden');\n            });\n            this.currentFeed = null;\n\n            return;\n        }\n\n        if (this.currentFeed == source) {\n            return;\n        }\n        this.currentFeed = source;\n\n        const track = this.videoTracks[source];\n        document.querySelectorAll('[data-region=\"deft-venue\"] video').forEach(video => {\n            track.attach(video);\n            video.classList.remove('hidden');\n        });\n    }\n}\n"],"names":["domain","connection","MediaManager","VenueManager","constructor","contextid","server","room","userinfo","jwt","peerid","displayedTracks","videoTracks","audioTracks","init","setLogLevel","JitsiMeetJS","logLevels","DEBUG","disconnect","JitsiConnection","serviceUrl","hosts","muc","addEventListener","events","CONNECTION_ESTABLISHED","initJitsiConference","disableSimulcast","conference","TRACK_ADDED","track","onRemoteTrack","TRACK_REMOVED","getType","getParticipantId","dispose","addCommandListener","e","handleMessage","attributes","id","data","message","socket","Socket","this","subscribe","sendSignals","on","CONFERENCE_JOINED","async","createLocalTracks","devices","forEach","replaceTrack","addTrack","monitorVolume","stream","register","document","body","closeConnections","join","handleClick","CONNECTION_DISCONNECTED","window","close","connect","addListeners","startConnection","dispatchEvent","CustomEvent","publish","Ajax","call","args","fail","Notification","exception","methodname","notify","response","handle","Number","plugin","myUserId","session","status","button","target","closest","stopPropagation","preventDefault","dataset","action","audioTrack","constraints","aspectRatio","exact","height","ideal","width","querySelectorAll","classList","add","remove","videoTrack","mute","state","enabled","processSignal","throttled","navigator","onLine","time","Date","now","lastUpdate","setTimeout","lastsignal","messages","done","subscribeTo","feed","settings","peer","clearInterval","meterId","stop","venue","Event","bubbles","getAttribute","peers","includes","querySelector","username","peerAudioPlayer","sendMessage","text","sendCommandOnce","value","children","usernode","Promise","resolve","node","createElement","setAttribute","image","Fragment","loadFragment","appendChild","innerHTML","then","audio","attach","catch","removeEventListener","handleMuteButtons","bind","handleRaiseHand","onbeforeunload","option","type","getLocalTracks","event","beforeunload","source","video","currentFeed"],"mappings":"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"}