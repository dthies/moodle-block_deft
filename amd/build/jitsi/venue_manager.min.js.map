{"version":3,"file":"venue_manager.min.js","sources":["../../src/jitsi/venue_manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/ //\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * Deft response Jitsi integration venue manager\n *\n * @package    block_deft\n * @module     block_deft/jitsi/venue_manager\n * @copyright  2025 Daniel Thies\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nvar domain;\nvar connection;\n\nimport Ajax from \"core/ajax\";\nimport Fragment from 'core/fragment';\nimport JitsiMeetJS from \"block_deft/jitsi/lib-jitsi-meet.min\";\nimport Notification from \"core/notification\";\nimport Socket from \"block_deft/jitsi/socket\";\nimport VenueManager from \"block_deft/venue_manager\";\n\nexport default class MediaManager extends VenueManager {\n    /**\n     * Initialize player plugin\n     *\n     * @param {int} contextid\n     * @param {string} server Jitsi server to use\n     * @param {string} room Room name\n     * @param {object} userinfo User information to pass to meeting\n     * @param {string} jwt JWT authentication token\n     * @param {int} peerid Peer ID\n     *\n     * @returns {bool}\n     */\n    constructor(contextid, server, room, userinfo, jwt, peerid) {\n\n        super(contextid, '', [], '', true, true, 14400, 0, '');\n        this.contextid = contextid;\n        domain = server;\n        this.userinfo = [];\n        this.peerid = peerid;\n        this.displayedTracks = [];\n        this.videoTracks = {};\n        this.audioTracks = {};\n\n        JitsiMeetJS.init();\n        JitsiMeetJS.setLogLevel(JitsiMeetJS.logLevels.DEBUG);\n        if (connection) {\n            connection.disconnect();\n        }\n\n        connection = new JitsiMeetJS.JitsiConnection(null, jwt, {\n            serviceUrl: `https://${ domain }/http-bind`,\n            hosts: {\n                domain: domain,\n                muc: `conference.${ domain }`\n            }\n        });\n        connection.addEventListener(JitsiMeetJS.events.connection.CONNECTION_ESTABLISHED, () => {\n            this.room = connection.initJitsiConference(room, {\n                disableSimulcast: true\n            });\n            this.room.addEventListener(JitsiMeetJS.events.conference.TRACK_ADDED, track => {\n                this.onRemoteTrack(track);\n            });\n            this.room.addEventListener(JitsiMeetJS.events.conference.TRACK_REMOVED, track => {\n                if (track.getType() == 'video') {\n                    this.videoTracks[track.getParticipantId()] = null;\n                } else {\n                    this.audioTracks[track.getParticipantId()] = null;\n                }\n                track.dispose();\n            });\n            this.room.addCommandListener('updateinterface', e => {\n                this.handleMessage(e.attributes.id, {\n                    data: e.attributes.message\n                });\n            });\n\n            this.socket = new Socket(this.room);\n            this.socket.subscribe(() => {\n                this.sendSignals();\n            });\n            this.room.on(JitsiMeetJS.events.conference.CONFERENCE_JOINED, async() => {\n                const tracks = await JitsiMeetJS.createLocalTracks({\n                    devices: ['audio'],\n                });\n                tracks.forEach(track => {\n                    if (this[`${ track.getType() }Track`]) {\n                        this.room.replaceTrack(this[`${ track.getType() }Track`], track);\n                    } else {\n                        this.room.addTrack(track);\n                    }\n                    this[`${ track.getType() }Track`] = track;\n\n                    this.monitorVolume(track.stream);\n                });\n                this.register();\n            });\n\n            document.body.addEventListener(\n                'venueclosed',\n                () => {\n                    this.closeConnections();\n                }\n            );\n\n            this.room.join();\n\n            document.body.addEventListener('click', e => this.handleClick(e));\n        });\n        connection.addEventListener(JitsiMeetJS.events.connection.CONNECTION_DISCONNECTED, () => {\n            window.close();\n        });\n\n        connection.connect();\n\n        this.addListeners();\n    }\n\n    /**\n     * Start to establish the peer connections\n     */\n    startConnection() {\n    }\n\n    /**\n     * Process new remote track\n     *\n     * @param {JitsiTrack} track New track\n     */\n    onRemoteTrack(track) {\n        if (track.getType() == 'video') {\n            this.videoTracks[track.getParticipantId()] = track;\n        } else {\n            this.audioTracks[track.getParticipantId()] = track;\n        }\n        document.body.dispatchEvent(new CustomEvent('deftaction', { }));\n    }\n\n    /**\n     * Change published media in activity\n     *\n     * @param {bool} publish Whether to add or remove media\n     */\n    async publish(publish) {\n        await Ajax.call([{\n            args: {\n                //id: this.room.myUserId(),\n                id: this.peerid,\n                publish: publish,\n                room: 0\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'block_deft_publish_feed'\n        }])[0];\n\n        document.body.dispatchEvent(new CustomEvent('deftaction', { }));\n        this.socket.notify();\n    }\n\n    /**\n     * Register the room\n     *\n     * @return {Promise}\n     */\n    async register() {\n        // Try a registration\n        const response = await Ajax.call([{\n            args: {\n                handle: 0,\n                id: Number(this.peerid),\n                //plugin: pluginHandle.plugin,\n                plugin: this.room.myUserId(),\n                room: 0,\n                session: 0,\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'block_deft_join_room'\n        }])[0];\n\n        if (response.status) {\n        }\n            document.body.dispatchEvent(new CustomEvent('deftaction', { }));\n            this.socket.notify();\n\n        return response;\n    }\n\n    /**\n     * Handle button click\n     *\n     * @param {Event} e Click event\n     */\n    async handleClick(e) {\n        const button = e.target.closest('a[data-action=\"publish\"], a[data-action=\"unpublish\"]');\n\n        if (!button) {\n            return;\n        }\n        e.stopPropagation();\n        e.preventDefault();\n\n        if (button.dataset.action == 'publish') {\n            if (!this.audioTrack) {\n                return;\n            }\n            const tracks = await JitsiMeetJS.createLocalTracks({\n                devices: ['video'],\n                constraints: {aspectRatio: {exact: 1}, height: {ideal: 360}, width: {ideal: 360}}\n            });\n            tracks.forEach(track => {\n                if (this[`${ track.getType() }Track`]) {\n                    this.room.replaceTrack(this[`${ track.getType() }Track`], track);\n                } else {\n                    this.room.addTrack(track);\n                }\n                this[`${ track.getType() }Track`] = track;\n            });\n            this.publish(true);\n            document.querySelectorAll('a[data-action=\"publish\"]').forEach(button => {\n                button.classList.add('hidden');\n            });\n            document.querySelectorAll('a[data-action=\"unpublish\"]').forEach(button => {\n                button.classList.remove('hidden');\n            });\n        } else {\n            document.querySelectorAll('a[data-action=\"publish\"]').forEach(button => {\n                button.classList.remove('hidden');\n            });\n            document.querySelectorAll('a[data-action=\"unpublish\"]').forEach(button => {\n                button.classList.add('hidden');\n            });\n            if (this.videoTrack) {\n                this.videoTrack.dispose();\n                this.videoTrack = null;\n            }\n            this.publish(false);\n        }\n    }\n\n    /**\n     * Change mute status\n     *\n     * @param {bool} state State to be set\n     */\n    mute(state) {\n        if (this.audioTrack) {\n            this.audioTrack.track.enabled = !state;\n        }\n    }\n\n    processSignal() {\n        return;\n    }\n\n    /**\n     * Transfer signals with signal server\n     */\n    sendSignals() {\n\n        if (this.throttled || !navigator.onLine) {\n            return;\n        }\n\n        const time = Date.now();\n        if (this.lastUpdate + 200 > time) {\n            this.throttled = true;\n            setTimeout(() => {\n                this.throttled = false;\n            }, this.lastUpdate + 250 - time);\n            this.sendSignals();\n            return;\n        }\n        this.lastUpdate = time;\n\n        Ajax.call([{\n            args: {\n                contextid: this.contextid,\n                lastsignal: 0,\n                messages: [],\n            },\n            contextid: this.contextid,\n            done: response => {\n                this.subscribeTo(response.feed);\n                response.settings.forEach(peer => {\n                    if (peer.id == Number(this.peerid)) {\n                        if (peer.status) {\n                            // Release microphone.\n                            clearInterval(this.meterId);\n                            if (this.audioTrack) {\n                                this.audioTrack.track.stop();\n                            }\n                            // Close connections.\n                            document.querySelectorAll(\n                                '[data-region=\"deft-venue\"] [data-peerid=\"' + this.peerid\n                                + '\"], [data-region=\"deft-venue\"] [data-action=\"publish\"]'\n                            ).forEach(venue => {\n                                const e = new Event('venueclosed', {bubbles: true});\n                                venue.dispatchEvent(e);\n                            });\n\n                            this.socket.disconnect();\n\n                            this.closeConnections();\n\n                            return;\n                        }\n                        this.mute(peer.mute);\n                    }\n                    document.querySelectorAll(\n                        '[data-peerid=\"' + peer.id + '\"] [data-action=\"mute\"], [data-peerid=\"' + peer.id\n                            + '\"] [data-action=\"unmute\"]'\n                    ).forEach(button => {\n                        if (peer.mute == (button.getAttribute('data-action') == 'mute')) {\n                            button.classList.add('hidden');\n                        } else {\n                            button.classList.remove('hidden');\n                        }\n                    });\n                    if (\n                        !response.peers.includes(Number(peer.id))\n                        && document.querySelector('#deft_audio [data-peerid=\"' + peer.id + '\"]')\n                    ) {\n                        document.querySelector('#deft_audio [data-peerid=\"' + peer.id + '\"]').remove();\n                    }\n                    if (!document.querySelector('#deft_audio [data-peerid=\"' + peer.id + '\"]')\n                        && this.audioTracks[peer.username]\n                        && peer.id != this.peerid\n                    ) {\n                        this.peerAudioPlayer(peer);\n                    }\n                });\n                if (!response.peers.includes(Number(this.peerid))) {\n                    return;\n                }\n                if (response.peers.includes(Number(response.feed))) {\n                } else {\n                }\n            },\n            fail: Notification.exception,\n            methodname: 'block_deft_send_signal'\n        }]);\n    }\n\n    /**\n     * Send a message through data channel to peers\n     *\n     * @param {string} text\n     */\n    sendMessage(text) {\n        if (text) {\n            this.room.sendCommandOnce('updateinterface', {\n                value: 'updateinterface',\n                attributes: {\n                    id: this.peerid,\n                    message: text\n                },\n                children: []\n            });\n        }\n    }\n\n    /**\n     * Return audio player for peer\n     *\n     * @param {object} peer Peer information\n     * @returns {Promise} Resolve to audio player node\n     */\n    peerAudioPlayer(peer) {\n        const usernode = document.querySelector('#deft_audio div[data-peerid=\"' + peer.id + '\"] audio');\n        if (usernode) {\n            return Promise.resolve(usernode);\n        } else {\n            const node = document.createElement('div');\n            node.setAttribute('data-peerid', peer.id);\n            if (document.querySelector('body#page-blocks-deft-venue')) {\n                node.setAttribute('class', 'col col-12 col-sm-6 col-md-4 col-lg-3 p-2');\n            } else {\n                node.setAttribute('class', 'col col-12 col-sm-6 col-md-4 p-2');\n            }\n            window.setTimeout(() => {\n                node.querySelectorAll('img.card-img-top').forEach(image => {\n                    image.setAttribute('height', null);\n                    image.setAttribute('width', null);\n                });\n            });\n            return Fragment.loadFragment(\n                'block_deft',\n                'venue',\n                this.contextid,\n                {\n                    peerid: peer.id\n                }\n            ).done((userinfo) => {\n                if (!document.querySelector('#deft_audio div[data-peerid=\"' + peer.id + '\"] audio')) {\n                    document.querySelector('#deft_audio').appendChild(node);\n                    node.innerHTML = userinfo;\n                }\n            }).then(() => {\n                const audio = document.querySelector('#deft_audio div[data-peerid=\"' + peer.id + '\"] audio');\n                if (audio) {\n                    const track = this.audioTracks[peer.username];\n                    track.attach(audio);\n                }\n                return audio;\n            }).catch(Notification.exception);\n        }\n    }\n\n    /**\n     * Add event listeners\n     */\n    addListeners() {\n\n        document.querySelector('body').removeEventListener('click', this.handleMuteButtons.bind(this));\n        document.querySelector('body').addEventListener('click', this.handleMuteButtons.bind(this));\n\n        document.querySelector('body').removeEventListener('click', this.handleRaiseHand.bind(this));\n        document.querySelector('body').addEventListener('click', this.handleRaiseHand.bind(this));\n\n        document.querySelector('body').removeEventListener('click', this.closeConnections.bind(this));\n        document.querySelector('body').addEventListener('click', this.closeConnections.bind(this));\n\n        window.onbeforeunload = this.closeConnections.bind(this);\n    }\n\n    /**\n     * Handle click for mute\n     *\n     * @param {Event} e Button click\n     */\n    async handleMuteButtons(e) {\n        const button = e.target.closest(\n            'a[data-action=\"mute\"], a[data-action=\"unmute\"]'\n        );\n        if (button) {\n            const action = button.getAttribute('data-action'),\n                peerid = button.closest('[data-peerid]').getAttribute('data-peerid');\n            e.stopPropagation();\n            e.preventDefault();\n            if (peerid == this.peerid) {\n                this.mute(action == 'mute');\n            }\n            await Ajax.call([{\n                args: {\n                    mute: action == 'mute',\n                    peerid: peerid,\n                    \"status\": false\n                },\n                fail: Notification.exception,\n                methodname: 'block_deft_venue_settings'\n            }]);\n            button.closest('[data-peerid]').querySelectorAll('[data-action=\"mute\"], [data-action=\"unmute\"]').forEach(option => {\n                if (option.getAttribute('data-action') == action) {\n                    option.classList.add('hidden');\n                } else {\n                    option.classList.remove('hidden');\n                }\n            });\n            this.socket.notify();\n            document.body.dispatchEvent(new CustomEvent('deftaction', { }));\n        }\n    }\n\n    /**\n     * Shut down gracefully before closing\n     *\n     * @param {Event} e Button click\n     */\n    closeConnections(e) {\n        if (e && e.type == 'click') {\n            const button = e.target.closest('[data-region=\"deft-venue\"] a[data-action=\"close\"]');\n            if (button) {\n                e.stopPropagation();\n                e.preventDefault();\n            } else {\n                return;\n            }\n        }\n        document.querySelectorAll('[data-region=\"deft-venue\"] a[data-action=\"close\"] i').forEach(button => {\n            button.classList.add('bg-danger');\n        });\n        if (this.room) {\n            this.room.getLocalTracks().forEach(track => {\n                track.dispose();\n            });\n        }\n        document.querySelector('body').classList.remove('block_deft_raisehand');\n        Ajax.call([{\n            args: {\n                mute: false,\n                \"status\": true\n            },\n            fail: Notification.exception,\n            methodname: 'block_deft_venue_settings'\n        }]);\n        document.body.dispatchEvent(new CustomEvent('deftaction', { }));\n\n        // Release microphone.\n        clearInterval(this.meterId);\n\n        // Close connections.\n        connection.disconnect();\n\n        document.querySelectorAll('[data-region=\"deft-venue\"] [data-peerid=\"' + this.peerid + '\"]').forEach(venue => {\n            const event = new Event('venueclosed');\n            venue.dispatchEvent(event);\n        });\n\n        window.beforeunload = null;\n\n        this.sendSignals();\n    }\n\n    /**\n     * Subscribe to feed\n     *\n     * @param {int} source Feed to subscribe\n     */\n    subscribeTo(source) {\n        if (!source || !this.videoTracks[source]) {\n            document.querySelectorAll('[data-region=\"deft-venue\"] video').forEach(video => {\n                video.classList.add('hidden');\n            });\n            this.currentFeed = null;\n\n            return;\n        }\n\n        if (this.currentFeed == source) {\n            return;\n        }\n        this.currentFeed = source;\n\n        const track = this.videoTracks[source];\n        document.querySelectorAll('[data-region=\"deft-venue\"] video').forEach(video => {\n            track.attach(video);\n            video.classList.remove('hidden');\n        });\n    }\n}\n"],"names":["_interopRequireDefault","e","__esModule","default","domain","connection","_ajax","_fragment","_libJitsiMeet","_notification","_socket","_venue_manager","MediaManager","VenueManager","constructor","contextid","server","room","userinfo","jwt","peerid","super","this","displayedTracks","videoTracks","audioTracks","JitsiMeetJS","init","setLogLevel","logLevels","DEBUG","disconnect","JitsiConnection","serviceUrl","hosts","muc","addEventListener","events","CONNECTION_ESTABLISHED","initJitsiConference","disableSimulcast","conference","TRACK_ADDED","track","onRemoteTrack","TRACK_REMOVED","getType","getParticipantId","dispose","addCommandListener","handleMessage","attributes","id","data","message","socket","Socket","subscribe","sendSignals","on","CONFERENCE_JOINED","async","createLocalTracks","devices","forEach","replaceTrack","addTrack","monitorVolume","stream","register","document","body","closeConnections","join","handleClick","CONNECTION_DISCONNECTED","window","close","connect","addListeners","startConnection","dispatchEvent","CustomEvent","publish","Ajax","call","args","fail","Notification","exception","methodname","notify","response","handle","Number","plugin","myUserId","session","status","button","target","closest","stopPropagation","preventDefault","dataset","action","audioTrack","constraints","aspectRatio","exact","height","ideal","width","querySelectorAll","classList","add","remove","videoTrack","mute","state","enabled","processSignal","throttled","navigator","onLine","time","Date","now","lastUpdate","setTimeout","lastsignal","messages","done","subscribeTo","feed","settings","peer","clearInterval","meterId","stop","venue","Event","bubbles","getAttribute","peers","includes","querySelector","username","peerAudioPlayer","sendMessage","text","sendCommandOnce","value","children","usernode","Promise","resolve","node","createElement","setAttribute","image","Fragment","loadFragment","appendChild","innerHTML","then","audio","attach","catch","removeEventListener","handleMuteButtons","bind","handleRaiseHand","onbeforeunload","option","type","getLocalTracks","event","beforeunload","source","video","currentFeed","_exports"],"mappings":"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"}