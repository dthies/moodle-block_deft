{"version":3,"file":"socket.min.js","sources":["../../src/jitsi/socket.js"],"sourcesContent":["/*\n * Open and maintain a WebSocket to recieve messages from server.\n *\n * @package    block_deft\n * @module     block_deft/socket\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport Log from \"core/log\";\nimport Notification from \"core/notification\";\n\nexport class Socket {\n    /**\n     * Listen for messages and refresh content\n     *\n     * @param {JitsiConferenceRoom} room Jitsi room\n     */\n    constructor(room) {\n        this.room = room;\n        this.listeners = [];\n    }\n\n    /**\n     * Disconnect socket\n     *\n     * @returns {object}\n     * @chainable\n     */\n    disconnect() {\n        this.disconnected = true;\n        this.connection.disconnect();\n\n        return this;\n    }\n\n    notify() {\n        this.room.sendCommandOnce('message', {});\n    }\n\n    /**\n     * Subscribe listener\n     *\n     * @param {function} callback\n     * @returns {object}\n     * @chainable\n     */\n    subscribe(callback) {\n        this.room.addCommandListener('message', callback);\n        this.listeners.push(callback);\n\n        return this;\n    }\n\n    /**\n     * Renew token\n     *\n     * @param {int} contextid Context id of block\n     */\n    renewToken(contextid) {\n        Ajax.call([{\n            methodname: 'block_deft_renew_token',\n            args: {contextid: contextid},\n            done: (replacement) => {\n                Log.debug('Reconnecting');\n                this.connect(contextid, replacement.token);\n            },\n            fail: Notification.exception\n        }]);\n    }\n\n    /**\n     * Connect to service\n     *\n     * @param {int} contextid Context id of block\n     * @param {string} token Authentication token to connect service\n     * @returns {object}\n     * @chainable\n     */\n    connect(contextid, token) {\n        Log.debug(token);\n        return this;\n    }\n}\n\nexport default Socket;\n"],"names":["_interopRequireDefault","e","__esModule","default","_ajax","_log","_notification","Socket","constructor","room","this","listeners","disconnect","disconnected","connection","notify","sendCommandOnce","subscribe","callback","addCommandListener","push","renewToken","contextid","Ajax","call","methodname","args","done","replacement","Log","debug","connect","token","fail","Notification","exception","_exports","_default"],"mappings":"oIAW6C,SAAAA,uBAAAC,GAAAA,OAAAA,GAAAA,EAAAC,WAAAD,EAAAE,CAAAA,QAAAF,EAAA;;;;;;;;qGAF7CG,MAAAJ,uBAAAI,OACAC,KAAAL,uBAAAK,MACAC,cAAAN,uBAAAM,eAEO,MAAMC,OAMTC,WAAAA,CAAYC,MACRC,KAAKD,KAAOA,KACZC,KAAKC,UAAY,EACrB,CAQAC,UAAAA,GAII,OAHAF,KAAKG,cAAe,EACpBH,KAAKI,WAAWF,aAETF,IACX,CAEAK,MAAAA,GACIL,KAAKD,KAAKO,gBAAgB,UAAW,CAAE,EAC3C,CASAC,SAAAA,CAAUC,UAIN,OAHAR,KAAKD,KAAKU,mBAAmB,UAAWD,UACxCR,KAAKC,UAAUS,KAAKF,UAEbR,IACX,CAOAW,UAAAA,CAAWC,WACPC,MAAIpB,QAACqB,KAAK,CAAC,CACPC,WAAY,yBACZC,KAAM,CAACJ,UAAWA,WAClBK,KAAOC,cACHC,KAAAA,QAAIC,MAAM,gBACVpB,KAAKqB,QAAQT,UAAWM,YAAYI,QAExCC,KAAMC,sBAAaC,YAE3B,CAUAJ,OAAAA,CAAQT,UAAWU,OAEf,OADAH,KAAAA,QAAIC,MAAME,OACHtB,IACX,EACH0B,SAAA7B,OAAAA,OAAA,IAAA8B,SAEc9B,OAAM,OAAA6B,SAAAjC,QAAAkC,SAAAD,SAAAjC,OAAA"}