{"version":3,"file":"socket.min.js","sources":["../../src/jitsi/socket.js"],"sourcesContent":["/*\n * Open and maintain a WebSocket to recieve messages from server.\n *\n * @package    block_deft\n * @module     block_deft/socket\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport Log from \"core/log\";\nimport Notification from \"core/notification\";\n\nexport class Socket {\n    /**\n     * Listen for messages and refresh content\n     *\n     * @param {JitsiConferenceRoom} room Jitsi room\n     */\n    constructor(room) {\n        this.room = room;\n        this.listeners = [];\n    }\n\n    /**\n     * Disconnect socket\n     *\n     * @returns {object}\n     * @chainable\n     */\n    disconnect() {\n        this.disconnected = true;\n        this.connection.disconnect();\n\n        return this;\n    }\n\n    notify() {\n        this.room.sendCommandOnce('message', {});\n    }\n\n    /**\n     * Subscribe listener\n     *\n     * @param {function} callback\n     * @returns {object}\n     * @chainable\n     */\n    subscribe(callback) {\n        this.room.addCommandListener('message', callback);\n        this.listeners.push(callback);\n\n        return this;\n    }\n\n    /**\n     * Renew token\n     *\n     * @param {int} contextid Context id of block\n     */\n    renewToken(contextid) {\n        Ajax.call([{\n            methodname: 'block_deft_renew_token',\n            args: {contextid: contextid},\n            done: (replacement) => {\n                Log.debug('Reconnecting');\n                this.connect(contextid, replacement.token);\n            },\n            fail: Notification.exception\n        }]);\n    }\n\n    /**\n     * Connect to service\n     *\n     * @param {int} contextid Context id of block\n     * @param {string} token Authentication token to connect service\n     * @returns {object}\n     * @chainable\n     */\n    connect(contextid, token) {\n        Log.debug(token);\n        return this;\n    }\n}\n\nexport default Socket;\n"],"names":["Socket","constructor","room","listeners","disconnect","disconnected","connection","this","notify","sendCommandOnce","subscribe","callback","addCommandListener","push","renewToken","contextid","call","methodname","args","done","replacement","debug","connect","token","fail","Notification","exception"],"mappings":";;;;;;;;qOAaaA,OAMTC,YAAYC,WACHA,KAAOA,UACPC,UAAY,GASrBC,yBACSC,cAAe,OACfC,WAAWF,aAETG,KAGXC,cACSN,KAAKO,gBAAgB,UAAW,IAUzCC,UAAUC,sBACDT,KAAKU,mBAAmB,UAAWD,eACnCR,UAAUU,KAAKF,UAEbJ,KAQXO,WAAWC,yBACFC,KAAK,CAAC,CACPC,WAAY,yBACZC,KAAM,CAACH,UAAWA,WAClBI,KAAOC,2BACCC,MAAM,qBACLC,QAAQP,UAAWK,YAAYG,QAExCC,KAAMC,sBAAaC,aAY3BJ,QAAQP,UAAWQ,2BACXF,MAAME,OACHhB,0CAIAP"}