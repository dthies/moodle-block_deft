{"version":3,"file":"socket.min.js","sources":["../../src/jitsi/socket.js"],"sourcesContent":["/*\n * Open and maintain a WebSocket to recieve messages from server.\n *\n * @package    block_deft\n * @module     block_deft/socket\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport Log from \"core/log\";\nimport Notification from \"core/notification\";\n\nexport class Socket {\n    /**\n     * Listen for messages and refresh content\n     *\n     * @param {JitsiConferenceRoom} room Jitsi room\n     */\n    constructor(room) {\n        this.room = room;\n        this.listeners = [];\n    }\n\n    /**\n     * Connect to service\n     *\n     * @param {int} contextid Context id of block\n     * @param {string} token Authentication token to connect service\n     * @returns {object}\n     * @chainable\n     */\n    connect(contextid, token) {\n        this.websocket = new WebSocket('wss://deftly.us/ws');\n        this.websocket.onopen = (e) => {\n            this.websocket.send(token);\n            this.listeners.forEach((callback) => {\n                this.websocket.addCommandListener('message', callback);\n                callback.apply(this, [e]);\n            });\n        };\n\n        this.websocket.addEventListener('close', (e) => {\n            Log.debug('Disconnected');\n            if (this.disconnected) {\n                return this;\n            } else if (e.code == 1011) {\n                Log.debug('Authentication failed');\n                this.renewToken(contextid);\n            } else {\n                setTimeout(() => {\n                    Log.debug('Reconnecting');\n                    this.connect(contextid, token);\n                }, 5000);\n            }\n\n            return true;\n        });\n\n        return this;\n    }\n\n    /**\n     * Disconnect socket\n     *\n     * @returns {object}\n     * @chainable\n     */\n    disconnect() {\n        this.disconnected = true;\n        //this.websocket.close();\n\n        return this;\n    }\n\n    notify() {\n        this.room.sendCommandOnce('message', {});\n    }\n\n    /**\n     * Subscribe listener\n     *\n     * @param {function} callback\n     * @returns {object}\n     * @chainable\n     */\n    subscribe(callback) {\n        this.room.addCommandListener('message', callback);\n        this.listeners.push(callback);\n\n        return this;\n    }\n\n    /**\n     * Renew token\n     *\n     * @param {int} contextid Context id of block\n     */\n    renewToken(contextid) {\n        Ajax.call([{\n            methodname: 'block_deft_renew_token',\n            args: {contextid: contextid},\n            done: (replacement) => {\n                Log.debug('Reconnecting');\n                this.connect(contextid, replacement.token);\n            },\n            fail: Notification.exception\n        }]);\n    }\n}\n\nexport default Socket;\n"],"names":["Socket","constructor","room","listeners","connect","contextid","token","websocket","WebSocket","onopen","e","send","forEach","callback","addCommandListener","apply","this","addEventListener","debug","disconnected","code","renewToken","setTimeout","disconnect","notify","sendCommandOnce","subscribe","push","call","methodname","args","done","replacement","fail","Notification","exception"],"mappings":";;;;;;;;qOAaaA,OAMTC,YAAYC,WACHA,KAAOA,UACPC,UAAY,GAWrBC,QAAQC,UAAWC,mBACVC,UAAY,IAAIC,UAAU,2BAC1BD,UAAUE,OAAUC,SAChBH,UAAUI,KAAKL,YACfH,UAAUS,SAASC,gBACfN,UAAUO,mBAAmB,UAAWD,UAC7CA,SAASE,MAAMC,KAAM,CAACN,aAIzBH,UAAUU,iBAAiB,SAAUP,iBAClCQ,MAAM,gBACNF,KAAKG,aACEH,MACU,MAAVN,EAAEU,mBACLF,MAAM,8BACLG,WAAWhB,YAEhBiB,YAAW,kBACHJ,MAAM,qBACLd,QAAQC,UAAWC,SACzB,MAGA,MAGJU,KASXO,yBACSJ,cAAe,EAGbH,KAGXQ,cACStB,KAAKuB,gBAAgB,UAAW,IAUzCC,UAAUb,sBACDX,KAAKY,mBAAmB,UAAWD,eACnCV,UAAUwB,KAAKd,UAEbG,KAQXK,WAAWhB,yBACFuB,KAAK,CAAC,CACPC,WAAY,yBACZC,KAAM,CAACzB,UAAWA,WAClB0B,KAAOC,2BACCd,MAAM,qBACLd,QAAQC,UAAW2B,YAAY1B,QAExC2B,KAAMC,sBAAaC,kDAKhBnC"}