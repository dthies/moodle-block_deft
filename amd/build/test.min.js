define("block_deft/test",["exports","core/ajax","core/fragment","core/log","core/notification","block_deft/socket","core/str","core/toast"],(function(_exports,_ajax,_fragment,_log,_notification,_socket,_str,Toast){function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/*
   * Test the connection with message service
   *
   * @package    block_deft
   * @module     block_deft/test
   * @copyright  2022 Daniel Thies <dethies@gmail.com>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_ajax=_interopRequireDefault(_ajax),_fragment=_interopRequireDefault(_fragment),_log=_interopRequireDefault(_log),_notification=_interopRequireDefault(_notification),_socket=_interopRequireDefault(_socket),Toast=function(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}(Toast);var _default={init:function(contextid){_log.default.debug("Requesting token"),_ajax.default.call([{methodname:"block_deft_renew_token",args:{contextid:contextid},done:token=>{const socket=new _socket.default(contextid,token.token);(0,_str.get_string)("authorizationreceived","block_deft").done((message=>{Toast.add(message,{type:"info"})})),socket.subscribe((e=>{"message"===e.type&&(0,_str.get_string)("messagereceived","block_deft").done((message=>{Toast.add(message,{type:"success"})}))})),setTimeout((()=>{_fragment.default.loadFragment("block_deft","test",contextid,{}).done((message=>{Toast.add(message,{type:"info"})})).fail(_notification.default.exception)}),500)},fail:_notification.default.exception}])}};return _exports.default=_default,_exports.default}));

//# sourceMappingURL=test.min.js.map