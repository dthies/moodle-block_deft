define("block_deft/refresh",["exports","core/fragment","core/log","block_deft/socket","core/templates"],(function(_exports,_fragment,_log,_socket,_templates){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/*
   * Refresh content when changed on the system
   *
   * @package    block_deft
   * @module     block_deft/refresh
   * @copyright  2022 Daniel Thies <dethies@gmail.com>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_fragment=_interopRequireDefault(_fragment),_log=_interopRequireDefault(_log),_socket=_interopRequireDefault(_socket),_templates=_interopRequireDefault(_templates);return _exports.default=class{constructor(contextid,selector,token,throttle){if(!token)return;this.contextid=contextid,this.selector=selector,this.throttle=throttle,this.throttled=!1,this.lastupdate=0,new _socket.default(contextid,token).subscribe((()=>{this.update()}))}update(){let content=document.querySelector(this.selector).parentNode,component=content.closest("[data-component]")&&content.closest("[data-component]").getAttribute("data-component")||"block_deft",data={};content&&(this.lastupdate+this.throttle>Date.now()||document.activeElement.closest(this.selector)&&document.activeElement.closest("select")?(!this.throttled||this.lastupdate+this.throttle<Date.now())&&(setTimeout((()=>{this.update()}),Math.max(this.lastupdate+this.throttle-Date.now(),40)),this.throttled=!0):(document.querySelector(this.selector).querySelectorAll('[data-type="comments"] .block_deft_comments.expanded').forEach((opencomments=>{data.opencomments=data.opencomments||[],data.opencomments.push(opencomments.closest("[data-task]").getAttribute("data-task"))})),document.querySelector(this.selector).closest("[data-modified]")&&(data.lastmodified=document.querySelector(this.selector).closest("[data-modified]").getAttribute("data-modified")),_fragment.default.loadFragment(component,"content",this.contextid,{jsondata:JSON.stringify(data)}).done(((html,js)=>{html&&this.replace(content,html,js)})).catch(_log.default.debug),this.throttled=!1,this.lastupdate=Date.now()))}replace(content,html,js){let setScroll=()=>!0,setHeight=()=>!0;content.style.height=content.offsetHeight,setTimeout((()=>{content.style.height=null})),content.querySelectorAll(".block_deft_comments").forEach((comments=>{const position=comments.scrollTop,task=comments.closest("[data-task]").getAttribute("data-task"),recurse=setScroll;_log.default.debug(position),setScroll=()=>{content.querySelectorAll('[data-task="'+task+'"]').forEach((task=>{task.querySelector(".block_deft_comments").scrollTop=position,_log.default.debug(task.querySelector(".block_deft_comments")),_log.default.debug(position)})),recurse()}})),content.querySelectorAll("[data-summary]").forEach((summary=>{const height=summary.offsetHeight,task=summary.getAttribute("data-summary"),recurse=setHeight;setHeight=()=>{content.querySelectorAll('[data-summary="'+task+'"]').forEach((summary=>{summary.setAttribute("style","min-height: "+height+"px;")})),recurse()}})),_templates.default.replaceNodeContents(content,html,js),setScroll(),setHeight()}},_exports.default}));

//# sourceMappingURL=refresh.min.js.map