{"version":3,"file":"publish.min.js","sources":["../src/publish.js"],"sourcesContent":["/**\n * Manage venue connections\n *\n * @module     block_deft/venue_manager\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport adapter from \"core/adapter\";\nimport Ajax from \"core/ajax\";\nimport Janus from 'block_deft/janus-gateway';\nimport Log from \"core/log\";\nimport Notification from \"core/notification\";\n\nexport default class Publish {\n\n    /**\n     * Listen for comment actions\n     *\n     * @param {int} contextid Context id of block\n     * @param {array} iceServers ICE server array to configure peers\n     * @param {int} roomid\n     * @param {string} server\n     * @param {int} peerid\n     */\n    constructor(\n        contextid, iceServers, roomid, server, peerid\n    ) {\n        this.contextid = contextid;\n        this.iceServers = iceServers;\n        this.roomid = roomid;\n        this.server = server;\n        this.peerid = peerid;\n\n        window.adapter = adapter;\n\n        this.ptype = 'publish';\n\n        document.querySelector('body').removeEventListener('venueclosed', this.handleClose.bind(this));\n        document.querySelector('body').addEventListener('venueclosed', this.handleClose.bind(this));\n    }\n\n    /**\n     * Start to establish the peer connections\n     */\n    startConnection() {\n\n        // Initialize the library (all console debuggers enabled)\n        Janus.init({\n            debug: \"all\", callback: () => {\n                // Create session.\n                this.janus = new Janus(\n                    {\n                        server: this.server,\n                        iceServers: this.iceServers,\n                        success: () => {\n                            // Attach to video room test plugin\n                            this.attach();\n                        },\n                        error: (error) => {\n                            this.restart = true;\n                            Log.debug(error);\n                        }\n                    }\n                );\n                document.querySelector('body').addEventListener('venueclosed', this.janus.destroy);\n            }\n        });\n    }\n\n    /**\n     * Register the room\n     *\n     * @param {object} pluginHandle\n     * @return {Promise}\n     */\n    register(pluginHandle) {\n        // Try a registration\n        return Ajax.call([{\n            args: {\n                handle: pluginHandle.getId(),\n                id: Number(this.peerid),\n                plugin: pluginHandle.plugin,\n                room: this.roomid,\n                ptype: this.ptype == 'publish',\n                session: pluginHandle.session.getSessionId()\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'block_deft_join_room'\n        }])[0].then(response => {\n            if (pluginHandle.plugin == 'janus.plugin.videoroom') {\n                this.feed = response.id;\n            }\n\n            return response;\n        }).catch(Notification.exception);\n    }\n\n    onLocalTrack(track, on) {\n        Log.debug(on);\n        return;\n    }\n\n    onRemoteTrack() {\n        return;\n    }\n\n    onAttached(publishers) {\n        Log.debug(publishers);\n    }\n\n    /**\n     * Handle Janus plugin message\n     *\n     * @param {String} msg message\n     * @param {String} jsep negotiation\n     */\n    onMessage(msg, jsep) {\n        Janus.debug(\" ::: Got a message :::\", msg);\n        const event = msg.videoroom;\n        Janus.debug(\"Event: \" + event);\n        switch (event) {\n            case 'joined':\n                // Successfully joined, negotiate WebRTC now\n                if (msg.id) {\n                    Log.debug(\"Successfully joined room \" + msg.room + \" with ID \" + this.feed);\n                    if (!this.webrtcUp) {\n                        this.webrtcUp = true;\n                        this.processStream([{type: 'data'}]);\n                    }\n                }\n                break;\n            case 'destroyed':\n                // The room has been destroyed\n                Janus.warn(\"The room has been destroyed!\");\n                Notification.alert('', \"The room has been destroyed\");\n                break;\n            case 'event':\n                if (msg.configured) {\n                    this.videoroom.webrtcStuff.pc.removeEventListener(\n                        'iceconnectionstatechange',\n                        this.publishFeed.bind(this)\n                    );\n                    this.videoroom.webrtcStuff.pc.addEventListener(\n                        'iceconnectionstatechange',\n                        this.publishFeed.bind(this)\n                    );\n                    setTimeout(this.publishFeed.bind(this));\n                } else if (msg.error) {\n                    if (msg.error_code === 485) {\n                        // This is a \"no such room\" error: give a more meaningful description\n                        Notification.alert(\n                            \"<p>Apparently room <code>\" + this.roomid + \"</code> (the one this demo uses as a test room) \" +\n                            \"does not exist...</p><p>Do you have an updated <code>janus.plugin.audiobridge.jcfg</code> \" +\n                            \"configuration file? If not, make sure you copy the details of room <code>\" + this.roomid + \"</code> \" +\n                            \"from that sample in your current configuration file, then restart Janus and try again.\"\n                        );\n                    } else if (msg.error_code === 435) {\n                        Log.debug(msg.error);\n                    } else {\n                        Notification.alert(msg.error_code, msg.error);\n                    }\n                    return;\n                } else {\n                    Log.debug(Object.keys(msg));\n                }\n                break;\n        }\n        if (jsep) {\n            Janus.debug(\"Handling SDP as well...\", jsep);\n            this.videoroom.handleRemoteJsep({jsep: jsep});\n        }\n    }\n\n    /**\n     * Handle click of button\n     *\n     * @param {Event} e\n     * @returns {Bool}\n     */\n    handleClick(e) {\n        const button = e.target.closest(\n            '[data-contextid=\"' + this.contextid + '\"][data-action=\"publish\"],  [data-contextid=\"'\n                + this.contextid + '\"][data-action=\"unpublish\"]'\n        );\n        if (button) {\n            const action = button.getAttribute('data-action'),\n                type = button.getAttribute('data-type');\n            e.stopPropagation();\n            e.preventDefault();\n            document.querySelectorAll(\n                '[data-region=\"deft-venue\"] [data-action=\"publish\"],  [data-region=\"deft-venue\"] [data-action=\"unpublish\"]'\n            ).forEach(button => {\n                if ((button.getAttribute('data-action') == action) && (button.getAttribute('data-type') == type)) {\n                    button.classList.add('hidden');\n                } else {\n                    button.classList.remove('hidden');\n                }\n            });\n            switch (action) {\n                case 'publish':\n                    if (type == 'display') {\n                        this.shareDisplay();\n                    } else {\n                        this.shareCamera();\n                    }\n\n                    this.processStream([]);\n                    break;\n                case 'unpublish':\n                    if (this.videoInput) {\n                        this.videoInput.then(videoStream => {\n                            if (videoStream) {\n                                videoStream.getTracks().forEach(track => {\n                                    track.stop();\n                                });\n                            }\n                            this.videoInput = null;\n\n                            return videoStream;\n                        }).catch(Notification.exception);\n                    }\n                    this.unpublish();\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Handle close of windoww\n     */\n    handleClose() {\n        if (this.videoInput) {\n            this.videoInput.then(videoStream => {\n                if (videoStream) {\n                    videoStream.getTracks().forEach(track => {\n                        track.stop();\n                    });\n                }\n                return videoStream;\n            }).catch(Notification.exception);\n        }\n\n        this.janus.destroy();\n\n        document.querySelectorAll(\n            '[data-region=\"deft-venue\"] [data-action=\"publish\"]'\n        ).forEach(button => {\n            button.classList.remove('hidden');\n        });\n        document.querySelectorAll(\n            '[data-region=\"deft-venue\"] [data-action=\"unpublish\"]'\n        ).forEach(button => {\n            button.classList.add('hidden');\n        });\n    }\n\n    /**\n     * Stop stream\n     *\n     * @param {Promise|null} input Stream request\n     */\n    stopStream(input) {\n        if (input) {\n            input.then(videoStream => {\n                if (videoStream) {\n                    videoStream.getTracks().forEach(track => {\n                        track.stop();\n                    });\n                }\n\n                return videoStream;\n            }).catch(Notification.exception);\n        }\n    }\n\n    /**\n     * Set video source to user camera\n     */\n    shareCamera() {\n        const videoInput = this.videoInput;\n\n        this.videoInput = navigator.mediaDevices.getUserMedia({\n            video: true,\n            audio: false\n        }).then(videoStream => {\n            this.stopStream(videoInput);\n\n            this.deviceType = 'camera';\n\n            return videoStream;\n        }).catch((e) => {\n            Log.debug(e);\n\n            return videoInput;\n        });\n    }\n\n    /**\n     * Set video source to display surface\n     */\n    shareDisplay() {\n        const videoInput = this.videoInput || Promise.resolve(null);\n\n        this.videoInput = navigator.mediaDevices.getDisplayMedia({\n            video: true,\n            audio: true,\n        }).then(videoStream => {\n            this.stopStream(videoInput);\n            this.deviceType = 'display';\n\n            return videoStream;\n        }).catch(() => {\n            return videoInput;\n        });\n    }\n\n    /**\n     * Publish current video feed\n     *\n     * @returns {Promise}\n     */\n    publishFeed() {\n        if (\n            this.videoroom.webrtcStuff.pc\n            && this.videoroom.webrtcStuff.pc.iceConnectionState == 'connected'\n        ) {\n                return Ajax.call([{\n                    args: {\n                        id: Number(this.peerid),\n                        room: this.roomid,\n                    },\n                    contextid: this.contextid,\n                    fail: Notification.exception,\n                    methodname: 'block_deft_publish_feed'\n                }])[0].then((result) => {\n                    setTimeout(() => {\n                        this.videoroom.webrtcStuff.pc.getTransceivers().forEach(transceiver => {\n                            const sender = transceiver.sender;\n                            if (\n                                sender.track\n                                && this.selectedTrack\n                                && (sender.track.id == this.selectedTrack.id)\n                            ) {\n                                const message = JSON.stringify({\n                                    feed: this.feed,\n                                    mid: transceiver.mid\n                                });\n                                this.videoroom.data({\n                                    text: message,\n                                    error: Log.debug\n                                });\n                            }\n                        });\n                    });\n\n                    return result;\n                }).catch(Notification.exception);\n        }\n\n        return Promise.resolve(null);\n    }\n\n    /**\n     * Stop video feed\n     *\n     * @param {string} kind Track type\n     * @returns {RTCTransceivr}\n     */\n    getTransceiver(kind) {\n        let result = null;\n\n        if (\n            this.videoroom.webrtcStuff.pc\n            && this.videoroom.webrtcStuff.pc.iceConnectionState == 'connected'\n        ) {\n            this.videoroom.webrtcStuff.pc.getTransceivers().forEach(transceiver => {\n                const sender = transceiver.sender;\n                if (\n                    sender.track\n                    && sender.track.id\n                    && (sender.track.kind == (kind || 'video'))\n                ) {\n                    result = transceiver;\n                }\n            });\n        }\n\n        return result;\n    }\n\n    /**\n     * Stop video feed\n     *\n     * @returns {Promise}\n     */\n    unpublish() {\n        document.querySelectorAll(\n            '[data-region=\"deft-venue\"] [data-action=\"publish\"]'\n        ).forEach(button => {\n            button.classList.remove('hidden');\n        });\n        document.querySelectorAll(\n            '[data-region=\"deft-venue\"] [data-action=\"unpublish\"]'\n        ).forEach(button => {\n            button.classList.add('hidden');\n        });\n        return Ajax.call([{\n            args: {\n                id: Number(this.feed),\n                publish: false,\n                room: this.roomid\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'block_deft_publish_feed'\n        }])[0];\n    }\n\n    /**\n     * Attach video plugin\n     */\n    attach() {\n        this.janus.attach(\n            {\n                plugin: \"janus.plugin.videoroom\",\n                opaqueId: \"videoroom-\" + Janus.randomString(12),\n                success: pluginHandle => {\n                    this.videoroom = pluginHandle;\n                    this.register(pluginHandle);\n                },\n                error: function(error) {\n                    Janus.error(\"  -- Error attaching plugin...\", error);\n                    Notification.alert('', \"Error attaching plugin... \" + error);\n                },\n                ondata: (data) => {\n                    const message = JSON.parse(data);\n                    if (message && message.feed) {\n                        const publish = {\n                            request: 'update',\n                            subscribe: [{\n                                feed: message.feed,\n                                mid: message.mid,\n                            }]\n                        };\n                        this.videoroom.send({\n                            message: publish\n                        });\n                    }\n                },\n                onlocaltrack: this.onLocalTrack.bind(this),\n                onremotetrack: this.onRemoteTrack.bind(this),\n                onmessage: this.onMessage.bind(this)\n            }\n        );\n    }\n\n    /**\n     * Find track changes and begin negotiation\n     *\n     * @param {array} tracks Additonal tracks\n     */\n    processStream(tracks) {\n        this.videoInput.then(videoStream => {\n            document.querySelectorAll(\n                '[data-region=\"deft-venue\"] [data-action=\"publish\"],  [data-region=\"deft-venue\"] [data-action=\"unpublish\"]'\n            ).forEach(button => {\n                if (this.deviceType) {\n                    if (\n                        (button.getAttribute('data-action') == 'unpublish')\n                        || (button.getAttribute('data-type') !== this.deviceType)\n                    ) {\n                        button.classList.remove('hidden');\n                    } else {\n                        button.classList.add('hidden');\n                    }\n                } else {\n                    if (button.getAttribute('data-action') == 'unpublish') {\n                        button.classList.add('hidden');\n                    } else {\n                        button.classList.remove('hidden');\n                    }\n                }\n            });\n\n            if (videoStream && (this.currentStream !== videoStream)) {\n                const transceiver = this.getTransceiver();\n                this.currentStream = videoStream;\n                videoStream.getVideoTracks().forEach(track => {\n                    track.addEventListener('ended', () => {\n                        if (this.selectedTrack.id == track.id) {\n                            this.unpublish();\n                        }\n                    });\n                    if (transceiver) {\n                        this.videoroom.replaceTracks({\n                            tracks: [{\n                                type: 'video',\n                                mid: transceiver.mid,\n                                capture: track\n                            }],\n                            error: Notification.exception\n                        });\n\n                        this.selectedTrack = track;\n                        return;\n                    }\n                    tracks.push({\n                        type: 'video',\n                        capture: track,\n                        recv: false\n                    });\n                    this.selectedTrack = track;\n                });\n                if (!tracks.length) {\n                    return videoStream;\n                }\n                this.videoroom.createOffer({\n                    tracks: tracks,\n                    success: (jsep) => {\n                        Janus.debug(\"Got SDP!\", jsep);\n                        const publish = {\n                            request: \"configure\",\n                            video: true,\n                            audio: false\n                        };\n                        this.videoroom.send({\n                            message: publish,\n                            jsep: jsep\n                        });\n                    },\n                    error: function(error) {\n                        Janus.error(\"WebRTC error:\", error);\n                        Notification.alert(\"WebRTC error... \", error.message);\n                    }\n                });\n            }\n\n            return videoStream;\n        }).catch(Notification.exception);\n    }\n}\n"],"names":["_interopRequireDefault","e","__esModule","default","_adapter","_ajax","_janusGateway","_log","_notification","_exports","constructor","contextid","iceServers","roomid","server","peerid","this","window","adapter","ptype","document","querySelector","removeEventListener","handleClose","bind","addEventListener","startConnection","Janus","init","debug","callback","janus","success","attach","error","restart","Log","destroy","register","pluginHandle","Ajax","call","args","handle","getId","id","Number","plugin","room","session","getSessionId","fail","Notification","exception","methodname","then","response","feed","catch","onLocalTrack","track","on","onRemoteTrack","onAttached","publishers","onMessage","msg","jsep","event","videoroom","webrtcUp","processStream","type","warn","alert","configured","webrtcStuff","pc","publishFeed","setTimeout","error_code","Object","keys","handleRemoteJsep","handleClick","button","target","closest","action","getAttribute","stopPropagation","preventDefault","querySelectorAll","forEach","classList","add","remove","shareDisplay","shareCamera","videoInput","videoStream","getTracks","stop","unpublish","stopStream","input","navigator","mediaDevices","getUserMedia","video","audio","deviceType","Promise","resolve","getDisplayMedia","iceConnectionState","result","getTransceivers","transceiver","sender","selectedTrack","message","JSON","stringify","mid","data","text","getTransceiver","kind","publish","opaqueId","randomString","ondata","parse","request","subscribe","send","onlocaltrack","onremotetrack","onmessage","tracks","currentStream","getVideoTracks","replaceTracks","capture","push","recv","length","createOffer"],"mappings":"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"}