{"version":3,"file":"publish.min.js","sources":["../src/publish.js"],"sourcesContent":["/**\n * Manage venue connections\n *\n * @module     block_deft/venue_manager\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport adapter from \"core/adapter\";\nimport Ajax from \"core/ajax\";\nimport Janus from 'block_deft/janus-gateway';\nimport Log from \"core/log\";\nimport Notification from \"core/notification\";\n\nexport default class Publish {\n\n    /**\n     * Listen for comment actions\n     *\n     * @param {int} contextid Context id of block\n     * @param {array} iceServers ICE server array to configure peers\n     * @param {int} roomid\n     * @param {string} server\n     * @param {int} peerid\n     */\n    constructor(\n        contextid, iceServers, roomid, server, peerid\n    ) {\n        this.contextid = contextid;\n        this.iceServers = iceServers;\n        this.roomid = roomid;\n        this.server = server;\n        this.peerid = peerid;\n\n        window.adapter = adapter;\n\n        this.ptype = 'publish';\n\n        document.querySelector('body').removeEventListener('venueclosed', this.handleClose.bind(this));\n        document.querySelector('body').addEventListener('venueclosed', this.handleClose.bind(this));\n    }\n\n    /**\n     * Start to establish the peer connections\n     */\n    startConnection() {\n\n        // Initialize the library (all console debuggers enabled)\n        Janus.init({\n            debug: \"all\", callback: () => {\n                // Create session.\n                this.janus = new Janus(\n                    {\n                        server: this.server,\n                        iceServers: this.iceServers,\n                        success: () => {\n                            // Attach to video room test plugin\n                            this.attach();\n                        },\n                        error: (error) => {\n                            this.restart = true;\n                            Log.debug(error);\n                        }\n                    }\n                );\n                document.querySelector('body').addEventListener('venueclosed', this.janus.destroy);\n            }\n        });\n    }\n\n    /**\n     * Register the room\n     *\n     * @param {object} pluginHandle\n     * @return {Promise}\n     */\n    register(pluginHandle) {\n        // Try a registration\n        return Ajax.call([{\n            args: {\n                handle: pluginHandle.getId(),\n                id: Number(this.peerid),\n                plugin: pluginHandle.plugin,\n                room: this.roomid,\n                ptype: this.ptype == 'publish',\n                session: pluginHandle.session.getSessionId()\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'block_deft_join_room'\n        }])[0].then(response => {\n            this.feed = response.id;\n        }).catch(Notification.exception);\n    }\n\n    onLocalTrack(track, on) {\n        Log.debug(on);\n        return;\n    }\n\n    onRemoteTrack() {\n        return;\n    }\n\n    onAttached(publishers) {\n        Log.debug(publishers);\n    }\n\n    /**\n     * Handle Janus plugin message\n     *\n     * @param {String} msg message\n     * @param {String} jsep negotiation\n     */\n    onMessage(msg, jsep) {\n        Log.debug(msg);\n        Janus.debug(\" ::: Got a message :::\", msg);\n        const event = msg.videoroom;\n        Janus.debug(\"Event: \" + event);\n        switch (event) {\n            case 'joined':\n                // Successfully joined, negotiate WebRTC now\n                if (msg.id) {\n                    Log.debug(\"Successfully joined room \" + msg.room + \" with ID \" + this.feed);\n                    if (!this.webrtcUp) {\n                        const tracks = [{type: 'data'}];\n                        this.webrtcUp = true;\n                        this.videoInput.then(videoStream => {\n                            if (!videoStream || (this.currentStream === videoStream)) {\n                                return videoStream;\n                            }\n                            this.currentStream = videoStream;\n                            videoStream.getVideoTracks().forEach(track => {\n                                tracks.push({\n                                    type: 'video',\n                                    capture: track,\n                                    recv: false\n                                });\n                            });\n                            this.videoroom.createOffer({\n                                tracks: tracks,\n                                success: (jsep) => {\n                                    Janus.debug(\"Got SDP!\", jsep);\n                                    const publish = {\n                                        request: \"configure\",\n                                        video: true,\n                                        audio: false\n                                    };\n                                    this.videoroom.send({\n                                        message: publish,\n                                        jsep: jsep\n                                    });\n                                },\n                                error: function(error) {\n                                    this.restart = true;\n                                    Janus.error(\"WebRTC error:\", error);\n                                    Notification.alert(\"WebRTC error... \", error.message);\n                                }\n                            });\n                            return videoStream;\n                        }).catch(Notification.exception);\n                    }\n                }\n                break;\n            case 'destroyed':\n                // The room has been destroyed\n                Janus.warn(\"The room has been destroyed!\");\n                Notification.alert('', \"The room has been destroyed\");\n                break;\n            case 'event':\n                if (msg.configured) {\n                    this.videoroom.webrtcStuff.pc.removeEventListener(\n                        'iceconnectionstatechange',\n                        this.publishFeed.bind(this)\n                    );\n                    this.videoroom.webrtcStuff.pc.addEventListener(\n                        'iceconnectionstatechange',\n                        this.publishFeed.bind(this)\n                    );\n                    setTimeout(this.publishFeed.bind(this));\n                } else if (msg.error) {\n                    if (msg.error_code === 485) {\n                        // This is a \"no such room\" error: give a more meaningful description\n                        Notification.alert(\n                            \"<p>Apparently room <code>\" + this.roomid + \"</code> (the one this demo uses as a test room) \" +\n                            \"does not exist...</p><p>Do you have an updated <code>janus.plugin.audiobridge.jcfg</code> \" +\n                            \"configuration file? If not, make sure you copy the details of room <code>\" + this.roomid + \"</code> \" +\n                            \"from that sample in your current configuration file, then restart Janus and try again.\"\n                        );\n                    } else if (msg.error_code === 435) {\n                        Log.debug(msg.error);\n                    } else {\n                        Notification.alert(msg.error_code, msg.error);\n                    }\n                    return;\n                } else {\n                    Log.debug(Object.keys(msg));\n                }\n                break;\n        }\n        if (jsep) {\n            Janus.debug(\"Handling SDP as well...\", jsep);\n            this.videoroom.handleRemoteJsep({jsep: jsep});\n        }\n    }\n\n    /**\n     * Handle click of button\n     *\n     * @param {Event} e\n     * @returns {Bool}\n     */\n    handleClick(e) {\n        const button = e.target.closest(\n            '[data-roomid=\"' + this.roomid + '\"] [data-action=\"publish\"],  [data-roomid=\"'\n                + this.roomid + '\"] [data-action=\"unpublish\"]'\n        );\n        if (button) {\n            const action = button.getAttribute('data-action'),\n                type = button.getAttribute('data-type');\n            e.stopPropagation();\n            e.preventDefault();\n            document.querySelectorAll(\n                '[data-region=\"deft-venue\"] [data-action=\"publish\"],  [data-region=\"deft-venue\"] [data-action=\"unpublish\"]'\n            ).forEach(button => {\n                if ((button.getAttribute('data-action') == action) && (button.getAttribute('data-type') == type)) {\n                    button.classList.add('hidden');\n                } else {\n                    button.classList.remove('hidden');\n                }\n            });\n            switch (action) {\n                case 'publish':\n                    Log.debug(type);\n                    if (type == 'display') {\n                        this.shareDisplay();\n                    } else {\n                        this.shareCamera();\n                    }\n\n                    if (this.unregistered) {\n                        this.attach();\n                        this.unregistered = false;\n                        return;\n                    }\n\n                    this.videoInput.then(videoStream => {\n                        const tracks = [];\n                        if (videoStream && (this.currentStream !== videoStream)) {\n                            this.currentStream = videoStream;\n                            videoStream.getVideoTracks().forEach(track => {\n                                tracks.push({\n                                    type: 'video',\n                                    capture: track,\n                                    recv: false\n                                });\n                                this.selectedTrack = track;\n                            });\n                            this.videoroom.createOffer({\n                                tracks: tracks,\n                                success: (jsep) => {\n                                    Janus.debug(\"Got SDP!\", jsep);\n                                    const publish = {\n                                        request: \"configure\",\n                                        video: true,\n                                        audio: false\n                                    };\n                                    this.videoroom.send({\n                                        message: publish,\n                                        jsep: jsep\n                                    });\n                                },\n                                error: function(error) {\n                                    Janus.error(\"WebRTC error:\", error);\n                                    Notification.alert(\"WebRTC error... \", error.message);\n                                }\n                            });\n                        }\n\n                        return videoStream;\n                    }).catch(Notification.exception);\n                    break;\n                case 'unpublish':\n                    if (this.videoInput) {\n                        this.videoInput.then(videoStream => {\n                            if (videoStream) {\n                                videoStream.getVideoTracks().forEach(track => {\n                                    track.stop();\n                                });\n                            }\n                            this.videoInput = null;\n\n                            return videoStream;\n                        }).catch(Notification.exception);\n                    }\n                    this.videoroom.send({\n                        message: {\n                            request: 'leave'\n                        }\n                    });\n                    this.unregistered = true;\n                    return Ajax.call([{\n                        args: {\n                            id: Number(this.peerid),\n                            publish: false,\n                            room: this.roomid\n                        },\n                        contextid: this.contextid,\n                        fail: Notification.exception,\n                        methodname: 'block_deft_publish_feed'\n                    }])[0];\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Handle close of windoww\n     */\n    handleClose() {\n        if (this.videoInput) {\n            this.videoInput.then(videoStream => {\n                if (videoStream) {\n                    videoStream.getTracks().forEach(track => {\n                        track.stop();\n                    });\n                }\n                return videoStream;\n            }).catch(Notification.exception);\n        }\n        this.janus.destroy();\n    }\n\n    /**\n     * Set video source to user camera\n     */\n    shareCamera() {\n        const videoInput = this.videoInput;\n\n        this.videoInput = navigator.mediaDevices.getUserMedia({\n            video: true,\n            audio: false\n        }).then(videoStream => {\n            if (videoInput) {\n                videoInput.then(videoStream => {\n                    if (videoStream) {\n                        videoStream.getTracks().forEach(track => {\n                            track.stop();\n                        });\n                    }\n                    return videoStream;\n                }).catch(Notification.exception);\n            }\n\n            return videoStream;\n        }).catch((e) => {\n            Log.debug(e);\n\n            return videoInput;\n        });\n    }\n\n    /**\n     * Set video source to display surface\n     */\n    shareDisplay() {\n        const videoInput = this.videoInput || Promise.resolve(null);\n\n        this.videoInput = navigator.mediaDevices.getDisplayMedia({\n            video: true,\n            audio: false\n        }).then(videoStream => {\n            videoInput.then(videoStream => {\n                if (videoStream) {\n                    videoStream.getTracks().forEach(track => {\n                        track.stop();\n                    });\n                }\n                return videoStream;\n            }).catch(Notification.exception);\n\n            videoStream.type = 'display';\n\n            return videoStream;\n        }).catch((e) => {\n            Log.debug(e);\n\n            videoInput.then(videoStream => {\n                document.querySelectorAll(\n                    '[data-region=\"deft-venue\"] [data-action=\"publish\"],  [data-region=\"deft-venue\"] [data-action=\"unpublish\"]'\n                ).forEach(button => {\n                    if (videoStream) {\n                        if (\n                            (button.getAttribute('data-action') == 'unpublish')\n                            || (button.getAttribute('data-type') === 'display')\n                        ) {\n                            button.classList.remove('hidden');\n                        } else {\n                            button.classList.add('hidden');\n                        }\n                    } else {\n                        if (button.getAttribute('data-action') == 'unpublish') {\n                            button.classList.add('hidden');\n                        } else {\n                            button.classList.remove('hidden');\n                        }\n                    }\n                });\n            });\n\n            return videoInput;\n        });\n    }\n\n    /**\n     * Publish current video feed\n     */\n    publishFeed() {\n        if (\n            this.videoroom.webrtcStuff.pc\n            && this.videoroom.webrtcStuff.pc.iceConnectionState == 'connected'\n        ) {\n                return Ajax.call([{\n                    args: {\n                        id: Number(this.peerid),\n                        room: this.roomid,\n                    },\n                    contextid: this.contextid,\n                    fail: Notification.exception,\n                    methodname: 'block_deft_publish_feed'\n                }])[0].then((result) => {\n                    setTimeout(() => {\n                        this.videoroom.webrtcStuff.pc.getTransceivers().forEach(transceiver => {\n                            const sender = transceiver.sender;\n                            if (\n                                sender.track\n                                && this.selectedTrack\n                                && (sender.track.id == this.selectedTrack.id)\n                            ) {\n                                const message = JSON.stringify({\n                                    feed: this.feed,\n                                    mid: transceiver.mid\n                                });\n                                this.videoroom.data({\n                                    text: message,\n                                    error: Log.debug\n                                });\n                            }\n                        });\n                    });\n\n                    return result;\n                }).catch(Notification.exception);\n        }\n\n        return Promise.resolve(null);\n    }\n\n    /**\n     * Stop video feed\n     */\n    unpublish() {\n        if (this.videoInput) {\n            this.videoroom.send({\n                message: {\n                    request: 'leave'\n                }\n            });\n            this.videoInput.then(videoStream => {\n                if (videoStream) {\n                    videoStream.getVideoTracks().forEach(track => {\n                        track.stop();\n                    });\n                }\n\n                return videoStream;\n            }).catch(Notification.exception);\n            this.videoInput = Promise.resolve(null);\n        }\n        this.currentDisplay = null;\n        document.querySelectorAll(\n            '[data-region=\"deft-venue\"] [data-action=\"publish\"]'\n        ).forEach(button => {\n            button.classList.remove('hidden');\n        });\n        document.querySelectorAll(\n            '[data-region=\"deft-venue\"] [data-action=\"unpublish\"]'\n        ).forEach(button => {\n            button.classList.add('hidden');\n        });\n    }\n\n    attach() {\n        this.janus.attach(\n            {\n                plugin: \"janus.plugin.videoroom\",\n                opaqueId: \"videoroom-\" + Janus.randomString(12),\n                success: pluginHandle => {\n                    this.videoroom = pluginHandle;\n                    this.register(pluginHandle);\n                },\n                error: function(error) {\n                    Janus.error(\"  -- Error attaching plugin...\", error);\n                    Notification.alert('', \"Error attaching plugin... \" + error);\n                },\n                ondata: (data) => {\n                    const message = JSON.parse(data);\n                    if (message && message.feed) {\n                        const publish = {\n                            request: 'update',\n                            subscribe: [{\n                                feed: message.feed,\n                                mid: message.mid,\n                            }]\n                        };\n                        this.videoroom.send({\n                            message: publish\n                        });\n                    }\n                },\n                onlocaltrack: this.onLocalTrack.bind(this),\n                onremotetrack: this.onRemoteTrack.bind(this),\n                onmessage: this.onMessage.bind(this)\n            }\n        );\n    }\n}\n"],"names":["constructor","contextid","iceServers","roomid","server","peerid","window","adapter","ptype","document","querySelector","removeEventListener","this","handleClose","bind","addEventListener","startConnection","init","debug","callback","janus","Janus","success","attach","error","restart","destroy","register","pluginHandle","Ajax","call","args","handle","getId","id","Number","plugin","room","session","getSessionId","fail","Notification","exception","methodname","then","response","feed","catch","onLocalTrack","track","on","onRemoteTrack","onAttached","publishers","onMessage","msg","jsep","event","videoroom","webrtcUp","tracks","type","videoInput","videoStream","currentStream","getVideoTracks","forEach","push","capture","recv","createOffer","send","message","request","video","audio","alert","warn","configured","webrtcStuff","pc","publishFeed","setTimeout","error_code","Object","keys","handleRemoteJsep","handleClick","e","button","target","closest","action","getAttribute","stopPropagation","preventDefault","querySelectorAll","classList","add","remove","shareDisplay","shareCamera","unregistered","selectedTrack","stop","publish","getTracks","navigator","mediaDevices","getUserMedia","Promise","resolve","getDisplayMedia","iceConnectionState","result","getTransceivers","transceiver","sender","JSON","stringify","mid","data","text","Log","unpublish","currentDisplay","opaqueId","randomString","ondata","parse","subscribe","onlocaltrack","onremotetrack","onmessage"],"mappings":"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"}