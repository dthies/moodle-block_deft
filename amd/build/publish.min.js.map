{"version":3,"file":"publish.min.js","sources":["../src/publish.js"],"sourcesContent":["/**\n * Manage venue connections\n *\n * @module     block_deft/venue_manager\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport adapter from \"core/adapter\";\nimport Ajax from \"core/ajax\";\nimport Janus from 'block_deft/janus-gateway';\nimport Log from \"core/log\";\nimport Notification from \"core/notification\";\n\nexport default class Publish {\n\n    /**\n     * Listen for comment actions\n     *\n     * @param {int} contextid Context id of block\n     * @param {array} iceServers ICE server array to configure peers\n     * @param {int} roomid\n     * @param {string} server\n     * @param {int} peerid\n     */\n    constructor(\n        contextid, iceServers, roomid, server, peerid\n    ) {\n        this.contextid = contextid;\n        this.iceServers = iceServers;\n        this.roomid = roomid;\n        this.server = server;\n        this.peerid = peerid;\n\n        window.adapter = adapter;\n\n        this.ptype = 'publish';\n\n        document.querySelector('body').removeEventListener('venueclosed', this.handleClose.bind(this));\n        document.querySelector('body').addEventListener('venueclosed', this.handleClose.bind(this));\n        document.querySelectorAll(\n            '[data-region=\"deft-venue\"] [data-action=\"publish\"]'\n        ).forEach(button => {\n            button.classList.remove('hidden');\n        });\n        document.querySelectorAll(\n            '[data-region=\"deft-venue\"] [data-action=\"unpublish\"]'\n        ).forEach(button => {\n            button.classList.add('hidden');\n        });\n    }\n\n    /**\n     * Start to establish the peer connections\n     */\n    startConnection() {\n\n        // Initialize the library (all console debuggers enabled)\n        Janus.init({\n            debug: \"all\", callback: () => {\n                // Create session.\n                this.janus = new Janus(\n                    {\n                        server: this.server,\n                        iceServers: this.iceServers,\n                        success: () => {\n                            // Attach to video room test plugin\n                            this.attach();\n                        },\n                        error: (error) => {\n                            this.restart = true;\n                            Log.debug(error);\n                        }\n                    }\n                );\n                document.querySelector('body').addEventListener('venueclosed', this.janus.destroy);\n            }\n        });\n    }\n\n    /**\n     * Register the room\n     *\n     * @param {object} pluginHandle\n     * @return {Promise}\n     */\n    register(pluginHandle) {\n        // Try a registration\n        return Ajax.call([{\n            args: {\n                handle: pluginHandle.getId(),\n                id: Number(this.peerid),\n                plugin: pluginHandle.plugin,\n                room: this.roomid,\n                ptype: this.ptype == 'publish',\n                session: pluginHandle.session.getSessionId()\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'block_deft_join_room'\n        }])[0].then(response => {\n            this.feed = response.id;\n        }).catch(Notification.exception);\n    }\n\n    onLocalTrack(track, on) {\n        Log.debug(on);\n        return;\n    }\n\n    onRemoteTrack() {\n        return;\n    }\n\n    onAttached(publishers) {\n        Log.debug(publishers);\n    }\n\n    /**\n     * Handle Janus plugin message\n     *\n     * @param {String} msg message\n     * @param {String} jsep negotiation\n     */\n    onMessage(msg, jsep) {\n        Log.debug(msg);\n        Janus.debug(\" ::: Got a message :::\", msg);\n        const event = msg.videoroom;\n        Janus.debug(\"Event: \" + event);\n        switch (event) {\n            case 'joined':\n                // Successfully joined, negotiate WebRTC now\n                if (msg.id) {\n                    Log.debug(\"Successfully joined room \" + msg.room + \" with ID \" + this.feed);\n                    if (!this.webrtcUp) {\n                        const tracks = [{type: 'data'}];\n                        this.webrtcUp = true;\n                        this.videoInput.then(videoStream => {\n                            if (!videoStream || (this.currentStream === videoStream)) {\n                                return videoStream;\n                            }\n                            videoStream.getVideoTracks().forEach(track => {\n                                track.addEventListener('ended', () => {\n                                    if (this.selectedTrack != track.id) {\n                                        this.unpublish();\n                                    }\n                                });\n                                tracks.push({\n                                    type: 'video',\n                                    capture: track,\n                                    recv: false\n                                });\n                            });\n                            this.currentStream = videoStream;\n                            this.videoroom.createOffer({\n                                tracks: tracks,\n                                success: (jsep) => {\n                                    Janus.debug(\"Got SDP!\", jsep);\n                                    const publish = {\n                                        request: \"configure\",\n                                        video: true,\n                                        audio: false\n                                    };\n                                    this.videoroom.send({\n                                        message: publish,\n                                        jsep: jsep\n                                    });\n                                },\n                                error: function(error) {\n                                    this.restart = true;\n                                    Janus.error(\"WebRTC error:\", error);\n                                    Notification.alert(\"WebRTC error... \", error.message);\n                                }\n                            });\n                            return videoStream;\n                        }).catch(Notification.exception);\n                    }\n                }\n                break;\n            case 'destroyed':\n                // The room has been destroyed\n                Janus.warn(\"The room has been destroyed!\");\n                Notification.alert('', \"The room has been destroyed\");\n                break;\n            case 'event':\n                if (msg.configured) {\n                    this.videoroom.webrtcStuff.pc.removeEventListener(\n                        'iceconnectionstatechange',\n                        this.publishFeed.bind(this)\n                    );\n                    this.videoroom.webrtcStuff.pc.addEventListener(\n                        'iceconnectionstatechange',\n                        this.publishFeed.bind(this)\n                    );\n                    setTimeout(this.publishFeed.bind(this));\n                } else if (msg.error) {\n                    if (msg.error_code === 485) {\n                        // This is a \"no such room\" error: give a more meaningful description\n                        Notification.alert(\n                            \"<p>Apparently room <code>\" + this.roomid + \"</code> (the one this demo uses as a test room) \" +\n                            \"does not exist...</p><p>Do you have an updated <code>janus.plugin.audiobridge.jcfg</code> \" +\n                            \"configuration file? If not, make sure you copy the details of room <code>\" + this.roomid + \"</code> \" +\n                            \"from that sample in your current configuration file, then restart Janus and try again.\"\n                        );\n                    } else if (msg.error_code === 435) {\n                        Log.debug(msg.error);\n                    } else {\n                        Notification.alert(msg.error_code, msg.error);\n                    }\n                    return;\n                } else {\n                    Log.debug(Object.keys(msg));\n                }\n                break;\n        }\n        if (jsep) {\n            Janus.debug(\"Handling SDP as well...\", jsep);\n            this.videoroom.handleRemoteJsep({jsep: jsep});\n        }\n    }\n\n    /**\n     * Handle click of button\n     *\n     * @param {Event} e\n     * @returns {Bool}\n     */\n    handleClick(e) {\n        const button = e.target.closest(\n            '[data-roomid=\"' + this.roomid + '\"] [data-action=\"publish\"],  [data-roomid=\"'\n                + this.roomid + '\"] [data-action=\"unpublish\"]'\n        );\n        if (button) {\n            const action = button.getAttribute('data-action'),\n                type = button.getAttribute('data-type');\n            e.stopPropagation();\n            e.preventDefault();\n            document.querySelectorAll(\n                '[data-region=\"deft-venue\"] [data-action=\"publish\"],  [data-region=\"deft-venue\"] [data-action=\"unpublish\"]'\n            ).forEach(button => {\n                if ((button.getAttribute('data-action') == action) && (button.getAttribute('data-type') == type)) {\n                    button.classList.add('hidden');\n                } else {\n                    button.classList.remove('hidden');\n                }\n            });\n            switch (action) {\n                case 'publish':\n                    Log.debug(type);\n                    if (type == 'display') {\n                        this.shareDisplay();\n                    } else {\n                        this.shareCamera();\n                    }\n\n                    this.videoInput.then(videoStream => {\n                        const tracks = [];\n                        if (videoStream && (this.currentStream !== videoStream)) {\n                            const transceiver = this.getTransceiver();\n                            videoStream.getVideoTracks().forEach(track => {\n                                track.addEventListener('ended', () => {\n                                    if (this.selectedTrack != track.id) {\n                                        this.unpublish();\n                                    }\n                                });\n                                if (transceiver) {\n                                    this.videoroom.replaceTracks({\n                                        tracks: [{\n                                            type: 'video',\n                                            mid: transceiver.mid,\n                                            capture: track\n                                        }],\n                                        error: Notification.exception\n                                    });\n\n                                    this.selectedTrack = track;\n                                    return;\n                                }\n                                tracks.push({\n                                    type: 'video',\n                                    capture: track,\n                                    recv: false\n                                });\n                                this.selectedTrack = track;\n                            });\n                            if (!tracks.length) {\n                                return videoStream;\n                            }\n                            this.videoroom.createOffer({\n                                tracks: tracks,\n                                success: (jsep) => {\n                                    Janus.debug(\"Got SDP!\", jsep);\n                                    const publish = {\n                                        request: \"configure\",\n                                        video: true,\n                                        audio: false\n                                    };\n                                    this.videoroom.send({\n                                        message: publish,\n                                        jsep: jsep\n                                    });\n                                },\n                                error: function(error) {\n                                    Janus.error(\"WebRTC error:\", error);\n                                    Notification.alert(\"WebRTC error... \", error.message);\n                                }\n                            });\n                        }\n\n                        return videoStream;\n                    }).catch(Notification.exception);\n                    break;\n                case 'unpublish':\n                    if (this.videoInput) {\n                        this.videoInput.then(videoStream => {\n                            if (videoStream) {\n                                videoStream.getVideoTracks().forEach(track => {\n                                    track.stop();\n                                });\n                            }\n                            this.videoInput = null;\n\n                            return videoStream;\n                        }).catch(Notification.exception);\n                    }\n                    this.unpublish();\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Handle close of windoww\n     */\n    handleClose() {\n        if (this.videoInput) {\n            this.videoInput.then(videoStream => {\n                if (videoStream) {\n                    videoStream.getTracks().forEach(track => {\n                        track.stop();\n                    });\n                }\n                return videoStream;\n            }).catch(Notification.exception);\n        }\n\n        this.janus.destroy();\n\n        document.querySelectorAll(\n            '[data-region=\"deft-venue\"] [data-action=\"publish\"]'\n        ).forEach(button => {\n            button.classList.remove('hidden');\n        });\n        document.querySelectorAll(\n            '[data-region=\"deft-venue\"] [data-action=\"unpublish\"]'\n        ).forEach(button => {\n            button.classList.add('hidden');\n        });\n    }\n\n    /**\n     * Set video source to user camera\n     */\n    shareCamera() {\n        const videoInput = this.videoInput;\n\n        this.videoInput = navigator.mediaDevices.getUserMedia({\n            video: true,\n            audio: false\n        }).then(videoStream => {\n            if (videoInput) {\n                videoInput.then(videoStream => {\n                    if (videoStream) {\n                        videoStream.getTracks().forEach(track => {\n                            track.stop();\n                        });\n                    }\n                    return videoStream;\n                }).catch(Notification.exception);\n            }\n\n            return videoStream;\n        }).catch((e) => {\n            Log.debug(e);\n\n            return videoInput;\n        });\n    }\n\n    /**\n     * Set video source to display surface\n     */\n    shareDisplay() {\n        const videoInput = this.videoInput || Promise.resolve(null);\n\n        this.videoInput = navigator.mediaDevices.getDisplayMedia({\n            video: true,\n            audio: false\n        }).then(videoStream => {\n            videoInput.then(videoStream => {\n                if (videoStream) {\n                    videoStream.getTracks().forEach(track => {\n                        track.stop();\n                    });\n                }\n                return videoStream;\n            }).catch(Notification.exception);\n\n            videoStream.type = 'display';\n\n            return videoStream;\n        }).catch((e) => {\n            Log.debug(e);\n\n            videoInput.then(videoStream => {\n                document.querySelectorAll(\n                    '[data-region=\"deft-venue\"] [data-action=\"publish\"],  [data-region=\"deft-venue\"] [data-action=\"unpublish\"]'\n                ).forEach(button => {\n                    if (videoStream) {\n                        if (\n                            (button.getAttribute('data-action') == 'unpublish')\n                            || (button.getAttribute('data-type') === 'display')\n                        ) {\n                            button.classList.remove('hidden');\n                        } else {\n                            button.classList.add('hidden');\n                        }\n                    } else {\n                        if (button.getAttribute('data-action') == 'unpublish') {\n                            button.classList.add('hidden');\n                        } else {\n                            button.classList.remove('hidden');\n                        }\n                    }\n                });\n            });\n\n            return videoInput;\n        });\n    }\n\n    /**\n     * Publish current video feed\n     */\n    publishFeed() {\n        if (\n            this.videoroom.webrtcStuff.pc\n            && this.videoroom.webrtcStuff.pc.iceConnectionState == 'connected'\n        ) {\n                return Ajax.call([{\n                    args: {\n                        id: Number(this.peerid),\n                        room: this.roomid,\n                    },\n                    contextid: this.contextid,\n                    fail: Notification.exception,\n                    methodname: 'block_deft_publish_feed'\n                }])[0].then((result) => {\n                    setTimeout(() => {\n                        this.videoroom.webrtcStuff.pc.getTransceivers().forEach(transceiver => {\n                            const sender = transceiver.sender;\n                            if (\n                                sender.track\n                                && this.selectedTrack\n                                && (sender.track.id == this.selectedTrack.id)\n                            ) {\n                                const message = JSON.stringify({\n                                    feed: this.feed,\n                                    mid: transceiver.mid\n                                });\n                                this.videoroom.data({\n                                    text: message,\n                                    error: Log.debug\n                                });\n                            }\n                        });\n                    });\n\n                    return result;\n                }).catch(Notification.exception);\n        }\n\n        return Promise.resolve(null);\n    }\n\n    /**\n     * Stop video feed\n     *\n     * @param {string} kind Track type\n     * $returns {RTCTransceivr}\n     */\n    getTransceiver(kind) {\n        let result = null;\n\n        if (\n            this.videoroom.webrtcStuff.pc\n            && this.videoroom.webrtcStuff.pc.iceConnectionState == 'connected'\n        ) {\n            this.videoroom.webrtcStuff.pc.getTransceivers().forEach(transceiver => {\n                const sender = transceiver.sender;\n                if (\n                    sender.track\n                    && sender.track.id\n                    && (sender.track.kind == (kind || 'video'))\n                ) {\n                    result = transceiver;\n                }\n            });\n        }\n\n        return result;\n    }\n\n    /**\n     * Stop video feed\n     */\n    unpublish() {\n        return Ajax.call([{\n            args: {\n                id: Number(this.feed),\n                publish: false,\n                room: this.roomid\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'block_deft_publish_feed'\n        }])[0];\n    }\n\n    attach() {\n        this.janus.attach(\n            {\n                plugin: \"janus.plugin.videoroom\",\n                opaqueId: \"videoroom-\" + Janus.randomString(12),\n                success: pluginHandle => {\n                    this.videoroom = pluginHandle;\n                    this.register(pluginHandle);\n                },\n                error: function(error) {\n                    Janus.error(\"  -- Error attaching plugin...\", error);\n                    Notification.alert('', \"Error attaching plugin... \" + error);\n                },\n                ondata: (data) => {\n                    const message = JSON.parse(data);\n                    if (message && message.feed) {\n                        const publish = {\n                            request: 'update',\n                            subscribe: [{\n                                feed: message.feed,\n                                mid: message.mid,\n                            }]\n                        };\n                        this.videoroom.send({\n                            message: publish\n                        });\n                    }\n                },\n                onlocaltrack: this.onLocalTrack.bind(this),\n                onremotetrack: this.onRemoteTrack.bind(this),\n                onmessage: this.onMessage.bind(this)\n            }\n        );\n    }\n}\n"],"names":["constructor","contextid","iceServers","roomid","server","peerid","window","adapter","ptype","document","querySelector","removeEventListener","this","handleClose","bind","addEventListener","querySelectorAll","forEach","button","classList","remove","add","startConnection","init","debug","callback","janus","Janus","success","attach","error","restart","destroy","register","pluginHandle","Ajax","call","args","handle","getId","id","Number","plugin","room","session","getSessionId","fail","Notification","exception","methodname","then","response","feed","catch","onLocalTrack","track","on","onRemoteTrack","onAttached","publishers","onMessage","msg","jsep","event","videoroom","webrtcUp","tracks","type","videoInput","videoStream","currentStream","getVideoTracks","selectedTrack","unpublish","push","capture","recv","createOffer","send","message","request","video","audio","alert","warn","configured","webrtcStuff","pc","publishFeed","setTimeout","error_code","Object","keys","handleRemoteJsep","handleClick","e","target","closest","action","getAttribute","stopPropagation","preventDefault","shareDisplay","shareCamera","transceiver","getTransceiver","replaceTracks","mid","length","stop","getTracks","navigator","mediaDevices","getUserMedia","Promise","resolve","getDisplayMedia","iceConnectionState","result","getTransceivers","sender","JSON","stringify","data","text","Log","kind","publish","opaqueId","randomString","ondata","parse","subscribe","onlocaltrack","onremotetrack","onmessage"],"mappings":"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"}