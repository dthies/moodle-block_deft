{"version":3,"file":"test.min.js","sources":["../src/test.js"],"sourcesContent":["/*\n * Test the connection with message service\n *\n * @package    block_deft\n * @module     block_deft/test\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport Fragment from \"core/fragment\";\nimport Log from \"core/log\";\nimport Notification from \"core/notification\";\nimport Socket from \"block_deft/socket\";\nimport {get_string as getString} from 'core/str';\nimport * as Toast from 'core/toast';\n\nexport default {\n\n    /**\n     * Test connection\n     *\n     * @param {int} contextid Context id of block\n     */\n    init: function(contextid) {\n        Log.debug('Requesting token');\n        Ajax.call([{\n            methodname: 'block_deft_renew_token',\n            args: {contextid: contextid},\n            done: (token) => {\n                const socket = new Socket(contextid, token.token);\n                getString('authorizationreceived', 'block_deft').done((message) => {\n                    Toast.add(message, {'type': 'info'});\n                });\n                socket.subscribe((e) => {\n                    if (e.type === 'message') {\n                        getString('messagereceived', 'block_deft').done((message) => {\n                            Toast.add(message, {'type': 'success'});\n                        });\n                    }\n                });\n\n                setTimeout(() => {\n                    Fragment.loadFragment(\n                        'block_deft',\n                        'test',\n                        contextid,\n                        {}\n                    ).done((message) => {\n                        Toast.add(message, {'type': 'info'});\n                    }).fail(Notification.exception);\n                }, 500);\n            },\n            fail: Notification.exception\n        }]);\n    }\n};\n"],"names":["_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireDefault","obj","__esModule","default","_ajax","_fragment","_log","_notification","_socket","Toast","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireWildcard","_default","init","contextid","Log","debug","Ajax","methodname","args","done","token","socket","Socket","getString","message","add","type","subscribe","e","setTimeout","Fragment","loadFragment","fail","Notification","exception","_exports"],"mappings":"sNAeoC,SAAAA,yBAAAC,aAAA,GAAA,mBAAAC,QAAA,OAAA,KAAA,IAAAC,kBAAAD,IAAAA,QAAAE,iBAAAF,IAAAA,eAAAF,yBAAA,SAAAC,aAAAA,OAAAA,YAAAG,iBAAAD,oBAAAF,YAAA,CAAA,SAAAI,uBAAAC,KAAAA,OAAAA,KAAAA,IAAAC,WAAAD,IAAAE,CAAAA,QAAAF,IAAA;;;;;;;;qFANpCG,MAAAJ,uBAAAI,OACAC,UAAAL,uBAAAK,WACAC,KAAAN,uBAAAM,MACAC,cAAAP,uBAAAO,eACAC,QAAAR,uBAAAQ,SAEAC,MAAoC,SAAAR,IAAAL,aAAAA,IAAAA,aAAAK,KAAAA,IAAAC,WAAAD,OAAAA,IAAAA,GAAAA,OAAAA,KAAAA,iBAAAA,KAAAE,mBAAAF,IAAAE,MAAAA,CAAAA,QAAAF,KAAAS,IAAAA,MAAAf,yBAAAC,aAAA,GAAAc,OAAAA,MAAAC,IAAAV,KAAA,OAAAS,MAAAE,IAAAX,KAAA,IAAAY,OAAAC,GAAAA,sBAAAC,OAAAC,gBAAAD,OAAAE,yBAAAC,IAAAA,IAAAA,OAAAjB,IAAAiB,eAAAA,KAAAH,OAAAI,UAAAC,eAAAC,KAAApB,IAAAiB,KAAA,CAAA,IAAAI,KAAAR,sBAAAC,OAAAE,yBAAAhB,IAAAiB,KAAAI,KAAAA,OAAAA,KAAAV,KAAAU,KAAAC,KAAAR,OAAAC,eAAAH,OAAAK,IAAAI,MAAAT,OAAAK,KAAAjB,IAAAiB,IAAAL,CAAAA,OAAAV,QAAAF,IAAAS,OAAAA,MAAAa,IAAAtB,IAAAY,eAAAA,MAAA,CAApCW,CAAAf,OAfA,IAAAgB,SAiBe,CAOXC,KAAM,SAASC,WACXC,KAAAA,QAAIC,MAAM,oBACVC,MAAI3B,QAACkB,KAAK,CAAC,CACPU,WAAY,yBACZC,KAAM,CAACL,UAAWA,WAClBM,KAAOC,QACH,MAAMC,OAAS,IAAIC,QAAMjC,QAACwB,UAAWO,MAAMA,QAC3C,EAAAG,KAAAA,YAAU,wBAAyB,cAAcJ,MAAMK,UACnD7B,MAAM8B,IAAID,QAAS,CAACE,KAAQ,QAAQ,IAExCL,OAAOM,WAAWC,IACC,YAAXA,EAAEF,OACF,EAAAH,KAAAA,YAAU,kBAAmB,cAAcJ,MAAMK,UAC7C7B,MAAM8B,IAAID,QAAS,CAACE,KAAQ,WAAW,GAE/C,IAGJG,YAAW,KACPC,UAAAA,QAASC,aACL,aACA,OACAlB,UACA,CAAE,GACJM,MAAMK,UACJ7B,MAAM8B,IAAID,QAAS,CAACE,KAAQ,QAAQ,IACrCM,KAAKC,cAAY5C,QAAC6C,UAAU,GAChC,IAAI,EAEXF,KAAMC,sBAAaC,YAE3B,GACH,OAAAC,SAAA9C,QAAAsB,SAAAwB,SAAA9C,OAAA"}