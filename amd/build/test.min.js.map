{"version":3,"file":"test.min.js","sources":["../src/test.js"],"sourcesContent":["/*\n * Test the connection with message service\n *\n * @package    block_deft\n * @module     block_deft/test\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport Fragment from \"core/fragment\";\nimport Log from \"core/log\";\nimport Notification from \"core/notification\";\nimport Socket from \"block_deft/socket\";\nimport {get_string as getString} from 'core/str';\nimport * as Toast from 'core/toast';\n\nexport default {\n\n    /**\n     * Test connection\n     *\n     * @param {int} contextid Context id of block\n     */\n    init: function(contextid) {\n        Log.debug('Requesting token');\n        Ajax.call([{\n            methodname: 'block_deft_renew_token',\n            args: {contextid: contextid},\n            done: (token) => {\n                const socket = new Socket(contextid, token.token);\n                getString('authorizationreceived', 'block_deft').done((message) => {\n                    Toast.add(message, {'type': 'info'});\n                });\n                socket.subscribe((e) => {\n                    if (e.type === 'message') {\n                        getString('messagereceived', 'block_deft').done((message) => {\n                            Toast.add(message, {'type': 'success'});\n                        });\n                    }\n                });\n\n                setTimeout(() => {\n                    Fragment.loadFragment(\n                        'block_deft',\n                        'test',\n                        contextid,\n                        {}\n                    ).done((message) => {\n                        Toast.add(message, {'type': 'info'});\n                    }).fail(Notification.exception);\n                }, 500);\n            },\n            fail: Notification.exception\n        }]);\n    }\n};\n"],"names":["_interopRequireDefault","e","__esModule","default","_ajax","_fragment","_log","_notification","_socket","Toast","t","WeakMap","r","n","o","i","f","__proto__","has","get","set","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","_interopRequireWildcard","_default","init","contextid","Log","debug","Ajax","methodname","args","done","token","socket","Socket","getString","message","add","type","subscribe","setTimeout","Fragment","loadFragment","fail","Notification","exception","_exports"],"mappings":"qNAeoC,SAAAA,uBAAAC,GAAAA,OAAAA,GAAAA,EAAAC,WAAAD,EAAAE,CAAAA,QAAAF,EAAA;;;;;;;;qFANpCG,MAAAJ,uBAAAI,OACAC,UAAAL,uBAAAK,WACAC,KAAAN,uBAAAM,MACAC,cAAAP,uBAAAO,eACAC,QAAAR,uBAAAQ,SAEAC,MAAoC,SAAAR,EAAAS,GAAAC,GAAAA,mBAAAA,QAAAC,IAAAA,EAAAD,IAAAA,QAAAE,MAAAF,QAAA,OAAA,SAAAV,EAAAS,OAAAA,GAAAT,GAAAA,EAAAC,WAAA,OAAAD,EAAAa,IAAAA,EAAAC,EAAAC,EAAAC,CAAAA,eAAAd,QAAAF,GAAA,GAAA,OAAAA,GAAA,iBAAAA,GAAA,mBAAAA,EAAAe,OAAAA,EAAAF,GAAAA,EAAAJ,EAAAG,EAAAD,EAAA,CAAA,GAAAE,EAAAI,IAAAjB,GAAA,OAAAa,EAAAK,IAAAlB,GAAAa,EAAAM,IAAAnB,EAAAe,EAAAN,CAAAA,IAAAA,MAAAA,KAAAT,cAAAS,GAAA,CAAA,EAAAW,eAAAC,KAAArB,EAAAS,MAAAK,GAAAD,EAAAS,OAAAC,iBAAAD,OAAAE,yBAAAxB,EAAAS,MAAAK,EAAAI,KAAAJ,EAAAK,KAAAN,EAAAE,EAAAN,EAAAK,GAAAC,EAAAN,GAAAT,EAAAS,IAAAM,OAAAA,CAAAf,CAAA,CAAAA,EAAAS,EAAA,CAApCgB,CAAAjB,OAfA,IAAAkB,SAiBe,CAOXC,KAAM,SAASC,WACXC,KAAAA,QAAIC,MAAM,oBACVC,MAAI7B,QAACmB,KAAK,CAAC,CACPW,WAAY,yBACZC,KAAM,CAACL,UAAWA,WAClBM,KAAOC,QACH,MAAMC,OAAS,IAAIC,QAAMnC,QAAC0B,UAAWO,MAAMA,QAC3C,EAAAG,KAAAA,YAAU,wBAAyB,cAAcJ,KAAMK,UACnD/B,MAAMgC,IAAID,QAAS,CAACE,KAAQ,WAEhCL,OAAOM,UAAW1C,IACC,YAAXA,EAAEyC,OACF,EAAAH,KAAAA,YAAU,kBAAmB,cAAcJ,KAAMK,UAC7C/B,MAAMgC,IAAID,QAAS,CAACE,KAAQ,gBAKxCE,WAAW,KACPC,UAAAA,QAASC,aACL,aACA,OACAjB,UACA,CACJ,GAAEM,KAAMK,UACJ/B,MAAMgC,IAAID,QAAS,CAACE,KAAQ,WAC7BK,KAAKC,cAAY7C,QAAC8C,YACtB,MAEPF,KAAMC,sBAAaC,YAE3B,GACH,OAAAC,SAAA/C,QAAAwB,SAAAuB,SAAA/C,OAAA"}